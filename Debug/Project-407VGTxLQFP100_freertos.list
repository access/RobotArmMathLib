
Project-407VGTxLQFP100_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009190  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095d0  080095d0  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095d8  080095d8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095d8  080095d8  000195d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080095e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050e8  20000208  080097e4  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200052f0  080097e4  000252f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc71  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034f6  00000000  00000000  0003bea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  0003f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  00040a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023956  00000000  00000000  00041fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013347  00000000  00000000  000658fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d778d  00000000  00000000  00078c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001503d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062ac  00000000  00000000  00150450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009308 	.word	0x08009308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08009308 	.word	0x08009308

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <InitRobotArm>:
#include <RobotArm.h>

void InitRobotArm(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <InitRobotArm+0x1c>)
 8000500:	f003 f914 	bl	800372c <HAL_GPIO_WritePin>
	osDelay(5000);
 8000504:	f241 3088 	movw	r0, #5000	; 0x1388
 8000508:	f005 fff6 	bl	80064f8 <osDelay>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40020c00 	.word	0x40020c00

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f002 faa2 	bl	8002a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f862 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fcbc 	bl	8000e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fc9a 	bl	8000e5c <MX_DMA_Init>
  MX_SPI2_Init();
 8000528:	f000 f8c6 	bl	80006b8 <MX_SPI2_Init>
  MX_TIM1_Init();
 800052c:	f000 f8fa 	bl	8000724 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000530:	f000 fa10 	bl	8000954 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000534:	f000 fa86 	bl	8000a44 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000538:	f000 fafc 	bl	8000b34 <MX_TIM8_Init>
  MX_TIM9_Init();
 800053c:	f000 fb9c 	bl	8000c78 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000540:	f000 fbfe 	bl	8000d40 <MX_TIM12_Init>
  MX_UART4_Init();
 8000544:	f000 fc60 	bl	8000e08 <MX_UART4_Init>
  MX_TIM2_Init();
 8000548:	f000 f98e 	bl	8000868 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	//DWT_Init();
  InitRobotArm();
 800054c:	f7ff ffd2 	bl	80004f4 <InitRobotArm>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f005 fec2 	bl	80062d8 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of JOINT_QUEUE */
  JOINT_QUEUEHandle = osMessageQueueNew (32, sizeof(uint32_t), &JOINT_QUEUE_attributes);
 8000554:	4a15      	ldr	r2, [pc, #84]	; (80005ac <main+0x98>)
 8000556:	2104      	movs	r1, #4
 8000558:	2020      	movs	r0, #32
 800055a:	f005 fffb 	bl	8006554 <osMessageQueueNew>
 800055e:	4602      	mov	r2, r0
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <main+0x9c>)
 8000562:	601a      	str	r2, [r3, #0]
	//xQueue = xQueueCreate(JOINTCMD_QUEUE_SIZE, sizeof(JointCMD));
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <main+0xa0>)
 8000566:	2100      	movs	r1, #0
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <main+0xa4>)
 800056a:	f005 ff1f 	bl	80063ac <osThreadNew>
 800056e:	4602      	mov	r2, r0
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <main+0xa8>)
 8000572:	601a      	str	r2, [r3, #0]

  /* creation of UART_Send */
  UART_SendHandle = osThreadNew(UARTsend, NULL, &UART_Send_attributes);
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <main+0xac>)
 8000576:	2100      	movs	r1, #0
 8000578:	4812      	ldr	r0, [pc, #72]	; (80005c4 <main+0xb0>)
 800057a:	f005 ff17 	bl	80063ac <osThreadNew>
 800057e:	4602      	mov	r2, r0
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <main+0xb4>)
 8000582:	601a      	str	r2, [r3, #0]

  /* creation of UART_Get */
  UART_GetHandle = osThreadNew(UARTget, NULL, &UART_Get_attributes);
 8000584:	4a11      	ldr	r2, [pc, #68]	; (80005cc <main+0xb8>)
 8000586:	2100      	movs	r1, #0
 8000588:	4811      	ldr	r0, [pc, #68]	; (80005d0 <main+0xbc>)
 800058a:	f005 ff0f 	bl	80063ac <osThreadNew>
 800058e:	4602      	mov	r2, r0
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <main+0xc0>)
 8000592:	601a      	str	r2, [r3, #0]

  /* creation of JOINT_RUN */
  JOINT_RUNHandle = osThreadNew(JOINT_RUN_QUEUE, NULL, &JOINT_RUN_attributes);
 8000594:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <main+0xc4>)
 8000596:	2100      	movs	r1, #0
 8000598:	4810      	ldr	r0, [pc, #64]	; (80005dc <main+0xc8>)
 800059a:	f005 ff07 	bl	80063ac <osThreadNew>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <main+0xcc>)
 80005a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f005 fecc 	bl	8006340 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005a8:	e7fe      	b.n	80005a8 <main+0x94>
 80005aa:	bf00      	nop
 80005ac:	08009468 	.word	0x08009468
 80005b0:	20005120 	.word	0x20005120
 80005b4:	080093d8 	.word	0x080093d8
 80005b8:	08001f75 	.word	0x08001f75
 80005bc:	20004ffc 	.word	0x20004ffc
 80005c0:	080093fc 	.word	0x080093fc
 80005c4:	08002049 	.word	0x08002049
 80005c8:	200051a4 	.word	0x200051a4
 80005cc:	08009420 	.word	0x08009420
 80005d0:	08002059 	.word	0x08002059
 80005d4:	200050dc 	.word	0x200050dc
 80005d8:	08009444 	.word	0x08009444
 80005dc:	08002069 	.word	0x08002069
 80005e0:	200050d8 	.word	0x200050d8

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 fccd 	bl	8008f92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000658:	23a8      	movs	r3, #168	; 0xa8
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f003 f879 	bl	8003760 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000674:	f001 fd28 	bl	80020c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2105      	movs	r1, #5
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fad2 	bl	8003c40 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a2:	f001 fd11 	bl	80020c8 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI2_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_SPI2_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI2_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI2_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SPI2_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI2_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI2_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI2_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI2_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SPI2_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI2_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SPI2_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI2_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SPI2_Init+0x64>)
 800070a:	f003 fc97 	bl	800403c <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000714:	f001 fcd8 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20005000 	.word	0x20005000
 8000720:	40003800 	.word	0x40003800

08000724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	; 0x58
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f008 fc18 	bl	8008f92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000762:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000764:	4a3f      	ldr	r2, [pc, #252]	; (8000864 <MX_TIM1_Init+0x140>)
 8000766:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000768:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <MX_TIM1_Init+0x13c>)
 800076a:	2253      	movs	r2, #83	; 0x53
 800076c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b3c      	ldr	r3, [pc, #240]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000;
 8000774:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000776:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800077a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b38      	ldr	r3, [pc, #224]	; (8000860 <MX_TIM1_Init+0x13c>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <MX_TIM1_Init+0x13c>)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078e:	4834      	ldr	r0, [pc, #208]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000790:	f003 fcb8 	bl	8004104 <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800079a:	f001 fc95 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007a8:	4619      	mov	r1, r3
 80007aa:	482d      	ldr	r0, [pc, #180]	; (8000860 <MX_TIM1_Init+0x13c>)
 80007ac:	f004 f81a 	bl	80047e4 <HAL_TIM_ConfigClockSource>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007b6:	f001 fc87 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ba:	4829      	ldr	r0, [pc, #164]	; (8000860 <MX_TIM1_Init+0x13c>)
 80007bc:	f003 fcf1 	bl	80041a2 <HAL_TIM_PWM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007c6:	f001 fc7f 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d6:	4619      	mov	r1, r3
 80007d8:	4821      	ldr	r0, [pc, #132]	; (8000860 <MX_TIM1_Init+0x13c>)
 80007da:	f004 fc5f 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007e4:	f001 fc70 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	2360      	movs	r3, #96	; 0x60
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500;
 80007ec:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000810:	f003 ff22 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800081a:	f001 fc55 	bl	80020c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4619      	mov	r1, r3
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000842:	f004 fca7 	bl	8005194 <HAL_TIMEx_ConfigBreakDeadTime>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800084c:	f001 fc3c 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000852:	f001 fddf 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8000856:	bf00      	nop
 8000858:	3758      	adds	r7, #88	; 0x58
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20005124 	.word	0x20005124
 8000864:	40010000 	.word	0x40010000

08000868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08e      	sub	sp, #56	; 0x38
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_TIM2_Init+0xe8>)
 800089a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008a2:	2253      	movs	r2, #83	; 0x53
 80008a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c0:	4823      	ldr	r0, [pc, #140]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008c2:	f003 fc1f 	bl	8004104 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008cc:	f001 fbfc 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008da:	4619      	mov	r1, r3
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008de:	f003 ff81 	bl	80047e4 <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008e8:	f001 fbee 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <MX_TIM2_Init+0xe8>)
 80008ee:	f003 fc58 	bl	80041a2 <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008f8:	f001 fbe6 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4619      	mov	r1, r3
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_TIM2_Init+0xe8>)
 800090c:	f004 fbc6 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000916:	f001 fbd7 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091a:	2360      	movs	r3, #96	; 0x60
 800091c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800091e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000922:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	4619      	mov	r1, r3
 8000932:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM2_Init+0xe8>)
 8000934:	f003 fe90 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800093e:	f001 fbc3 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM2_Init+0xe8>)
 8000944:	f001 fd66 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8000948:	bf00      	nop
 800094a:	3738      	adds	r7, #56	; 0x38
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200051e8 	.word	0x200051e8

08000954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000984:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <MX_TIM3_Init+0xe8>)
 8000986:	4a2e      	ldr	r2, [pc, #184]	; (8000a40 <MX_TIM3_Init+0xec>)
 8000988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_TIM3_Init+0xe8>)
 800098c:	2253      	movs	r2, #83	; 0x53
 800098e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <MX_TIM3_Init+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_TIM3_Init+0xe8>)
 8000998:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800099c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <MX_TIM3_Init+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_TIM3_Init+0xe8>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009aa:	4824      	ldr	r0, [pc, #144]	; (8000a3c <MX_TIM3_Init+0xe8>)
 80009ac:	f003 fbaa 	bl	8004104 <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009b6:	f001 fb87 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c4:	4619      	mov	r1, r3
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <MX_TIM3_Init+0xe8>)
 80009c8:	f003 ff0c 	bl	80047e4 <HAL_TIM_ConfigClockSource>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009d2:	f001 fb79 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009d6:	4819      	ldr	r0, [pc, #100]	; (8000a3c <MX_TIM3_Init+0xe8>)
 80009d8:	f003 fbe3 	bl	80041a2 <HAL_TIM_PWM_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009e2:	f001 fb71 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	4619      	mov	r1, r3
 80009f4:	4811      	ldr	r0, [pc, #68]	; (8000a3c <MX_TIM3_Init+0xe8>)
 80009f6:	f004 fb51 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a00:	f001 fb62 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a04:	2360      	movs	r3, #96	; 0x60
 8000a06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <MX_TIM3_Init+0xe8>)
 8000a1e:	f003 fe1b 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a28:	f001 fb4e 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_TIM3_Init+0xe8>)
 8000a2e:	f001 fcf1 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	; 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200050e0 	.word	0x200050e0
 8000a40:	40000400 	.word	0x40000400

08000a44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a76:	4a2e      	ldr	r2, [pc, #184]	; (8000b30 <MX_TIM4_Init+0xec>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a7c:	2253      	movs	r2, #83	; 0x53
 8000a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a9c:	f003 fb32 	bl	8004104 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000aa6:	f001 fb0f 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481d      	ldr	r0, [pc, #116]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000ab8:	f003 fe94 	bl	80047e4 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ac2:	f001 fb01 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ac6:	4819      	ldr	r0, [pc, #100]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000ac8:	f003 fb6b 	bl	80041a2 <HAL_TIM_PWM_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ad2:	f001 faf9 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000ae6:	f004 fad9 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000af0:	f001 faea 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af4:	2360      	movs	r3, #96	; 0x60
 8000af6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000b0e:	f003 fda3 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b18:	f001 fad6 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000b1e:	f001 fc79 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8000b22:	bf00      	nop
 8000b24:	3738      	adds	r7, #56	; 0x38
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20005098 	.word	0x20005098
 8000b30:	40000800 	.word	0x40000800

08000b34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b096      	sub	sp, #88	; 0x58
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2220      	movs	r2, #32
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f008 fa10 	bl	8008f92 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b72:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000b74:	4a3f      	ldr	r2, [pc, #252]	; (8000c74 <MX_TIM8_Init+0x140>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84-1;
 8000b78:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000b7a:	2253      	movs	r2, #83	; 0x53
 8000b7c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 8000b84:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000b86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b8a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b92:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b98:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b9e:	4834      	ldr	r0, [pc, #208]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000ba0:	f003 fab0 	bl	8004104 <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000baa:	f001 fa8d 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bb8:	4619      	mov	r1, r3
 8000bba:	482d      	ldr	r0, [pc, #180]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000bbc:	f003 fe12 	bl	80047e4 <HAL_TIM_ConfigClockSource>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000bc6:	f001 fa7f 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000bca:	4829      	ldr	r0, [pc, #164]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000bcc:	f003 fae9 	bl	80041a2 <HAL_TIM_PWM_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000bd6:	f001 fa77 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000be2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be6:	4619      	mov	r1, r3
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000bea:	f004 fa57 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000bf4:	f001 fa68 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf8:	2360      	movs	r3, #96	; 0x60
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4814      	ldr	r0, [pc, #80]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000c20:	f003 fd1a 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000c2a:	f001 fa4d 	bl	80020c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000c52:	f004 fa9f 	bl	8005194 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000c5c:	f001 fa34 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM8_Init+0x13c>)
 8000c62:	f001 fbd7 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8000c66:	bf00      	nop
 8000c68:	3758      	adds	r7, #88	; 0x58
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20005058 	.word	0x20005058
 8000c74:	40010400 	.word	0x40010400

08000c78 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
 8000c9a:	615a      	str	r2, [r3, #20]
 8000c9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000ca0:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <MX_TIM9_Init+0xc4>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000ca6:	2253      	movs	r2, #83	; 0x53
 8000ca8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000;
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000cb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000cb6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000cc4:	481c      	ldr	r0, [pc, #112]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000cc6:	f003 fa1d 	bl	8004104 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f001 f9fa 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4815      	ldr	r0, [pc, #84]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000ce2:	f003 fd7f 	bl	80047e4 <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000cec:	f001 f9ec 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000cf2:	f003 fa56 	bl	80041a2 <HAL_TIM_PWM_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000cfc:	f001 f9e4 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000d1a:	f003 fc9d 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8000d24:	f001 f9d0 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <MX_TIM9_Init+0xc0>)
 8000d2a:	f001 fb73 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8000d2e:	bf00      	nop
 8000d30:	3730      	adds	r7, #48	; 0x30
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20005164 	.word	0x20005164
 8000d3c:	40014000 	.word	0x40014000

08000d40 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000d68:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <MX_TIM12_Init+0xc4>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000d6e:	2253      	movs	r2, #83	; 0x53
 8000d70:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000d7a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d7e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000d8c:	481c      	ldr	r0, [pc, #112]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000d8e:	f003 f9b9 	bl	8004104 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f001 f996 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4619      	mov	r1, r3
 8000da8:	4815      	ldr	r0, [pc, #84]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000daa:	f003 fd1b 	bl	80047e4 <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000db4:	f001 f988 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000dba:	f003 f9f2 	bl	80041a2 <HAL_TIM_PWM_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000dc4:	f001 f980 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc8:	2360      	movs	r3, #96	; 0x60
 8000dca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000de2:	f003 fc39 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8000dec:	f001 f96c 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <MX_TIM12_Init+0xc0>)
 8000df2:	f001 fb0f 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8000df6:	bf00      	nop
 8000df8:	3730      	adds	r7, #48	; 0x30
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20005228 	.word	0x20005228
 8000e04:	40001800 	.word	0x40001800

08000e08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <MX_UART4_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_UART4_Init+0x4c>)
 8000e40:	f004 fa33 	bl	80052aa <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000e4a:	f001 f93d 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200051a8 	.word	0x200051a8
 8000e58:	40004c00 	.word	0x40004c00

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2105      	movs	r1, #5
 8000e82:	200d      	movs	r0, #13
 8000e84:	f001 fee6 	bl	8002c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e88:	200d      	movs	r0, #13
 8000e8a:	f001 feff 	bl	8002c8c <HAL_NVIC_EnableIRQ>

}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	; (800102c <MX_GPIO_Init+0x190>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a5c      	ldr	r2, [pc, #368]	; (800102c <MX_GPIO_Init+0x190>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b5a      	ldr	r3, [pc, #360]	; (800102c <MX_GPIO_Init+0x190>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	4b56      	ldr	r3, [pc, #344]	; (800102c <MX_GPIO_Init+0x190>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a55      	ldr	r2, [pc, #340]	; (800102c <MX_GPIO_Init+0x190>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b53      	ldr	r3, [pc, #332]	; (800102c <MX_GPIO_Init+0x190>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b4f      	ldr	r3, [pc, #316]	; (800102c <MX_GPIO_Init+0x190>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a4e      	ldr	r2, [pc, #312]	; (800102c <MX_GPIO_Init+0x190>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b4c      	ldr	r3, [pc, #304]	; (800102c <MX_GPIO_Init+0x190>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b48      	ldr	r3, [pc, #288]	; (800102c <MX_GPIO_Init+0x190>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a47      	ldr	r2, [pc, #284]	; (800102c <MX_GPIO_Init+0x190>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b45      	ldr	r3, [pc, #276]	; (800102c <MX_GPIO_Init+0x190>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b41      	ldr	r3, [pc, #260]	; (800102c <MX_GPIO_Init+0x190>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a40      	ldr	r2, [pc, #256]	; (800102c <MX_GPIO_Init+0x190>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b3e      	ldr	r3, [pc, #248]	; (800102c <MX_GPIO_Init+0x190>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b3a      	ldr	r3, [pc, #232]	; (800102c <MX_GPIO_Init+0x190>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a39      	ldr	r2, [pc, #228]	; (800102c <MX_GPIO_Init+0x190>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b37      	ldr	r3, [pc, #220]	; (800102c <MX_GPIO_Init+0x190>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, JOINT6_DIR_Pin|JOINT1_DIR_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000f60:	4833      	ldr	r0, [pc, #204]	; (8001030 <MX_GPIO_Init+0x194>)
 8000f62:	f002 fbe3 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|JOINT2_DIR_Pin|JOINT3_DIR_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2194      	movs	r1, #148	; 0x94
 8000f6a:	4832      	ldr	r0, [pc, #200]	; (8001034 <MX_GPIO_Init+0x198>)
 8000f6c:	f002 fbde 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOINT7_DIR_GPIO_Port, JOINT7_DIR_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f76:	4830      	ldr	r0, [pc, #192]	; (8001038 <MX_GPIO_Init+0x19c>)
 8000f78:	f002 fbd8 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, JOINT4_DIR_Pin|LED3_Pin|LED2_Pin|LED1_Pin
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f64e 0120 	movw	r1, #59424	; 0xe820
 8000f82:	482e      	ldr	r0, [pc, #184]	; (800103c <MX_GPIO_Init+0x1a0>)
 8000f84:	f002 fbd2 	bl	800372c <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOINT5_DIR_GPIO_Port, JOINT5_DIR_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f8e:	f002 fbcd 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOINT6_DIR_Pin JOINT1_DIR_Pin */
  GPIO_InitStruct.Pin = JOINT6_DIR_Pin|JOINT1_DIR_Pin;
 8000f92:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4821      	ldr	r0, [pc, #132]	; (8001030 <MX_GPIO_Init+0x194>)
 8000fac:	f002 fa0c 	bl	80033c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin JOINT2_DIR_Pin JOINT3_DIR_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|JOINT2_DIR_Pin|JOINT3_DIR_Pin;
 8000fb0:	2394      	movs	r3, #148	; 0x94
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481b      	ldr	r0, [pc, #108]	; (8001034 <MX_GPIO_Init+0x198>)
 8000fc8:	f002 f9fe 	bl	80033c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOINT7_DIR_Pin */
  GPIO_InitStruct.Pin = JOINT7_DIR_Pin;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(JOINT7_DIR_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4814      	ldr	r0, [pc, #80]	; (8001038 <MX_GPIO_Init+0x19c>)
 8000fe6:	f002 f9ef 	bl	80033c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOINT4_DIR_Pin LED3_Pin LED2_Pin LED1_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = JOINT4_DIR_Pin|LED3_Pin|LED2_Pin|LED1_Pin
 8000fea:	f64e 0320 	movw	r3, #59424	; 0xe820
 8000fee:	61fb      	str	r3, [r7, #28]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <MX_GPIO_Init+0x1a0>)
 8001004:	f002 f9e0 	bl	80033c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOINT5_DIR_Pin */
  GPIO_InitStruct.Pin = JOINT5_DIR_Pin;
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(JOINT5_DIR_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4808      	ldr	r0, [pc, #32]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8001020:	f002 f9d2 	bl	80033c8 <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3730      	adds	r7, #48	; 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40021000 	.word	0x40021000
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40020800 	.word	0x40020800

08001044 <HAL_TIM_PWM_PulseFinishedCallback>:
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	//--------------------------------------------------------------------------------------------------------------------
	if (htim->Instance == TIM1) { // joint 1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a98      	ldr	r2, [pc, #608]	; (80012b4 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d150      	bne.n	80010f8 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		/************ LIMITATION COUNTERS JOINT 1 ***************/
		if (HAL_GPIO_ReadPin(GPIOE, JOINT1_DIR_Pin)) { // get direction, IF GPIO_PIN_SET
 8001056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105a:	4897      	ldr	r0, [pc, #604]	; (80012b8 <HAL_TIM_PWM_PulseFinishedCallback+0x274>)
 800105c:	f002 fb4e 	bl	80036fc <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
			JOINT1_STEPS_CURRENT++;
 8001066:	4b95      	ldr	r3, [pc, #596]	; (80012bc <HAL_TIM_PWM_PulseFinishedCallback+0x278>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a93      	ldr	r2, [pc, #588]	; (80012bc <HAL_TIM_PWM_PulseFinishedCallback+0x278>)
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e004      	b.n	800107c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
		} else {
			JOINT1_STEPS_CURRENT--;
 8001072:	4b92      	ldr	r3, [pc, #584]	; (80012bc <HAL_TIM_PWM_PulseFinishedCallback+0x278>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	4a90      	ldr	r2, [pc, #576]	; (80012bc <HAL_TIM_PWM_PulseFinishedCallback+0x278>)
 800107a:	6013      	str	r3, [r2, #0]
		}
		if ((JOINT1_STEPS_CURRENT > JOINT1_STEPS_MAX || JOINT1_STEPS_CURRENT < JOINT1_STEPS_MIN) && SET_HOME_MODE != 1) {
 800107c:	4b8f      	ldr	r3, [pc, #572]	; (80012bc <HAL_TIM_PWM_PulseFinishedCallback+0x278>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b8f      	ldr	r3, [pc, #572]	; (80012c0 <HAL_TIM_PWM_PulseFinishedCallback+0x27c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	dc05      	bgt.n	8001094 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
 8001088:	4b8c      	ldr	r3, [pc, #560]	; (80012bc <HAL_TIM_PWM_PulseFinishedCallback+0x278>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b8d      	ldr	r3, [pc, #564]	; (80012c4 <HAL_TIM_PWM_PulseFinishedCallback+0x280>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	da12      	bge.n	80010ba <HAL_TIM_PWM_PulseFinishedCallback+0x76>
 8001094:	4b8c      	ldr	r3, [pc, #560]	; (80012c8 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d00e      	beq.n	80010ba <HAL_TIM_PWM_PulseFinishedCallback+0x76>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800109c:	2100      	movs	r1, #0
 800109e:	488b      	ldr	r0, [pc, #556]	; (80012cc <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 80010a0:	f003 f938 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_1);
 80010a4:	2100      	movs	r1, #0
 80010a6:	4889      	ldr	r0, [pc, #548]	; (80012cc <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 80010a8:	f003 ff81 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOE, JOINT1_DIR_Pin, GPIO_PIN_RESET); // 1 : SET=CLOCKWISE, RESET=ANTI-CLOCKWISE
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b2:	4881      	ldr	r0, [pc, #516]	; (80012b8 <HAL_TIM_PWM_PulseFinishedCallback+0x274>)
 80010b4:	f002 fb3a 	bl	800372c <HAL_GPIO_WritePin>
			return;
 80010b8:	e1e9      	b.n	800148e <HAL_TIM_PWM_PulseFinishedCallback+0x44a>
		}
		/***********************************************/
		TIM1_COUNTER--;
 80010ba:	4b85      	ldr	r3, [pc, #532]	; (80012d0 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 80010bc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80010c0:	f111 33ff 	adds.w	r3, r1, #4294967295
 80010c4:	f142 34ff 	adc.w	r4, r2, #4294967295
 80010c8:	4a81      	ldr	r2, [pc, #516]	; (80012d0 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 80010ca:	e9c2 3400 	strd	r3, r4, [r2]
		if (TIM1_COUNTER <= 0) {
 80010ce:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 80010d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	f174 0300 	sbcs.w	r3, r4, #0
 80010da:	da0d      	bge.n	80010f8 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80010dc:	2100      	movs	r1, #0
 80010de:	487b      	ldr	r0, [pc, #492]	; (80012cc <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 80010e0:	f003 f918 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_1);
 80010e4:	2100      	movs	r1, #0
 80010e6:	4879      	ldr	r0, [pc, #484]	; (80012cc <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 80010e8:	f003 ff61 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOE, JOINT1_DIR_Pin, GPIO_PIN_RESET); // 1 : SET=CLOCKWISE, RESET=ANTI-CLOCKWISE
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f2:	4871      	ldr	r0, [pc, #452]	; (80012b8 <HAL_TIM_PWM_PulseFinishedCallback+0x274>)
 80010f4:	f002 fb1a 	bl	800372c <HAL_GPIO_WritePin>
		}
	}
	//--------------------------------------------------------------------------------------------------------------------
	if (htim->Instance == TIM2) { // joint 2
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001100:	d14d      	bne.n	800119e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
		/************ LIMITATION COUNTERS JOINT 2 ***************/
		if (HAL_GPIO_ReadPin(GPIOA, JOINT2_DIR_Pin)) { // get direction, IF GPIO_PIN_SET
 8001102:	2110      	movs	r1, #16
 8001104:	4873      	ldr	r0, [pc, #460]	; (80012d4 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 8001106:	f002 faf9 	bl	80036fc <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_TIM_PWM_PulseFinishedCallback+0xd8>
			JOINT2_STEPS_CURRENT++;
 8001110:	4b71      	ldr	r3, [pc, #452]	; (80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a70      	ldr	r2, [pc, #448]	; (80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e004      	b.n	8001126 <HAL_TIM_PWM_PulseFinishedCallback+0xe2>
		} else {
			JOINT2_STEPS_CURRENT--;
 800111c:	4b6e      	ldr	r3, [pc, #440]	; (80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3b01      	subs	r3, #1
 8001122:	4a6d      	ldr	r2, [pc, #436]	; (80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
 8001124:	6013      	str	r3, [r2, #0]
		}
		if ((JOINT2_STEPS_CURRENT > JOINT2_STEPS_MAX || JOINT2_STEPS_CURRENT < JOINT2_STEPS_MIN) && SET_HOME_MODE != 1) {
 8001126:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <HAL_TIM_PWM_PulseFinishedCallback+0x298>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d805      	bhi.n	800113e <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
 8001132:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <HAL_TIM_PWM_PulseFinishedCallback+0x29c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d211      	bcs.n	8001162 <HAL_TIM_PWM_PulseFinishedCallback+0x11e>
 800113e:	4b62      	ldr	r3, [pc, #392]	; (80012c8 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00d      	beq.n	8001162 <HAL_TIM_PWM_PulseFinishedCallback+0x11e>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001146:	2100      	movs	r1, #0
 8001148:	4866      	ldr	r0, [pc, #408]	; (80012e4 <HAL_TIM_PWM_PulseFinishedCallback+0x2a0>)
 800114a:	f003 f8e3 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim2, TIM_CHANNEL_1);
 800114e:	2100      	movs	r1, #0
 8001150:	4864      	ldr	r0, [pc, #400]	; (80012e4 <HAL_TIM_PWM_PulseFinishedCallback+0x2a0>)
 8001152:	f003 ff2c 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, JOINT2_DIR_Pin, GPIO_PIN_RESET); // 1 : SET=CLOCKWISE, RESET=ANTI-CLOCKWISE
 8001156:	2200      	movs	r2, #0
 8001158:	2110      	movs	r1, #16
 800115a:	485e      	ldr	r0, [pc, #376]	; (80012d4 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 800115c:	f002 fae6 	bl	800372c <HAL_GPIO_WritePin>
			return;
 8001160:	e195      	b.n	800148e <HAL_TIM_PWM_PulseFinishedCallback+0x44a>
		}
		/***********************************************/
		TIM2_COUNTER--;
 8001162:	4b61      	ldr	r3, [pc, #388]	; (80012e8 <HAL_TIM_PWM_PulseFinishedCallback+0x2a4>)
 8001164:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001168:	f111 33ff 	adds.w	r3, r1, #4294967295
 800116c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001170:	4a5d      	ldr	r2, [pc, #372]	; (80012e8 <HAL_TIM_PWM_PulseFinishedCallback+0x2a4>)
 8001172:	e9c2 3400 	strd	r3, r4, [r2]
		if (TIM2_COUNTER <= 0) {
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <HAL_TIM_PWM_PulseFinishedCallback+0x2a4>)
 8001178:	e9d3 3400 	ldrd	r3, r4, [r3]
 800117c:	2b01      	cmp	r3, #1
 800117e:	f174 0300 	sbcs.w	r3, r4, #0
 8001182:	da0c      	bge.n	800119e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4857      	ldr	r0, [pc, #348]	; (80012e4 <HAL_TIM_PWM_PulseFinishedCallback+0x2a0>)
 8001188:	f003 f8c4 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim2, TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	4855      	ldr	r0, [pc, #340]	; (80012e4 <HAL_TIM_PWM_PulseFinishedCallback+0x2a0>)
 8001190:	f003 ff0d 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, JOINT2_DIR_Pin, GPIO_PIN_RESET); // 2 : SET=IN, RESET=OUT
 8001194:	2200      	movs	r2, #0
 8001196:	2110      	movs	r1, #16
 8001198:	484e      	ldr	r0, [pc, #312]	; (80012d4 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 800119a:	f002 fac7 	bl	800372c <HAL_GPIO_WritePin>
		}
	}
	//--------------------------------------------------------------------------------------------------------------------
	if (htim->Instance == TIM3) { // joint 3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a52      	ldr	r2, [pc, #328]	; (80012ec <HAL_TIM_PWM_PulseFinishedCallback+0x2a8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d14d      	bne.n	8001244 <HAL_TIM_PWM_PulseFinishedCallback+0x200>
		/************ LIMITATION COUNTERS JOINT 3 ***************/
		if (HAL_GPIO_ReadPin(GPIOA, JOINT3_DIR_Pin)) { // get direction, IF GPIO_PIN_SET
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	484a      	ldr	r0, [pc, #296]	; (80012d4 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 80011ac:	f002 faa6 	bl	80036fc <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_TIM_PWM_PulseFinishedCallback+0x17e>
			JOINT3_STEPS_CURRENT--;
 80011b6:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <HAL_TIM_PWM_PulseFinishedCallback+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <HAL_TIM_PWM_PulseFinishedCallback+0x2ac>)
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e004      	b.n	80011cc <HAL_TIM_PWM_PulseFinishedCallback+0x188>
		} else {
			JOINT3_STEPS_CURRENT++;
 80011c2:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <HAL_TIM_PWM_PulseFinishedCallback+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <HAL_TIM_PWM_PulseFinishedCallback+0x2ac>)
 80011ca:	6013      	str	r3, [r2, #0]
		}
		if ((JOINT3_STEPS_CURRENT > JOINT3_STEPS_MAX || JOINT3_STEPS_CURRENT < JOINT3_STEPS_MIN) && SET_HOME_MODE != 1) {
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <HAL_TIM_PWM_PulseFinishedCallback+0x2ac>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <HAL_TIM_PWM_PulseFinishedCallback+0x2b0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d805      	bhi.n	80011e4 <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <HAL_TIM_PWM_PulseFinishedCallback+0x2ac>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_TIM_PWM_PulseFinishedCallback+0x2b4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d211      	bcs.n	8001208 <HAL_TIM_PWM_PulseFinishedCallback+0x1c4>
 80011e4:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d00d      	beq.n	8001208 <HAL_TIM_PWM_PulseFinishedCallback+0x1c4>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80011ec:	2100      	movs	r1, #0
 80011ee:	4843      	ldr	r0, [pc, #268]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 80011f0:	f003 f890 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4841      	ldr	r0, [pc, #260]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 80011f8:	f003 fed9 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, JOINT3_DIR_Pin, GPIO_PIN_RESET); // 3 : SET=IN, RESET=OUT
 80011fc:	2200      	movs	r2, #0
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	4834      	ldr	r0, [pc, #208]	; (80012d4 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 8001202:	f002 fa93 	bl	800372c <HAL_GPIO_WritePin>
			return;
 8001206:	e142      	b.n	800148e <HAL_TIM_PWM_PulseFinishedCallback+0x44a>
		}
		/***********************************************/
		TIM3_COUNTER--;
 8001208:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x2bc>)
 800120a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800120e:	f111 33ff 	adds.w	r3, r1, #4294967295
 8001212:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001216:	4a3a      	ldr	r2, [pc, #232]	; (8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x2bc>)
 8001218:	e9c2 3400 	strd	r3, r4, [r2]
		if (TIM3_COUNTER <= 0) {
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x2bc>)
 800121e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001222:	2b01      	cmp	r3, #1
 8001224:	f174 0300 	sbcs.w	r3, r4, #0
 8001228:	da0c      	bge.n	8001244 <HAL_TIM_PWM_PulseFinishedCallback+0x200>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 800122a:	2100      	movs	r1, #0
 800122c:	4833      	ldr	r0, [pc, #204]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 800122e:	f003 f871 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001232:	2100      	movs	r1, #0
 8001234:	4831      	ldr	r0, [pc, #196]	; (80012fc <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 8001236:	f003 feba 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, JOINT3_DIR_Pin, GPIO_PIN_RESET); // 3 :  SET=IN, RESET=OUT
 800123a:	2200      	movs	r2, #0
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	4825      	ldr	r0, [pc, #148]	; (80012d4 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 8001240:	f002 fa74 	bl	800372c <HAL_GPIO_WritePin>
		}
	}
	//--------------------------------------------------------------------------------------------------------------------
	if (htim->Instance == TIM4) { // joint 4
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <HAL_TIM_PWM_PulseFinishedCallback+0x2c0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	f040 8085 	bne.w	800135a <HAL_TIM_PWM_PulseFinishedCallback+0x316>
		/************ LIMITATION COUNTERS JOINT 4 ***************/
		if (HAL_GPIO_ReadPin(GPIOD, JOINT4_DIR_Pin)) { // get direction, IF GPIO_PIN_SET
 8001250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001254:	482c      	ldr	r0, [pc, #176]	; (8001308 <HAL_TIM_PWM_PulseFinishedCallback+0x2c4>)
 8001256:	f002 fa51 	bl	80036fc <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_TIM_PWM_PulseFinishedCallback+0x228>
			JOINT4_STEPS_CURRENT--;
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x2c8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3b01      	subs	r3, #1
 8001266:	4a29      	ldr	r2, [pc, #164]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x2c8>)
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e004      	b.n	8001276 <HAL_TIM_PWM_PulseFinishedCallback+0x232>
		} else {
			JOINT4_STEPS_CURRENT++;
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x2c8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a26      	ldr	r2, [pc, #152]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x2c8>)
 8001274:	6013      	str	r3, [r2, #0]
		}
		if ((JOINT4_STEPS_CURRENT > JOINT4_STEPS_MAX || JOINT4_STEPS_CURRENT < JOINT4_STEPS_MIN) && SET_HOME_MODE != 1) {
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x2c8>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_TIM_PWM_PulseFinishedCallback+0x2cc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	dc05      	bgt.n	800128e <HAL_TIM_PWM_PulseFinishedCallback+0x24a>
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_TIM_PWM_PulseFinishedCallback+0x2c8>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_TIM_PWM_PulseFinishedCallback+0x2d0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	da46      	bge.n	800131c <HAL_TIM_PWM_PulseFinishedCallback+0x2d8>
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d042      	beq.n	800131c <HAL_TIM_PWM_PulseFinishedCallback+0x2d8>
			HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_1);
 8001296:	2100      	movs	r1, #0
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <HAL_TIM_PWM_PulseFinishedCallback+0x2d4>)
 800129a:	f003 f83b 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim4, TIM_CHANNEL_1);
 800129e:	2100      	movs	r1, #0
 80012a0:	481d      	ldr	r0, [pc, #116]	; (8001318 <HAL_TIM_PWM_PulseFinishedCallback+0x2d4>)
 80012a2:	f003 fe84 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOD, JOINT4_DIR_Pin, GPIO_PIN_RESET); // 4 : SET=CLOCKWISE, RESET=ANTI-CLOCKWISE
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <HAL_TIM_PWM_PulseFinishedCallback+0x2c4>)
 80012ae:	f002 fa3d 	bl	800372c <HAL_GPIO_WritePin>
			return;
 80012b2:	e0ec      	b.n	800148e <HAL_TIM_PWM_PulseFinishedCallback+0x44a>
 80012b4:	40010000 	.word	0x40010000
 80012b8:	40021000 	.word	0x40021000
 80012bc:	20000260 	.word	0x20000260
 80012c0:	20000004 	.word	0x20000004
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000284 	.word	0x20000284
 80012cc:	20005124 	.word	0x20005124
 80012d0:	20000228 	.word	0x20000228
 80012d4:	40020000 	.word	0x40020000
 80012d8:	20000264 	.word	0x20000264
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000268 	.word	0x20000268
 80012e4:	200051e8 	.word	0x200051e8
 80012e8:	20000230 	.word	0x20000230
 80012ec:	40000400 	.word	0x40000400
 80012f0:	2000026c 	.word	0x2000026c
 80012f4:	2000000c 	.word	0x2000000c
 80012f8:	20000270 	.word	0x20000270
 80012fc:	200050e0 	.word	0x200050e0
 8001300:	20000238 	.word	0x20000238
 8001304:	40000800 	.word	0x40000800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	20000274 	.word	0x20000274
 8001310:	20000014 	.word	0x20000014
 8001314:	20000010 	.word	0x20000010
 8001318:	20005098 	.word	0x20005098
		}
		/***********************************************/
		TIM4_COUNTER--;
 800131c:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_TIM_PWM_PulseFinishedCallback+0x450>)
 800131e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001322:	f111 33ff 	adds.w	r3, r1, #4294967295
 8001326:	f142 34ff 	adc.w	r4, r2, #4294967295
 800132a:	4a5a      	ldr	r2, [pc, #360]	; (8001494 <HAL_TIM_PWM_PulseFinishedCallback+0x450>)
 800132c:	e9c2 3400 	strd	r3, r4, [r2]
		if (TIM4_COUNTER <= 0) {
 8001330:	4b58      	ldr	r3, [pc, #352]	; (8001494 <HAL_TIM_PWM_PulseFinishedCallback+0x450>)
 8001332:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001336:	2b01      	cmp	r3, #1
 8001338:	f174 0300 	sbcs.w	r3, r4, #0
 800133c:	da0d      	bge.n	800135a <HAL_TIM_PWM_PulseFinishedCallback+0x316>
			HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_1);
 800133e:	2100      	movs	r1, #0
 8001340:	4855      	ldr	r0, [pc, #340]	; (8001498 <HAL_TIM_PWM_PulseFinishedCallback+0x454>)
 8001342:	f002 ffe7 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim4, TIM_CHANNEL_1);
 8001346:	2100      	movs	r1, #0
 8001348:	4853      	ldr	r0, [pc, #332]	; (8001498 <HAL_TIM_PWM_PulseFinishedCallback+0x454>)
 800134a:	f003 fe30 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOD, JOINT4_DIR_Pin, GPIO_PIN_RESET); // 4 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001354:	4851      	ldr	r0, [pc, #324]	; (800149c <HAL_TIM_PWM_PulseFinishedCallback+0x458>)
 8001356:	f002 f9e9 	bl	800372c <HAL_GPIO_WritePin>
		}
	}
	//--------------------------------------------------------------------------------------------------------------------
	if (htim->Instance == TIM8) { // joint 5
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_TIM_PWM_PulseFinishedCallback+0x45c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d14d      	bne.n	8001400 <HAL_TIM_PWM_PulseFinishedCallback+0x3bc>
		/************ LIMITATION COUNTERS JOINT 5 ***************/
		if (HAL_GPIO_ReadPin(GPIOC, JOINT5_DIR_Pin)) { // get direction, IF GPIO_PIN_SET
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	484f      	ldr	r0, [pc, #316]	; (80014a4 <HAL_TIM_PWM_PulseFinishedCallback+0x460>)
 8001368:	f002 f9c8 	bl	80036fc <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_TIM_PWM_PulseFinishedCallback+0x33a>
			JOINT5_STEPS_CURRENT--;
 8001372:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <HAL_TIM_PWM_PulseFinishedCallback+0x464>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3b01      	subs	r3, #1
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <HAL_TIM_PWM_PulseFinishedCallback+0x464>)
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	e004      	b.n	8001388 <HAL_TIM_PWM_PulseFinishedCallback+0x344>
		} else {
			JOINT5_STEPS_CURRENT++;
 800137e:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <HAL_TIM_PWM_PulseFinishedCallback+0x464>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <HAL_TIM_PWM_PulseFinishedCallback+0x464>)
 8001386:	6013      	str	r3, [r2, #0]
		}
		if ((JOINT5_STEPS_CURRENT > JOINT5_STEPS_MAX || JOINT5_STEPS_CURRENT < JOINT5_STEPS_MIN) && SET_HOME_MODE != 1) {
 8001388:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_TIM_PWM_PulseFinishedCallback+0x464>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <HAL_TIM_PWM_PulseFinishedCallback+0x468>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	dc05      	bgt.n	80013a0 <HAL_TIM_PWM_PulseFinishedCallback+0x35c>
 8001394:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <HAL_TIM_PWM_PulseFinishedCallback+0x464>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <HAL_TIM_PWM_PulseFinishedCallback+0x46c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	da11      	bge.n	80013c4 <HAL_TIM_PWM_PulseFinishedCallback+0x380>
 80013a0:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_TIM_PWM_PulseFinishedCallback+0x470>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d00d      	beq.n	80013c4 <HAL_TIM_PWM_PulseFinishedCallback+0x380>
			HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80013a8:	2100      	movs	r1, #0
 80013aa:	4843      	ldr	r0, [pc, #268]	; (80014b8 <HAL_TIM_PWM_PulseFinishedCallback+0x474>)
 80013ac:	f002 ffb2 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_1);
 80013b0:	2100      	movs	r1, #0
 80013b2:	4841      	ldr	r0, [pc, #260]	; (80014b8 <HAL_TIM_PWM_PulseFinishedCallback+0x474>)
 80013b4:	f003 fdfb 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOC, JOINT5_DIR_Pin, GPIO_PIN_RESET); // 5 : SET=CLOCKWISE, RESET=ANTI-CLOCKWISE
 80013b8:	2200      	movs	r2, #0
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	4839      	ldr	r0, [pc, #228]	; (80014a4 <HAL_TIM_PWM_PulseFinishedCallback+0x460>)
 80013be:	f002 f9b5 	bl	800372c <HAL_GPIO_WritePin>
			return;
 80013c2:	e064      	b.n	800148e <HAL_TIM_PWM_PulseFinishedCallback+0x44a>
		}
		/***********************************************/
		TIM5_COUNTER--;
 80013c4:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HAL_TIM_PWM_PulseFinishedCallback+0x478>)
 80013c6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80013ca:	f111 33ff 	adds.w	r3, r1, #4294967295
 80013ce:	f142 34ff 	adc.w	r4, r2, #4294967295
 80013d2:	4a3a      	ldr	r2, [pc, #232]	; (80014bc <HAL_TIM_PWM_PulseFinishedCallback+0x478>)
 80013d4:	e9c2 3400 	strd	r3, r4, [r2]
		if (TIM5_COUNTER <= 0) {
 80013d8:	4b38      	ldr	r3, [pc, #224]	; (80014bc <HAL_TIM_PWM_PulseFinishedCallback+0x478>)
 80013da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	f174 0300 	sbcs.w	r3, r4, #0
 80013e4:	da0c      	bge.n	8001400 <HAL_TIM_PWM_PulseFinishedCallback+0x3bc>
			//HAL_GPIO_TogglePin(GPIOD, LED2_Pin);
			HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80013e6:	2100      	movs	r1, #0
 80013e8:	4833      	ldr	r0, [pc, #204]	; (80014b8 <HAL_TIM_PWM_PulseFinishedCallback+0x474>)
 80013ea:	f002 ff93 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_1);
 80013ee:	2100      	movs	r1, #0
 80013f0:	4831      	ldr	r0, [pc, #196]	; (80014b8 <HAL_TIM_PWM_PulseFinishedCallback+0x474>)
 80013f2:	f003 fddc 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOC, JOINT5_DIR_Pin, GPIO_PIN_RESET); // 5 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 80013f6:	2200      	movs	r2, #0
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	482a      	ldr	r0, [pc, #168]	; (80014a4 <HAL_TIM_PWM_PulseFinishedCallback+0x460>)
 80013fc:	f002 f996 	bl	800372c <HAL_GPIO_WritePin>
		}
	}
	//--------------------------------------------------------------------------------------------------------------------
	if (htim->Instance == TIM9) { // joint 6
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2e      	ldr	r2, [pc, #184]	; (80014c0 <HAL_TIM_PWM_PulseFinishedCallback+0x47c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d11d      	bne.n	8001446 <HAL_TIM_PWM_PulseFinishedCallback+0x402>
		TIM6_COUNTER--;
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_TIM_PWM_PulseFinishedCallback+0x480>)
 800140c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001410:	f111 33ff 	adds.w	r3, r1, #4294967295
 8001414:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001418:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <HAL_TIM_PWM_PulseFinishedCallback+0x480>)
 800141a:	e9c2 3400 	strd	r3, r4, [r2]
		if (TIM6_COUNTER <= 0) {
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_TIM_PWM_PulseFinishedCallback+0x480>)
 8001420:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001424:	2b01      	cmp	r3, #1
 8001426:	f174 0300 	sbcs.w	r3, r4, #0
 800142a:	da0c      	bge.n	8001446 <HAL_TIM_PWM_PulseFinishedCallback+0x402>
			//HAL_GPIO_TogglePin(GPIOD, LED2_Pin);
			HAL_TIM_PWM_Stop_IT(&htim9, TIM_CHANNEL_1);
 800142c:	2100      	movs	r1, #0
 800142e:	4826      	ldr	r0, [pc, #152]	; (80014c8 <HAL_TIM_PWM_PulseFinishedCallback+0x484>)
 8001430:	f002 ff70 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim9, TIM_CHANNEL_1);
 8001434:	2100      	movs	r1, #0
 8001436:	4824      	ldr	r0, [pc, #144]	; (80014c8 <HAL_TIM_PWM_PulseFinishedCallback+0x484>)
 8001438:	f003 fdb9 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOE, JOINT6_DIR_Pin, GPIO_PIN_RESET); // 6 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 800143c:	2200      	movs	r2, #0
 800143e:	2110      	movs	r1, #16
 8001440:	4822      	ldr	r0, [pc, #136]	; (80014cc <HAL_TIM_PWM_PulseFinishedCallback+0x488>)
 8001442:	f002 f973 	bl	800372c <HAL_GPIO_WritePin>
		}
	}
	//--------------------------------------------------------------------------------------------------------------------
	if (htim->Instance == TIM12) { // joint 7
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <HAL_TIM_PWM_PulseFinishedCallback+0x48c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d11e      	bne.n	800148e <HAL_TIM_PWM_PulseFinishedCallback+0x44a>
		TIM7_COUNTER--;
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_TIM_PWM_PulseFinishedCallback+0x490>)
 8001452:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001456:	f111 33ff 	adds.w	r3, r1, #4294967295
 800145a:	f142 34ff 	adc.w	r4, r2, #4294967295
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_TIM_PWM_PulseFinishedCallback+0x490>)
 8001460:	e9c2 3400 	strd	r3, r4, [r2]
		if (TIM7_COUNTER <= 0) {
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_TIM_PWM_PulseFinishedCallback+0x490>)
 8001466:	e9d3 3400 	ldrd	r3, r4, [r3]
 800146a:	2b01      	cmp	r3, #1
 800146c:	f174 0300 	sbcs.w	r3, r4, #0
 8001470:	da0d      	bge.n	800148e <HAL_TIM_PWM_PulseFinishedCallback+0x44a>
			//HAL_GPIO_TogglePin(GPIOD, LED2_Pin);
			HAL_TIM_PWM_Stop_IT(&htim12, TIM_CHANNEL_1);
 8001472:	2100      	movs	r1, #0
 8001474:	4818      	ldr	r0, [pc, #96]	; (80014d8 <HAL_TIM_PWM_PulseFinishedCallback+0x494>)
 8001476:	f002 ff4d 	bl	8004314 <HAL_TIM_PWM_Stop_IT>
			HAL_TIMEx_PWMN_Stop_IT(&htim12, TIM_CHANNEL_1);
 800147a:	2100      	movs	r1, #0
 800147c:	4816      	ldr	r0, [pc, #88]	; (80014d8 <HAL_TIM_PWM_PulseFinishedCallback+0x494>)
 800147e:	f003 fd96 	bl	8004fae <HAL_TIMEx_PWMN_Stop_IT>
			HAL_GPIO_WritePin(GPIOB, JOINT7_DIR_Pin, GPIO_PIN_RESET); // 7 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <HAL_TIM_PWM_PulseFinishedCallback+0x498>)
 800148a:	f002 f94f 	bl	800372c <HAL_GPIO_WritePin>
		}
	}
}
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	20000240 	.word	0x20000240
 8001498:	20005098 	.word	0x20005098
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40010400 	.word	0x40010400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	20000278 	.word	0x20000278
 80014ac:	2000001c 	.word	0x2000001c
 80014b0:	20000018 	.word	0x20000018
 80014b4:	20000284 	.word	0x20000284
 80014b8:	20005058 	.word	0x20005058
 80014bc:	20000248 	.word	0x20000248
 80014c0:	40014000 	.word	0x40014000
 80014c4:	20000250 	.word	0x20000250
 80014c8:	20005164 	.word	0x20005164
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40001800 	.word	0x40001800
 80014d4:	20000258 	.word	0x20000258
 80014d8:	20005228 	.word	0x20005228
 80014dc:	40020400 	.word	0x40020400

080014e0 <uartSend>:
		tmp[i] = (char) _msg[i];
	}
	return tmp;
}

void uartSend(UART_HandleTypeDef *huart, char _out[]) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*) _out, strlen(_out), 1000);
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f7fe fe7a 	bl	80001e4 <strlen>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f003 ff22 	bl	8005344 <HAL_UART_Transmit>
	//HAL_UART_Receive_DMA(&huart, UART4_rxBuffer, 1024);
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <moveJoint>:

// move JOINT
void moveJoint(uint8_t jointNumber, uint32_t steps, uint8_t dir) {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	71bb      	strb	r3, [r7, #6]
	switch (jointNumber) {
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	3b01      	subs	r3, #1
 800151c:	2b06      	cmp	r3, #6
 800151e:	f200 80ae 	bhi.w	800167e <moveJoint+0x176>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <moveJoint+0x20>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	08001545 	.word	0x08001545
 800152c:	08001573 	.word	0x08001573
 8001530:	0800159f 	.word	0x0800159f
 8001534:	080015cb 	.word	0x080015cb
 8001538:	080015f9 	.word	0x080015f9
 800153c:	08001625 	.word	0x08001625
 8001540:	08001651 	.word	0x08001651
	case 1:
		TIM1_COUNTER = steps;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f04f 0400 	mov.w	r4, #0
 800154a:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <moveJoint+0x180>)
 800154c:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOE, JOINT1_DIR_Pin, dir == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // 1 : SET=CLOCKWISE, RESET=ANTI-CLOCKWISE
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	2b01      	cmp	r3, #1
 8001554:	bf0c      	ite	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	2300      	movne	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001562:	484a      	ldr	r0, [pc, #296]	; (800168c <moveJoint+0x184>)
 8001564:	f002 f8e2 	bl	800372c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1); // 1
 8001568:	2100      	movs	r1, #0
 800156a:	4849      	ldr	r0, [pc, #292]	; (8001690 <moveJoint+0x188>)
 800156c:	f002 fe4e 	bl	800420c <HAL_TIM_PWM_Start_IT>
		break;
 8001570:	e086      	b.n	8001680 <moveJoint+0x178>
	case 2:
		TIM2_COUNTER = steps;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f04f 0400 	mov.w	r4, #0
 8001578:	4a46      	ldr	r2, [pc, #280]	; (8001694 <moveJoint+0x18c>)
 800157a:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, JOINT2_DIR_Pin, dir == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // 2 : SET=IN, RESET=OUT
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	2b01      	cmp	r3, #1
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	2110      	movs	r1, #16
 800158e:	4842      	ldr	r0, [pc, #264]	; (8001698 <moveJoint+0x190>)
 8001590:	f002 f8cc 	bl	800372c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1); // 2
 8001594:	2100      	movs	r1, #0
 8001596:	4841      	ldr	r0, [pc, #260]	; (800169c <moveJoint+0x194>)
 8001598:	f002 fe38 	bl	800420c <HAL_TIM_PWM_Start_IT>
		break;
 800159c:	e070      	b.n	8001680 <moveJoint+0x178>
	case 3:
		TIM3_COUNTER = steps;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	f04f 0400 	mov.w	r4, #0
 80015a4:	4a3e      	ldr	r2, [pc, #248]	; (80016a0 <moveJoint+0x198>)
 80015a6:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, JOINT3_DIR_Pin, dir == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // 3 :  SET=IN, RESET=OUT
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	4837      	ldr	r0, [pc, #220]	; (8001698 <moveJoint+0x190>)
 80015bc:	f002 f8b6 	bl	800372c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); // 3
 80015c0:	2100      	movs	r1, #0
 80015c2:	4838      	ldr	r0, [pc, #224]	; (80016a4 <moveJoint+0x19c>)
 80015c4:	f002 fe22 	bl	800420c <HAL_TIM_PWM_Start_IT>
		break;
 80015c8:	e05a      	b.n	8001680 <moveJoint+0x178>
	case 4:
		TIM4_COUNTER = steps;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f04f 0400 	mov.w	r4, #0
 80015d0:	4a35      	ldr	r2, [pc, #212]	; (80016a8 <moveJoint+0x1a0>)
 80015d2:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOD, JOINT4_DIR_Pin, dir == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // 4 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e8:	4830      	ldr	r0, [pc, #192]	; (80016ac <moveJoint+0x1a4>)
 80015ea:	f002 f89f 	bl	800372c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // 4
 80015ee:	2100      	movs	r1, #0
 80015f0:	482f      	ldr	r0, [pc, #188]	; (80016b0 <moveJoint+0x1a8>)
 80015f2:	f002 fe0b 	bl	800420c <HAL_TIM_PWM_Start_IT>
		break;
 80015f6:	e043      	b.n	8001680 <moveJoint+0x178>
	case 5:
		TIM5_COUNTER = steps;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f04f 0400 	mov.w	r4, #0
 80015fe:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <moveJoint+0x1ac>)
 8001600:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOC, JOINT5_DIR_Pin, dir == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // 5 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	2b01      	cmp	r3, #1
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	4828      	ldr	r0, [pc, #160]	; (80016b8 <moveJoint+0x1b0>)
 8001616:	f002 f889 	bl	800372c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1); // 5
 800161a:	2100      	movs	r1, #0
 800161c:	4827      	ldr	r0, [pc, #156]	; (80016bc <moveJoint+0x1b4>)
 800161e:	f002 fdf5 	bl	800420c <HAL_TIM_PWM_Start_IT>
		break;
 8001622:	e02d      	b.n	8001680 <moveJoint+0x178>
	case 6:
		TIM6_COUNTER = steps;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f04f 0400 	mov.w	r4, #0
 800162a:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <moveJoint+0x1b8>)
 800162c:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOE, JOINT6_DIR_Pin, dir == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // 6 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	2b01      	cmp	r3, #1
 8001634:	bf0c      	ite	eq
 8001636:	2301      	moveq	r3, #1
 8001638:	2300      	movne	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	2110      	movs	r1, #16
 8001640:	4812      	ldr	r0, [pc, #72]	; (800168c <moveJoint+0x184>)
 8001642:	f002 f873 	bl	800372c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1); // 6
 8001646:	2100      	movs	r1, #0
 8001648:	481e      	ldr	r0, [pc, #120]	; (80016c4 <moveJoint+0x1bc>)
 800164a:	f002 fddf 	bl	800420c <HAL_TIM_PWM_Start_IT>
		break;
 800164e:	e017      	b.n	8001680 <moveJoint+0x178>
	case 7:
		TIM7_COUNTER = steps;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f04f 0400 	mov.w	r4, #0
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <moveJoint+0x1c0>)
 8001658:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOB, JOINT7_DIR_Pin, dir == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // 7 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b01      	cmp	r3, #1
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166e:	4817      	ldr	r0, [pc, #92]	; (80016cc <moveJoint+0x1c4>)
 8001670:	f002 f85c 	bl	800372c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1); // 7
 8001674:	2100      	movs	r1, #0
 8001676:	4816      	ldr	r0, [pc, #88]	; (80016d0 <moveJoint+0x1c8>)
 8001678:	f002 fdc8 	bl	800420c <HAL_TIM_PWM_Start_IT>
		break;
 800167c:	e000      	b.n	8001680 <moveJoint+0x178>
	default:
		break;
 800167e:	bf00      	nop
	}
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	20000228 	.word	0x20000228
 800168c:	40021000 	.word	0x40021000
 8001690:	20005124 	.word	0x20005124
 8001694:	20000230 	.word	0x20000230
 8001698:	40020000 	.word	0x40020000
 800169c:	200051e8 	.word	0x200051e8
 80016a0:	20000238 	.word	0x20000238
 80016a4:	200050e0 	.word	0x200050e0
 80016a8:	20000240 	.word	0x20000240
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	20005098 	.word	0x20005098
 80016b4:	20000248 	.word	0x20000248
 80016b8:	40020800 	.word	0x40020800
 80016bc:	20005058 	.word	0x20005058
 80016c0:	20000250 	.word	0x20000250
 80016c4:	20005164 	.word	0x20005164
 80016c8:	20000258 	.word	0x20000258
 80016cc:	40020400 	.word	0x40020400
 80016d0:	20005228 	.word	0x20005228

080016d4 <HAL_UART_RxCpltCallback>:
	}
	return line;
}

// UART Rx callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b097      	sub	sp, #92	; 0x5c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	//led3On = led3On > 0 ? 0 : 1;
	HAL_GPIO_WritePin(GPIOD, LED3_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e2:	48b3      	ldr	r0, [pc, #716]	; (80019b0 <HAL_UART_RxCpltCallback+0x2dc>)
 80016e4:	f002 f822 	bl	800372c <HAL_GPIO_WritePin>

	//uartSend(&huart4, "\r\nuart_get: ");

	//osDelay(1000);
	char *uartInput = (char*) UART4_RxBUFFER;
 80016e8:	4bb2      	ldr	r3, [pc, #712]	; (80019b4 <HAL_UART_RxCpltCallback+0x2e0>)
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
	char *str = (char*) uartInput;
 80016ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
	char delim[] = ":";
 80016f0:	233a      	movs	r3, #58	; 0x3a
 80016f2:	843b      	strh	r3, [r7, #32]
//	char PACKET_DELIMITER = ':';

	switch (uartInput[0]) {
 80016f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3b43      	subs	r3, #67	; 0x43
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	f200 8142 	bhi.w	8001984 <HAL_UART_RxCpltCallback+0x2b0>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <HAL_UART_RxCpltCallback+0x34>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	08001959 	.word	0x08001959
 800170c:	0800192d 	.word	0x0800192d
 8001710:	08001985 	.word	0x08001985
 8001714:	08001985 	.word	0x08001985
 8001718:	08001985 	.word	0x08001985
 800171c:	08001985 	.word	0x08001985
 8001720:	08001985 	.word	0x08001985
 8001724:	0800174d 	.word	0x0800174d
 8001728:	08001985 	.word	0x08001985
 800172c:	08001985 	.word	0x08001985
 8001730:	08001985 	.word	0x08001985
 8001734:	08001985 	.word	0x08001985
 8001738:	08001985 	.word	0x08001985
 800173c:	08001985 	.word	0x08001985
 8001740:	08001985 	.word	0x08001985
 8001744:	080018c5 	.word	0x080018c5
 8001748:	0800186b 	.word	0x0800186b
	// J - JOINT: "J1", "J2" ...
	// J7:100:0:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	case 'J': {
		uartSend(&huart4, uartInput);
 800174c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800174e:	489a      	ldr	r0, [pc, #616]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001750:	f7ff fec6 	bl	80014e0 <uartSend>
		uartSend(&huart4, "\r\n");
 8001754:	4999      	ldr	r1, [pc, #612]	; (80019bc <HAL_UART_RxCpltCallback+0x2e8>)
 8001756:	4898      	ldr	r0, [pc, #608]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001758:	f7ff fec2 	bl	80014e0 <uartSend>

		uint8_t jointNumber = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint64_t jointSteps = 0;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	f04f 0400 	mov.w	r4, #0
 800176a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		uint8_t jointDirection = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		// ---------------- split incoming data ---------------------------------------
//		int init_size = strlen(str);
		char *ptr = strtok(str, delim);
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	4619      	mov	r1, r3
 800177a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800177c:	f007 fc7c 	bl	8009078 <strtok>
 8001780:	6438      	str	r0, [r7, #64]	; 0x40
		uint32_t counter = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (ptr != NULL) {
 8001786:	e02e      	b.n	80017e6 <HAL_UART_RxCpltCallback+0x112>
			switch (counter) {
 8001788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178a:	2b01      	cmp	r3, #1
 800178c:	d011      	beq.n	80017b2 <HAL_UART_RxCpltCallback+0xde>
 800178e:	2b01      	cmp	r3, #1
 8001790:	d302      	bcc.n	8001798 <HAL_UART_RxCpltCallback+0xc4>
 8001792:	2b02      	cmp	r3, #2
 8001794:	d016      	beq.n	80017c4 <HAL_UART_RxCpltCallback+0xf0>
				break;
			case 2: // 0 - direction
				jointDirection = atoi(ptr);
				break;
			default:
				break;
 8001796:	e01c      	b.n	80017d2 <HAL_UART_RxCpltCallback+0xfe>
				char jn[] = { ptr[1] }; //"0";
 8001798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	723b      	strb	r3, [r7, #8]
				jointNumber = atoi(jn);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f007 fb9a 	bl	8008edc <atoi>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80017ae:	bf00      	nop
 80017b0:	e00f      	b.n	80017d2 <HAL_UART_RxCpltCallback+0xfe>
				jointSteps = atoi(ptr);
 80017b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80017b4:	f007 fb92 	bl	8008edc <atoi>
 80017b8:	4603      	mov	r3, r0
 80017ba:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017be:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
				break;
 80017c2:	e006      	b.n	80017d2 <HAL_UART_RxCpltCallback+0xfe>
				jointDirection = atoi(ptr);
 80017c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80017c6:	f007 fb89 	bl	8008edc <atoi>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80017d0:	bf00      	nop
			}
			ptr = strtok(NULL, delim);
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	4619      	mov	r1, r3
 80017d8:	2000      	movs	r0, #0
 80017da:	f007 fc4d 	bl	8009078 <strtok>
 80017de:	6438      	str	r0, [r7, #64]	; 0x40
			counter++;
 80017e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e2:	3301      	adds	r3, #1
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (ptr != NULL) {
 80017e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1cd      	bne.n	8001788 <HAL_UART_RxCpltCallback+0xb4>
		}
		// ------------------------------------------------------------------------------------------------
		// debug via uart
		char strnumber[20];
		itoa(jointNumber, strnumber, 10);
 80017ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	220a      	movs	r2, #10
 80017f6:	4618      	mov	r0, r3
 80017f8:	f007 fbb6 	bl	8008f68 <itoa>
		uartSend(&huart4, "\r\njointNumber:");
 80017fc:	4970      	ldr	r1, [pc, #448]	; (80019c0 <HAL_UART_RxCpltCallback+0x2ec>)
 80017fe:	486e      	ldr	r0, [pc, #440]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001800:	f7ff fe6e 	bl	80014e0 <uartSend>
		uartSend(&huart4, strnumber);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	486b      	ldr	r0, [pc, #428]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 800180c:	f7ff fe68 	bl	80014e0 <uartSend>

		itoa(jointSteps, strnumber, 10);
 8001810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001812:	f107 010c 	add.w	r1, r7, #12
 8001816:	220a      	movs	r2, #10
 8001818:	4618      	mov	r0, r3
 800181a:	f007 fba5 	bl	8008f68 <itoa>
		uartSend(&huart4, "\r\njointSteps:");
 800181e:	4969      	ldr	r1, [pc, #420]	; (80019c4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001820:	4865      	ldr	r0, [pc, #404]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001822:	f7ff fe5d 	bl	80014e0 <uartSend>
		uartSend(&huart4, strnumber);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	4862      	ldr	r0, [pc, #392]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 800182e:	f7ff fe57 	bl	80014e0 <uartSend>

		itoa(jointDirection, strnumber, 10);
 8001832:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001836:	f107 010c 	add.w	r1, r7, #12
 800183a:	220a      	movs	r2, #10
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fb93 	bl	8008f68 <itoa>
		uartSend(&huart4, "\r\njointDirection:");
 8001842:	4961      	ldr	r1, [pc, #388]	; (80019c8 <HAL_UART_RxCpltCallback+0x2f4>)
 8001844:	485c      	ldr	r0, [pc, #368]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001846:	f7ff fe4b 	bl	80014e0 <uartSend>
		uartSend(&huart4, strnumber);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	4859      	ldr	r0, [pc, #356]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001852:	f7ff fe45 	bl	80014e0 <uartSend>
		// ------------------------------------------------------------------------------------------------
		moveJoint(jointNumber, jointSteps, jointDirection);
 8001856:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001858:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800185c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fe51 	bl	8001508 <moveJoint>
		break;
 8001866:	bf00      	nop
 8001868:	e095      	b.n	8001996 <HAL_UART_RxCpltCallback+0x2c2>
	}
	case 'S': // SET HOME MODE ENABLE
	{
		uartSend(&huart4, uartInput);
 800186a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800186c:	4852      	ldr	r0, [pc, #328]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 800186e:	f7ff fe37 	bl	80014e0 <uartSend>
		uartSend(&huart4, "\r\n");
 8001872:	4952      	ldr	r1, [pc, #328]	; (80019bc <HAL_UART_RxCpltCallback+0x2e8>)
 8001874:	4850      	ldr	r0, [pc, #320]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001876:	f7ff fe33 	bl	80014e0 <uartSend>
		char *ptr = strtok(str, delim);
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	4619      	mov	r1, r3
 8001880:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001882:	f007 fbf9 	bl	8009078 <strtok>
 8001886:	6338      	str	r0, [r7, #48]	; 0x30
		if (strcmp(ptr, "SETHOME") == 0) {
 8001888:	4950      	ldr	r1, [pc, #320]	; (80019cc <HAL_UART_RxCpltCallback+0x2f8>)
 800188a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800188c:	f7fe fca0 	bl	80001d0 <strcmp>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d178      	bne.n	8001988 <HAL_UART_RxCpltCallback+0x2b4>
			uartSend(&huart4, ptr);
 8001896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001898:	4847      	ldr	r0, [pc, #284]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 800189a:	f7ff fe21 	bl	80014e0 <uartSend>
			uartSend(&huart4, "\r\n");
 800189e:	4947      	ldr	r1, [pc, #284]	; (80019bc <HAL_UART_RxCpltCallback+0x2e8>)
 80018a0:	4845      	ldr	r0, [pc, #276]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 80018a2:	f7ff fe1d 	bl	80014e0 <uartSend>
			ptr = strtok(NULL, delim);
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	4619      	mov	r1, r3
 80018ac:	2000      	movs	r0, #0
 80018ae:	f007 fbe3 	bl	8009078 <strtok>
 80018b2:	6338      	str	r0, [r7, #48]	; 0x30
			SET_HOME_MODE = atoi(ptr);
 80018b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018b6:	f007 fb11 	bl	8008edc <atoi>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_UART_RxCpltCallback+0x2fc>)
 80018c0:	701a      	strb	r2, [r3, #0]
//			itoa(SET_HOME_MODE, strnumber, 10);
//
//			uartSend(&huart4, strnumber);
//			uartSend(&huart4, "\r\n");
		}
		break;
 80018c2:	e061      	b.n	8001988 <HAL_UART_RxCpltCallback+0x2b4>
	}
	case 'R': // RESET COUNTERS
	{
		uartSend(&huart4, uartInput);
 80018c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018c6:	483c      	ldr	r0, [pc, #240]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 80018c8:	f7ff fe0a 	bl	80014e0 <uartSend>
		uartSend(&huart4, "\r\n");
 80018cc:	493b      	ldr	r1, [pc, #236]	; (80019bc <HAL_UART_RxCpltCallback+0x2e8>)
 80018ce:	483a      	ldr	r0, [pc, #232]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 80018d0:	f7ff fe06 	bl	80014e0 <uartSend>
		char *ptr = strtok(str, delim);
 80018d4:	f107 0320 	add.w	r3, r7, #32
 80018d8:	4619      	mov	r1, r3
 80018da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018dc:	f007 fbcc 	bl	8009078 <strtok>
 80018e0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (strcmp(ptr, "RESETCOUNTERS") == 0) {
 80018e2:	493c      	ldr	r1, [pc, #240]	; (80019d4 <HAL_UART_RxCpltCallback+0x300>)
 80018e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018e6:	f7fe fc73 	bl	80001d0 <strcmp>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d14d      	bne.n	800198c <HAL_UART_RxCpltCallback+0x2b8>
			uartSend(&huart4, ptr);
 80018f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018f2:	4831      	ldr	r0, [pc, #196]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 80018f4:	f7ff fdf4 	bl	80014e0 <uartSend>
			uartSend(&huart4, "\r\n");
 80018f8:	4930      	ldr	r1, [pc, #192]	; (80019bc <HAL_UART_RxCpltCallback+0x2e8>)
 80018fa:	482f      	ldr	r0, [pc, #188]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 80018fc:	f7ff fdf0 	bl	80014e0 <uartSend>
			JOINT1_STEPS_CURRENT = 0;
 8001900:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <HAL_UART_RxCpltCallback+0x304>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
			JOINT2_STEPS_CURRENT = 0;
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_UART_RxCpltCallback+0x308>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
			JOINT3_STEPS_CURRENT = 0;
 800190c:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_UART_RxCpltCallback+0x30c>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
			JOINT4_STEPS_CURRENT = 0;
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <HAL_UART_RxCpltCallback+0x310>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
			JOINT5_STEPS_CURRENT = 0;
 8001918:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <HAL_UART_RxCpltCallback+0x314>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
			JOINT6_STEPS_CURRENT = 0;
 800191e:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_UART_RxCpltCallback+0x318>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
			JOINT7_STEPS_CURRENT = 0;
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_UART_RxCpltCallback+0x31c>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
		}
		break;
 800192a:	e02f      	b.n	800198c <HAL_UART_RxCpltCallback+0x2b8>
	}
	case 'D': // DEMO
	{
		char *ptr = strtok(str, delim);
 800192c:	f107 0320 	add.w	r3, r7, #32
 8001930:	4619      	mov	r1, r3
 8001932:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001934:	f007 fba0 	bl	8009078 <strtok>
 8001938:	62b8      	str	r0, [r7, #40]	; 0x28
		if (strcmp(ptr, "DEMO") == 0) {
 800193a:	492e      	ldr	r1, [pc, #184]	; (80019f4 <HAL_UART_RxCpltCallback+0x320>)
 800193c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800193e:	f7fe fc47 	bl	80001d0 <strcmp>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d123      	bne.n	8001990 <HAL_UART_RxCpltCallback+0x2bc>
			uartSend(&huart4, "DEMO");
 8001948:	492a      	ldr	r1, [pc, #168]	; (80019f4 <HAL_UART_RxCpltCallback+0x320>)
 800194a:	481b      	ldr	r0, [pc, #108]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 800194c:	f7ff fdc8 	bl	80014e0 <uartSend>
			DEMO_START = 1;
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_UART_RxCpltCallback+0x324>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001956:	e01b      	b.n	8001990 <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 'C': // CAP
	{
		char *ptr = strtok(str, delim);
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	4619      	mov	r1, r3
 800195e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001960:	f007 fb8a 	bl	8009078 <strtok>
 8001964:	6278      	str	r0, [r7, #36]	; 0x24
		if (strcmp(ptr, "CAP") == 0) {
 8001966:	4925      	ldr	r1, [pc, #148]	; (80019fc <HAL_UART_RxCpltCallback+0x328>)
 8001968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800196a:	f7fe fc31 	bl	80001d0 <strcmp>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10f      	bne.n	8001994 <HAL_UART_RxCpltCallback+0x2c0>
			uartSend(&huart4, "CAP");
 8001974:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_UART_RxCpltCallback+0x328>)
 8001976:	4810      	ldr	r0, [pc, #64]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001978:	f7ff fdb2 	bl	80014e0 <uartSend>
			CAP_START = 1;
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_UART_RxCpltCallback+0x32c>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001982:	e007      	b.n	8001994 <HAL_UART_RxCpltCallback+0x2c0>
	}
	case 'M':

		break;
	default:
		break;
 8001984:	bf00      	nop
 8001986:	e006      	b.n	8001996 <HAL_UART_RxCpltCallback+0x2c2>
		break;
 8001988:	bf00      	nop
 800198a:	e004      	b.n	8001996 <HAL_UART_RxCpltCallback+0x2c2>
		break;
 800198c:	bf00      	nop
 800198e:	e002      	b.n	8001996 <HAL_UART_RxCpltCallback+0x2c2>
		break;
 8001990:	bf00      	nop
 8001992:	e000      	b.n	8001996 <HAL_UART_RxCpltCallback+0x2c2>
		break;
 8001994:	bf00      	nop

	//HAL_UART_Receive_IT(&huart4, UART4_rxBuffer, 12);
	//uartSend(&huart4, uartInput); // print full line

	//uartSend(&huart4, (UART4_RxBUFFER));
	HAL_UART_Receive_DMA(&huart4, UART4_RxBUFFER, UART4_INPUT_BYTES_BUFFER_SIZE);
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_UART_RxCpltCallback+0x330>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	4905      	ldr	r1, [pc, #20]	; (80019b4 <HAL_UART_RxCpltCallback+0x2e0>)
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <HAL_UART_RxCpltCallback+0x2e4>)
 80019a2:	f003 fd69 	bl	8005478 <HAL_UART_Receive_DMA>
	//HAL_GPIO_WritePin(GPIOD, LED3_Pin, GPIO_PIN_RESET);
}
 80019a6:	bf00      	nop
 80019a8:	375c      	adds	r7, #92	; 0x5c
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	20000288 	.word	0x20000288
 80019b8:	200051a8 	.word	0x200051a8
 80019bc:	0800935c 	.word	0x0800935c
 80019c0:	08009360 	.word	0x08009360
 80019c4:	08009370 	.word	0x08009370
 80019c8:	08009380 	.word	0x08009380
 80019cc:	08009394 	.word	0x08009394
 80019d0:	20000284 	.word	0x20000284
 80019d4:	0800939c 	.word	0x0800939c
 80019d8:	20000260 	.word	0x20000260
 80019dc:	20000264 	.word	0x20000264
 80019e0:	2000026c 	.word	0x2000026c
 80019e4:	20000274 	.word	0x20000274
 80019e8:	20000278 	.word	0x20000278
 80019ec:	2000027c 	.word	0x2000027c
 80019f0:	20000280 	.word	0x20000280
 80019f4:	080093ac 	.word	0x080093ac
 80019f8:	20000285 	.word	0x20000285
 80019fc:	080093b4 	.word	0x080093b4
 8001a00:	20000286 	.word	0x20000286
 8001a04:	20000020 	.word	0x20000020

08001a08 <demoPlay>:

void demoPlay() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	moveJoint(6, 20000, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001a12:	2006      	movs	r0, #6
 8001a14:	f7ff fd78 	bl	8001508 <moveJoint>
	moveJoint(3, 7000, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f641 3158 	movw	r1, #7000	; 0x1b58
 8001a1e:	2003      	movs	r0, #3
 8001a20:	f7ff fd72 	bl	8001508 <moveJoint>
	moveJoint(2, 7000, 1);
 8001a24:	2201      	movs	r2, #1
 8001a26:	f641 3158 	movw	r1, #7000	; 0x1b58
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f7ff fd6c 	bl	8001508 <moveJoint>

	osDelay(2000);
 8001a30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a34:	f004 fd60 	bl	80064f8 <osDelay>

	moveJoint(5, 3500, 1);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001a3e:	2005      	movs	r0, #5
 8001a40:	f7ff fd62 	bl	8001508 <moveJoint>
	moveJoint(4, 2000, 1);
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	f7ff fd5c 	bl	8001508 <moveJoint>

	moveJoint(1, 6000, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f241 7170 	movw	r1, #6000	; 0x1770
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff fd56 	bl	8001508 <moveJoint>
	osDelay(5000);
 8001a5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a60:	f004 fd4a 	bl	80064f8 <osDelay>
	//moveJoint(1, 2000, 1);

	osDelay(4000);
 8001a64:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001a68:	f004 fd46 	bl	80064f8 <osDelay>

	moveJoint(5, 3500, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001a72:	2005      	movs	r0, #5
 8001a74:	f7ff fd48 	bl	8001508 <moveJoint>
	moveJoint(4, 2000, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a7e:	2004      	movs	r0, #4
 8001a80:	f7ff fd42 	bl	8001508 <moveJoint>

	osDelay(4500);				 // TOP
 8001a84:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a88:	f004 fd36 	bl	80064f8 <osDelay>
	//moveJoint(1, 2000, 1);

	moveJoint(5, 3500, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001a92:	2005      	movs	r0, #5
 8001a94:	f7ff fd38 	bl	8001508 <moveJoint>
	moveJoint(4, 2000, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a9e:	2004      	movs	r0, #4
 8001aa0:	f7ff fd32 	bl	8001508 <moveJoint>

	moveJoint(3, 7000, 1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f641 3158 	movw	r1, #7000	; 0x1b58
 8001aaa:	2003      	movs	r0, #3
 8001aac:	f7ff fd2c 	bl	8001508 <moveJoint>
	moveJoint(2, 7000, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f641 3158 	movw	r1, #7000	; 0x1b58
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7ff fd26 	bl	8001508 <moveJoint>

	moveJoint(6, 500, 1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ac2:	2006      	movs	r0, #6
 8001ac4:	f7ff fd20 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001acc:	f004 fd14 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ad6:	2006      	movs	r0, #6
 8001ad8:	f7ff fd16 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae0:	f004 fd0a 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001aea:	2006      	movs	r0, #6
 8001aec:	f7ff fd0c 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001af4:	f004 fd00 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001afe:	2006      	movs	r0, #6
 8001b00:	f7ff fd02 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b08:	f004 fcf6 	bl	80064f8 <osDelay>

	moveJoint(6, 500, 1);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b12:	2006      	movs	r0, #6
 8001b14:	f7ff fcf8 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b1c:	f004 fcec 	bl	80064f8 <osDelay>

	moveJoint(1, 6000, 1);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f241 7170 	movw	r1, #6000	; 0x1770
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff fcee 	bl	8001508 <moveJoint>
	moveJoint(5, 3500, 1);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001b32:	2005      	movs	r0, #5
 8001b34:	f7ff fce8 	bl	8001508 <moveJoint>
	moveJoint(4, 2000, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b3e:	2004      	movs	r0, #4
 8001b40:	f7ff fce2 	bl	8001508 <moveJoint>

	moveJoint(6, 500, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b4a:	2006      	movs	r0, #6
 8001b4c:	f7ff fcdc 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b54:	f004 fcd0 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f7ff fcd2 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b68:	f004 fcc6 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b72:	2006      	movs	r0, #6
 8001b74:	f7ff fcc8 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b7c:	f004 fcbc 	bl	80064f8 <osDelay>

	moveJoint(6, 500, 1);
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b86:	2006      	movs	r0, #6
 8001b88:	f7ff fcbe 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b90:	f004 fcb2 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b9a:	2006      	movs	r0, #6
 8001b9c:	f7ff fcb4 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ba4:	f004 fca8 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bae:	2006      	movs	r0, #6
 8001bb0:	f7ff fcaa 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb8:	f004 fc9e 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bc2:	2006      	movs	r0, #6
 8001bc4:	f7ff fca0 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bcc:	f004 fc94 	bl	80064f8 <osDelay>

	moveJoint(6, 500, 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bd6:	2006      	movs	r0, #6
 8001bd8:	f7ff fc96 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001be0:	f004 fc8a 	bl	80064f8 <osDelay>
	moveJoint(6, 500, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bea:	2006      	movs	r0, #6
 8001bec:	f7ff fc8c 	bl	8001508 <moveJoint>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <capPlay>:

void capPlay() {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
	moveJoint(3, 1000, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c00:	2003      	movs	r0, #3
 8001c02:	f7ff fc81 	bl	8001508 <moveJoint>
	moveJoint(2, 10000, 1);
 8001c06:	2201      	movs	r2, #1
 8001c08:	f242 7110 	movw	r1, #10000	; 0x2710
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f7ff fc7b 	bl	8001508 <moveJoint>

	osDelay(5000);
 8001c12:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c16:	f004 fc6f 	bl	80064f8 <osDelay>
	moveJoint(5, 1000, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c20:	2005      	movs	r0, #5
 8001c22:	f7ff fc71 	bl	8001508 <moveJoint>
	moveJoint(1, 800, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff fc6b 	bl	8001508 <moveJoint>

	osDelay(1000);
 8001c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c36:	f004 fc5f 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	21fa      	movs	r1, #250	; 0xfa
 8001c3e:	2005      	movs	r0, #5
 8001c40:	f7ff fc62 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c48:	f004 fc56 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	21fa      	movs	r1, #250	; 0xfa
 8001c50:	2005      	movs	r0, #5
 8001c52:	f7ff fc59 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5a:	f004 fc4d 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	21fa      	movs	r1, #250	; 0xfa
 8001c62:	2005      	movs	r0, #5
 8001c64:	f7ff fc50 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c6c:	f004 fc44 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	21fa      	movs	r1, #250	; 0xfa
 8001c74:	2005      	movs	r0, #5
 8001c76:	f7ff fc47 	bl	8001508 <moveJoint>

	osDelay(1000);
 8001c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c7e:	f004 fc3b 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	21fa      	movs	r1, #250	; 0xfa
 8001c86:	2005      	movs	r0, #5
 8001c88:	f7ff fc3e 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c90:	f004 fc32 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	21fa      	movs	r1, #250	; 0xfa
 8001c98:	2005      	movs	r0, #5
 8001c9a:	f7ff fc35 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ca2:	f004 fc29 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	21fa      	movs	r1, #250	; 0xfa
 8001caa:	2005      	movs	r0, #5
 8001cac:	f7ff fc2c 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb4:	f004 fc20 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	21fa      	movs	r1, #250	; 0xfa
 8001cbc:	2005      	movs	r0, #5
 8001cbe:	f7ff fc23 	bl	8001508 <moveJoint>

	osDelay(1000);
 8001cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc6:	f004 fc17 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	21fa      	movs	r1, #250	; 0xfa
 8001cce:	2005      	movs	r0, #5
 8001cd0:	f7ff fc1a 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd8:	f004 fc0e 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	21fa      	movs	r1, #250	; 0xfa
 8001ce0:	2005      	movs	r0, #5
 8001ce2:	f7ff fc11 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cea:	f004 fc05 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	21fa      	movs	r1, #250	; 0xfa
 8001cf2:	2005      	movs	r0, #5
 8001cf4:	f7ff fc08 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cfc:	f004 fbfc 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	21fa      	movs	r1, #250	; 0xfa
 8001d04:	2005      	movs	r0, #5
 8001d06:	f7ff fbff 	bl	8001508 <moveJoint>

	osDelay(1000);
 8001d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d0e:	f004 fbf3 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	21fa      	movs	r1, #250	; 0xfa
 8001d16:	2005      	movs	r0, #5
 8001d18:	f7ff fbf6 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d20:	f004 fbea 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	21fa      	movs	r1, #250	; 0xfa
 8001d28:	2005      	movs	r0, #5
 8001d2a:	f7ff fbed 	bl	8001508 <moveJoint>

	osDelay(1500);
 8001d2e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d32:	f004 fbe1 	bl	80064f8 <osDelay>
	//moveJoint(5, 1000, 0);
	moveJoint(3, 2000, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f7ff fbe3 	bl	8001508 <moveJoint>
	moveJoint(2, 500, 1);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fbdd 	bl	8001508 <moveJoint>

	moveJoint(5, 500, 1);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d54:	2005      	movs	r0, #5
 8001d56:	f7ff fbd7 	bl	8001508 <moveJoint>
	osDelay(500);
 8001d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d5e:	f004 fbcb 	bl	80064f8 <osDelay>
	//moveJoint(5, 500, 0);
	osDelay(500);
 8001d62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d66:	f004 fbc7 	bl	80064f8 <osDelay>
	moveJoint(5, 500, 1);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d70:	2005      	movs	r0, #5
 8001d72:	f7ff fbc9 	bl	8001508 <moveJoint>
	osDelay(500);
 8001d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7a:	f004 fbbd 	bl	80064f8 <osDelay>
	moveJoint(5, 500, 1);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d84:	2005      	movs	r0, #5
 8001d86:	f7ff fbbf 	bl	8001508 <moveJoint>
	osDelay(500);
 8001d8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d8e:	f004 fbb3 	bl	80064f8 <osDelay>
	moveJoint(5, 500, 1);
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d98:	2005      	movs	r0, #5
 8001d9a:	f7ff fbb5 	bl	8001508 <moveJoint>
	osDelay(500);
 8001d9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001da2:	f004 fba9 	bl	80064f8 <osDelay>
	moveJoint(5, 500, 1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dac:	2005      	movs	r0, #5
 8001dae:	f7ff fbab 	bl	8001508 <moveJoint>
	osDelay(500);
 8001db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001db6:	f004 fb9f 	bl	80064f8 <osDelay>
	moveJoint(5, 500, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dc0:	2005      	movs	r0, #5
 8001dc2:	f7ff fba1 	bl	8001508 <moveJoint>
	osDelay(500);
 8001dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dca:	f004 fb95 	bl	80064f8 <osDelay>

// get cup
	osDelay(1000);
 8001dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd2:	f004 fb91 	bl	80064f8 <osDelay>
	moveJoint(2, 1500, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f7ff fb93 	bl	8001508 <moveJoint>
	osDelay(1500);
 8001de2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001de6:	f004 fb87 	bl	80064f8 <osDelay>
	moveJoint(1, 800, 1);
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7ff fb89 	bl	8001508 <moveJoint>
	moveJoint(3, 500, 1);
 8001df6:	2201      	movs	r2, #1
 8001df8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f7ff fb83 	bl	8001508 <moveJoint>
	moveJoint(5, 500, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e08:	2005      	movs	r0, #5
 8001e0a:	f7ff fb7d 	bl	8001508 <moveJoint>
// fill water
	osDelay(1500);
 8001e0e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001e12:	f004 fb71 	bl	80064f8 <osDelay>
	for (uint8_t i = 0; i < 55; ++i) {
 8001e16:	2300      	movs	r3, #0
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	e00a      	b.n	8001e32 <capPlay+0x23e>
		moveJoint(6, 1, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2006      	movs	r0, #6
 8001e22:	f7ff fb71 	bl	8001508 <moveJoint>
		//moveJoint(2, 20, 0);
		osDelay(40);
 8001e26:	2028      	movs	r0, #40	; 0x28
 8001e28:	f004 fb66 	bl	80064f8 <osDelay>
	for (uint8_t i = 0; i < 55; ++i) {
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b36      	cmp	r3, #54	; 0x36
 8001e36:	d9f1      	bls.n	8001e1c <capPlay+0x228>
	}

	/************ BACK ***************/
	osDelay(10000);
 8001e38:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e3c:	f004 fb5c 	bl	80064f8 <osDelay>
	moveJoint(2, 11000-500, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f642 1104 	movw	r1, #10500	; 0x2904
 8001e46:	2002      	movs	r0, #2
 8001e48:	f7ff fb5e 	bl	8001508 <moveJoint>
	moveJoint(3, 1000, 1);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e52:	2003      	movs	r0, #3
 8001e54:	f7ff fb58 	bl	8001508 <moveJoint>

	for (uint8_t i = 0; i < 55; ++i) {
 8001e58:	2300      	movs	r3, #0
 8001e5a:	71bb      	strb	r3, [r7, #6]
 8001e5c:	e00a      	b.n	8001e74 <capPlay+0x280>
		moveJoint(6, 1, 1);
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2101      	movs	r1, #1
 8001e62:	2006      	movs	r0, #6
 8001e64:	f7ff fb50 	bl	8001508 <moveJoint>
		//moveJoint(2, 5, 0);
		osDelay(40);
 8001e68:	2028      	movs	r0, #40	; 0x28
 8001e6a:	f004 fb45 	bl	80064f8 <osDelay>
	for (uint8_t i = 0; i < 55; ++i) {
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	3301      	adds	r3, #1
 8001e72:	71bb      	strb	r3, [r7, #6]
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	2b36      	cmp	r3, #54	; 0x36
 8001e78:	d9f1      	bls.n	8001e5e <capPlay+0x26a>
	}


	moveJoint(5, 1000, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e80:	2005      	movs	r0, #5
 8001e82:	f7ff fb41 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e8a:	f004 fb35 	bl	80064f8 <osDelay>

	moveJoint(5, 250, 1);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	21fa      	movs	r1, #250	; 0xfa
 8001e92:	2005      	movs	r0, #5
 8001e94:	f7ff fb38 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e9c:	f004 fb2c 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	21fa      	movs	r1, #250	; 0xfa
 8001ea4:	2005      	movs	r0, #5
 8001ea6:	f7ff fb2f 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eae:	f004 fb23 	bl	80064f8 <osDelay>
	//moveJoint(1, 200, 0);
	moveJoint(5, 250, 1);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	21fa      	movs	r1, #250	; 0xfa
 8001eb6:	2005      	movs	r0, #5
 8001eb8:	f7ff fb26 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec0:	f004 fb1a 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	21fa      	movs	r1, #250	; 0xfa
 8001ec8:	2005      	movs	r0, #5
 8001eca:	f7ff fb1d 	bl	8001508 <moveJoint>

	osDelay(1000);
 8001ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ed2:	f004 fb11 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	21fa      	movs	r1, #250	; 0xfa
 8001eda:	2005      	movs	r0, #5
 8001edc:	f7ff fb14 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee4:	f004 fb08 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	21fa      	movs	r1, #250	; 0xfa
 8001eec:	2005      	movs	r0, #5
 8001eee:	f7ff fb0b 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef6:	f004 faff 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001efa:	2201      	movs	r2, #1
 8001efc:	21fa      	movs	r1, #250	; 0xfa
 8001efe:	2005      	movs	r0, #5
 8001f00:	f7ff fb02 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001f04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f08:	f004 faf6 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	21fa      	movs	r1, #250	; 0xfa
 8001f10:	2005      	movs	r0, #5
 8001f12:	f7ff faf9 	bl	8001508 <moveJoint>

	osDelay(1000);
 8001f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1a:	f004 faed 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	21fa      	movs	r1, #250	; 0xfa
 8001f22:	2005      	movs	r0, #5
 8001f24:	f7ff faf0 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2c:	f004 fae4 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001f30:	2201      	movs	r2, #1
 8001f32:	21fa      	movs	r1, #250	; 0xfa
 8001f34:	2005      	movs	r0, #5
 8001f36:	f7ff fae7 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3e:	f004 fadb 	bl	80064f8 <osDelay>
	moveJoint(5, 250, 1);
 8001f42:	2201      	movs	r2, #1
 8001f44:	21fa      	movs	r1, #250	; 0xfa
 8001f46:	2005      	movs	r0, #5
 8001f48:	f7ff fade 	bl	8001508 <moveJoint>
	osDelay(1000);
 8001f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f50:	f004 fad2 	bl	80064f8 <osDelay>
	moveJoint(5, 1250, 1);
 8001f54:	2201      	movs	r2, #1
 8001f56:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8001f5a:	2005      	movs	r0, #5
 8001f5c:	f7ff fad4 	bl	8001508 <moveJoint>

	moveJoint(3, 2000, 1);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f66:	2003      	movs	r0, #3
 8001f68:	f7ff face 	bl	8001508 <moveJoint>
//	moveJoint(5, 3500, 0);
//	moveJoint(4, 2000, 0);
//
//	osDelay(4500);				 // TOP

}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	/************** RESET ALL DIR FOR EMI DISABLE ***************************/
	HAL_GPIO_WritePin(GPIOE, JOINT1_DIR_Pin, GPIO_PIN_RESET); // 1 : SET=CLOCKWISE, RESET=ANTI-CLOCKWISE
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f82:	4828      	ldr	r0, [pc, #160]	; (8002024 <StartDefaultTask+0xb0>)
 8001f84:	f001 fbd2 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, JOINT2_DIR_Pin, GPIO_PIN_RESET); // 2 : SET=IN, RESET=OUT
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2110      	movs	r1, #16
 8001f8c:	4826      	ldr	r0, [pc, #152]	; (8002028 <StartDefaultTask+0xb4>)
 8001f8e:	f001 fbcd 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, JOINT3_DIR_Pin, GPIO_PIN_RESET); // 3 :  SET=IN, RESET=OUT
 8001f92:	2200      	movs	r2, #0
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	4824      	ldr	r0, [pc, #144]	; (8002028 <StartDefaultTask+0xb4>)
 8001f98:	f001 fbc8 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, JOINT4_DIR_Pin, GPIO_PIN_RESET); // 4 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa2:	4822      	ldr	r0, [pc, #136]	; (800202c <StartDefaultTask+0xb8>)
 8001fa4:	f001 fbc2 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, JOINT5_DIR_Pin, GPIO_PIN_RESET); // 5 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	4820      	ldr	r0, [pc, #128]	; (8002030 <StartDefaultTask+0xbc>)
 8001fae:	f001 fbbd 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, JOINT6_DIR_Pin, GPIO_PIN_RESET); // 6 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	481b      	ldr	r0, [pc, #108]	; (8002024 <StartDefaultTask+0xb0>)
 8001fb8:	f001 fbb8 	bl	800372c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, JOINT7_DIR_Pin, GPIO_PIN_RESET); // 7 :  SET=ANTI-CLOCKWISE, RESET=CLOCKWISE
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fc2:	481c      	ldr	r0, [pc, #112]	; (8002034 <StartDefaultTask+0xc0>)
 8001fc4:	f001 fbb2 	bl	800372c <HAL_GPIO_WritePin>

	uartSend(&huart4, "START");
 8001fc8:	491b      	ldr	r1, [pc, #108]	; (8002038 <StartDefaultTask+0xc4>)
 8001fca:	481c      	ldr	r0, [pc, #112]	; (800203c <StartDefaultTask+0xc8>)
 8001fcc:	f7ff fa88 	bl	80014e0 <uartSend>
	HAL_UART_Receive_DMA(&huart4, UART4_RxBUFFER, UART4_INPUT_BYTES_BUFFER_SIZE);
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <StartDefaultTask+0xcc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	491a      	ldr	r1, [pc, #104]	; (8002044 <StartDefaultTask+0xd0>)
 8001fda:	4818      	ldr	r0, [pc, #96]	; (800203c <StartDefaultTask+0xc8>)
 8001fdc:	f003 fa4c 	bl	8005478 <HAL_UART_Receive_DMA>

	for (;;) {
		HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe6:	4811      	ldr	r0, [pc, #68]	; (800202c <StartDefaultTask+0xb8>)
 8001fe8:	f001 fba0 	bl	800372c <HAL_GPIO_WritePin>
		osDelay(500);
 8001fec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff0:	f004 fa82 	bl	80064f8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffa:	480c      	ldr	r0, [pc, #48]	; (800202c <StartDefaultTask+0xb8>)
 8001ffc:	f001 fb96 	bl	800372c <HAL_GPIO_WritePin>
		osDelay(500);
 8002000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002004:	f004 fa78 	bl	80064f8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LED3_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200e:	4807      	ldr	r0, [pc, #28]	; (800202c <StartDefaultTask+0xb8>)
 8002010:	f001 fb8c 	bl	800372c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED2_Pin, GPIO_PIN_RESET);
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800201a:	4804      	ldr	r0, [pc, #16]	; (800202c <StartDefaultTask+0xb8>)
 800201c:	f001 fb86 	bl	800372c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);
 8002020:	e7de      	b.n	8001fe0 <StartDefaultTask+0x6c>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	40020000 	.word	0x40020000
 800202c:	40020c00 	.word	0x40020c00
 8002030:	40020800 	.word	0x40020800
 8002034:	40020400 	.word	0x40020400
 8002038:	080093b8 	.word	0x080093b8
 800203c:	200051a8 	.word	0x200051a8
 8002040:	20000020 	.word	0x20000020
 8002044:	20000288 	.word	0x20000288

08002048 <UARTsend>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UARTsend */
void UARTsend(void *argument)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UARTsend */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002050:	2001      	movs	r0, #1
 8002052:	f004 fa51 	bl	80064f8 <osDelay>
 8002056:	e7fb      	b.n	8002050 <UARTsend+0x8>

08002058 <UARTget>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UARTget */
void UARTget(void *argument)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UARTget */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002060:	2001      	movs	r0, #1
 8002062:	f004 fa49 	bl	80064f8 <osDelay>
 8002066:	e7fb      	b.n	8002060 <UARTget+0x8>

08002068 <JOINT_RUN_QUEUE>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_JOINT_RUN_QUEUE */
void JOINT_RUN_QUEUE(void *argument)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN JOINT_RUN_QUEUE */
	/* Infinite loop */
	for (;;) {
		if (DEMO_START == 1) {
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <JOINT_RUN_QUEUE+0x34>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d104      	bne.n	8002082 <JOINT_RUN_QUEUE+0x1a>
			DEMO_START = 0;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <JOINT_RUN_QUEUE+0x34>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
			demoPlay();
 800207e:	f7ff fcc3 	bl	8001a08 <demoPlay>
		}
		if (CAP_START == 1) {
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <JOINT_RUN_QUEUE+0x38>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d104      	bne.n	8002094 <JOINT_RUN_QUEUE+0x2c>
			CAP_START = 0;
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <JOINT_RUN_QUEUE+0x38>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
			capPlay();
 8002090:	f7ff fdb0 	bl	8001bf4 <capPlay>
		}
		osDelay(100);
 8002094:	2064      	movs	r0, #100	; 0x64
 8002096:	f004 fa2f 	bl	80064f8 <osDelay>
		if (DEMO_START == 1) {
 800209a:	e7e9      	b.n	8002070 <JOINT_RUN_QUEUE+0x8>
 800209c:	20000285 	.word	0x20000285
 80020a0:	20000286 	.word	0x20000286

080020a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
//			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
//			HAL_TIMEx_PWMN_Stop(&htim2, TIM_CHANNEL_1);
//		}
//	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020b6:	f000 fcf5 	bl	8002aa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40000c00 	.word	0x40000c00

080020c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_MspInit+0x54>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_MspInit+0x54>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_MspInit+0x54>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_MspInit+0x54>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_MspInit+0x54>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_MspInit+0x54>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	210f      	movs	r1, #15
 800211a:	f06f 0001 	mvn.w	r0, #1
 800211e:	f000 fd99 	bl	8002c54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a28      	ldr	r2, [pc, #160]	; (80021f0 <HAL_SPI_MspInit+0xc0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d14a      	bne.n	80021e8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_SPI_MspInit+0xc4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a6:	230c      	movs	r3, #12
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021b6:	2305      	movs	r3, #5
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <HAL_SPI_MspInit+0xc8>)
 80021c2:	f001 f901 	bl	80033c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d8:	2305      	movs	r3, #5
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <HAL_SPI_MspInit+0xcc>)
 80021e4:	f001 f8f0 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40003800 	.word	0x40003800
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020400 	.word	0x40020400

08002200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a7a      	ldr	r2, [pc, #488]	; (80023f8 <HAL_TIM_Base_MspInit+0x1f8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d12e      	bne.n	8002270 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	4b79      	ldr	r3, [pc, #484]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a78      	ldr	r2, [pc, #480]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2105      	movs	r1, #5
 8002232:	2018      	movs	r0, #24
 8002234:	f000 fd0e 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002238:	2018      	movs	r0, #24
 800223a:	f000 fd27 	bl	8002c8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2105      	movs	r1, #5
 8002242:	2019      	movs	r0, #25
 8002244:	f000 fd06 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002248:	2019      	movs	r0, #25
 800224a:	f000 fd1f 	bl	8002c8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2105      	movs	r1, #5
 8002252:	201a      	movs	r0, #26
 8002254:	f000 fcfe 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002258:	201a      	movs	r0, #26
 800225a:	f000 fd17 	bl	8002c8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2105      	movs	r1, #5
 8002262:	201b      	movs	r0, #27
 8002264:	f000 fcf6 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002268:	201b      	movs	r0, #27
 800226a:	f000 fd0f 	bl	8002c8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800226e:	e0be      	b.n	80023ee <HAL_TIM_Base_MspInit+0x1ee>
  else if(htim_base->Instance==TIM2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d116      	bne.n	80022a8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a5e      	ldr	r2, [pc, #376]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b5c      	ldr	r3, [pc, #368]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2105      	movs	r1, #5
 800229a:	201c      	movs	r0, #28
 800229c:	f000 fcda 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022a0:	201c      	movs	r0, #28
 80022a2:	f000 fcf3 	bl	8002c8c <HAL_NVIC_EnableIRQ>
}
 80022a6:	e0a2      	b.n	80023ee <HAL_TIM_Base_MspInit+0x1ee>
  else if(htim_base->Instance==TIM3)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a54      	ldr	r2, [pc, #336]	; (8002400 <HAL_TIM_Base_MspInit+0x200>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d116      	bne.n	80022e0 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a50      	ldr	r2, [pc, #320]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2105      	movs	r1, #5
 80022d2:	201d      	movs	r0, #29
 80022d4:	f000 fcbe 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022d8:	201d      	movs	r0, #29
 80022da:	f000 fcd7 	bl	8002c8c <HAL_NVIC_EnableIRQ>
}
 80022de:	e086      	b.n	80023ee <HAL_TIM_Base_MspInit+0x1ee>
  else if(htim_base->Instance==TIM4)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a47      	ldr	r2, [pc, #284]	; (8002404 <HAL_TIM_Base_MspInit+0x204>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d116      	bne.n	8002318 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b40      	ldr	r3, [pc, #256]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2105      	movs	r1, #5
 800230a:	201e      	movs	r0, #30
 800230c:	f000 fca2 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002310:	201e      	movs	r0, #30
 8002312:	f000 fcbb 	bl	8002c8c <HAL_NVIC_EnableIRQ>
}
 8002316:	e06a      	b.n	80023ee <HAL_TIM_Base_MspInit+0x1ee>
  else if(htim_base->Instance==TIM8)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <HAL_TIM_Base_MspInit+0x208>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12e      	bne.n	8002380 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a34      	ldr	r2, [pc, #208]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b32      	ldr	r3, [pc, #200]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2105      	movs	r1, #5
 8002342:	202b      	movs	r0, #43	; 0x2b
 8002344:	f000 fc86 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002348:	202b      	movs	r0, #43	; 0x2b
 800234a:	f000 fc9f 	bl	8002c8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2105      	movs	r1, #5
 8002352:	202c      	movs	r0, #44	; 0x2c
 8002354:	f000 fc7e 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002358:	202c      	movs	r0, #44	; 0x2c
 800235a:	f000 fc97 	bl	8002c8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2105      	movs	r1, #5
 8002362:	202d      	movs	r0, #45	; 0x2d
 8002364:	f000 fc76 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002368:	202d      	movs	r0, #45	; 0x2d
 800236a:	f000 fc8f 	bl	8002c8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2105      	movs	r1, #5
 8002372:	202e      	movs	r0, #46	; 0x2e
 8002374:	f000 fc6e 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002378:	202e      	movs	r0, #46	; 0x2e
 800237a:	f000 fc87 	bl	8002c8c <HAL_NVIC_EnableIRQ>
}
 800237e:	e036      	b.n	80023ee <HAL_TIM_Base_MspInit+0x1ee>
  else if(htim_base->Instance==TIM9)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a21      	ldr	r2, [pc, #132]	; (800240c <HAL_TIM_Base_MspInit+0x20c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d116      	bne.n	80023b8 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2105      	movs	r1, #5
 80023aa:	2018      	movs	r0, #24
 80023ac:	f000 fc52 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80023b0:	2018      	movs	r0, #24
 80023b2:	f000 fc6b 	bl	8002c8c <HAL_NVIC_EnableIRQ>
}
 80023b6:	e01a      	b.n	80023ee <HAL_TIM_Base_MspInit+0x1ee>
  else if(htim_base->Instance==TIM12)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_TIM_Base_MspInit+0x210>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d115      	bne.n	80023ee <HAL_TIM_Base_MspInit+0x1ee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80023cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_TIM_Base_MspInit+0x1fc>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2105      	movs	r1, #5
 80023e2:	202b      	movs	r0, #43	; 0x2b
 80023e4:	f000 fc36 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80023e8:	202b      	movs	r0, #43	; 0x2b
 80023ea:	f000 fc4f 	bl	8002c8c <HAL_NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40023800 	.word	0x40023800
 8002400:	40000400 	.word	0x40000400
 8002404:	40000800 	.word	0x40000800
 8002408:	40010400 	.word	0x40010400
 800240c:	40014000 	.word	0x40014000
 8002410:	40001800 	.word	0x40001800

08002414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08e      	sub	sp, #56	; 0x38
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7f      	ldr	r2, [pc, #508]	; (8002630 <HAL_TIM_MspPostInit+0x21c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d11f      	bne.n	8002476 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
 800243a:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a7d      	ldr	r2, [pc, #500]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = JOINT1_STEP_Pin;
 8002452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002464:	2301      	movs	r3, #1
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(JOINT1_STEP_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	4619      	mov	r1, r3
 800246e:	4872      	ldr	r0, [pc, #456]	; (8002638 <HAL_TIM_MspPostInit+0x224>)
 8002470:	f000 ffaa 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002474:	e0d8      	b.n	8002628 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d11e      	bne.n	80024be <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	4b6b      	ldr	r3, [pc, #428]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a6a      	ldr	r2, [pc, #424]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = JOINT2_STEP_Pin;
 800249c:	2320      	movs	r3, #32
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ac:	2301      	movs	r3, #1
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(JOINT2_STEP_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b4:	4619      	mov	r1, r3
 80024b6:	4861      	ldr	r0, [pc, #388]	; (800263c <HAL_TIM_MspPostInit+0x228>)
 80024b8:	f000 ff86 	bl	80033c8 <HAL_GPIO_Init>
}
 80024bc:	e0b4      	b.n	8002628 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a5f      	ldr	r2, [pc, #380]	; (8002640 <HAL_TIM_MspPostInit+0x22c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d11e      	bne.n	8002506 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b56      	ldr	r3, [pc, #344]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = JOINT3_STEP_Pin;
 80024e4:	2340      	movs	r3, #64	; 0x40
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024f4:	2302      	movs	r3, #2
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(JOINT3_STEP_GPIO_Port, &GPIO_InitStruct);
 80024f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fc:	4619      	mov	r1, r3
 80024fe:	484f      	ldr	r0, [pc, #316]	; (800263c <HAL_TIM_MspPostInit+0x228>)
 8002500:	f000 ff62 	bl	80033c8 <HAL_GPIO_Init>
}
 8002504:	e090      	b.n	8002628 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM4)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a4e      	ldr	r2, [pc, #312]	; (8002644 <HAL_TIM_MspPostInit+0x230>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d11f      	bne.n	8002550 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	4a46      	ldr	r2, [pc, #280]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 800251a:	f043 0308 	orr.w	r3, r3, #8
 800251e:	6313      	str	r3, [r2, #48]	; 0x30
 8002520:	4b44      	ldr	r3, [pc, #272]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = JOINT4_STEP_Pin;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800253e:	2302      	movs	r3, #2
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(JOINT4_STEP_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002546:	4619      	mov	r1, r3
 8002548:	483f      	ldr	r0, [pc, #252]	; (8002648 <HAL_TIM_MspPostInit+0x234>)
 800254a:	f000 ff3d 	bl	80033c8 <HAL_GPIO_Init>
}
 800254e:	e06b      	b.n	8002628 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM8)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3d      	ldr	r2, [pc, #244]	; (800264c <HAL_TIM_MspPostInit+0x238>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d11e      	bne.n	8002598 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a34      	ldr	r2, [pc, #208]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = JOINT5_STEP_Pin;
 8002576:	2340      	movs	r3, #64	; 0x40
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002586:	2303      	movs	r3, #3
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(JOINT5_STEP_GPIO_Port, &GPIO_InitStruct);
 800258a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258e:	4619      	mov	r1, r3
 8002590:	482f      	ldr	r0, [pc, #188]	; (8002650 <HAL_TIM_MspPostInit+0x23c>)
 8002592:	f000 ff19 	bl	80033c8 <HAL_GPIO_Init>
}
 8002596:	e047      	b.n	8002628 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM9)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2d      	ldr	r2, [pc, #180]	; (8002654 <HAL_TIM_MspPostInit+0x240>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d11e      	bne.n	80025e0 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80025ac:	f043 0310 	orr.w	r3, r3, #16
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JOINT6_STEP_Pin;
 80025be:	2320      	movs	r3, #32
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025ce:	2303      	movs	r3, #3
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(JOINT6_STEP_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d6:	4619      	mov	r1, r3
 80025d8:	4817      	ldr	r0, [pc, #92]	; (8002638 <HAL_TIM_MspPostInit+0x224>)
 80025da:	f000 fef5 	bl	80033c8 <HAL_GPIO_Init>
}
 80025de:	e023      	b.n	8002628 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM12)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <HAL_TIM_MspPostInit+0x244>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d11e      	bne.n	8002628 <HAL_TIM_MspPostInit+0x214>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a10      	ldr	r2, [pc, #64]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_TIM_MspPostInit+0x220>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = JOINT7_STEP_Pin;
 8002606:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002618:	2309      	movs	r3, #9
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(JOINT7_STEP_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002620:	4619      	mov	r1, r3
 8002622:	480e      	ldr	r0, [pc, #56]	; (800265c <HAL_TIM_MspPostInit+0x248>)
 8002624:	f000 fed0 	bl	80033c8 <HAL_GPIO_Init>
}
 8002628:	bf00      	nop
 800262a:	3738      	adds	r7, #56	; 0x38
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40010000 	.word	0x40010000
 8002634:	40023800 	.word	0x40023800
 8002638:	40021000 	.word	0x40021000
 800263c:	40020000 	.word	0x40020000
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800
 8002648:	40020c00 	.word	0x40020c00
 800264c:	40010400 	.word	0x40010400
 8002650:	40020800 	.word	0x40020800
 8002654:	40014000 	.word	0x40014000
 8002658:	40001800 	.word	0x40001800
 800265c:	40020400 	.word	0x40020400

08002660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a34      	ldr	r2, [pc, #208]	; (8002750 <HAL_UART_MspInit+0xf0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d161      	bne.n	8002746 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_UART_MspInit+0xf4>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a32      	ldr	r2, [pc, #200]	; (8002754 <HAL_UART_MspInit+0xf4>)
 800268c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_UART_MspInit+0xf4>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <HAL_UART_MspInit+0xf4>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <HAL_UART_MspInit+0xf4>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_UART_MspInit+0xf4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026ba:	2303      	movs	r3, #3
 80026bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026ca:	2308      	movs	r3, #8
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4820      	ldr	r0, [pc, #128]	; (8002758 <HAL_UART_MspInit+0xf8>)
 80026d6:	f000 fe77 	bl	80033c8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_UART_MspInit+0xfc>)
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <HAL_UART_MspInit+0x100>)
 80026de:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_UART_MspInit+0xfc>)
 80026e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026e6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_UART_MspInit+0xfc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_UART_MspInit+0xfc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_UART_MspInit+0xfc>)
 80026f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026fa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_UART_MspInit+0xfc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_UART_MspInit+0xfc>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_UART_MspInit+0xfc>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_UART_MspInit+0xfc>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_UART_MspInit+0xfc>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800271a:	4810      	ldr	r0, [pc, #64]	; (800275c <HAL_UART_MspInit+0xfc>)
 800271c:	f000 fac4 	bl	8002ca8 <HAL_DMA_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002726:	f7ff fccf 	bl	80020c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_UART_MspInit+0xfc>)
 800272e:	635a      	str	r2, [r3, #52]	; 0x34
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_UART_MspInit+0xfc>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2105      	movs	r1, #5
 800273a:	2034      	movs	r0, #52	; 0x34
 800273c:	f000 fa8a 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002740:	2034      	movs	r0, #52	; 0x34
 8002742:	f000 faa3 	bl	8002c8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40004c00 	.word	0x40004c00
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000
 800275c:	20004f9c 	.word	0x20004f9c
 8002760:	40026040 	.word	0x40026040

08002764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	; 0x30
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002774:	2200      	movs	r2, #0
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	2032      	movs	r0, #50	; 0x32
 800277a:	f000 fa6b 	bl	8002c54 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800277e:	2032      	movs	r0, #50	; 0x32
 8002780:	f000 fa84 	bl	8002c8c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_InitTick+0xa4>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <HAL_InitTick+0xa4>)
 800278e:	f043 0308 	orr.w	r3, r3, #8
 8002792:	6413      	str	r3, [r2, #64]	; 0x40
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_InitTick+0xa4>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027a0:	f107 0210 	add.w	r2, r7, #16
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 fc14 	bl	8003fd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027b0:	f001 fbea 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 80027b4:	4603      	mov	r3, r0
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <HAL_InitTick+0xa8>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	3b01      	subs	r3, #1
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_InitTick+0xac>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_InitTick+0xb0>)
 80027cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_InitTick+0xac>)
 80027d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027d4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_InitTick+0xac>)
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_InitTick+0xac>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_InitTick+0xac>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80027e8:	4809      	ldr	r0, [pc, #36]	; (8002810 <HAL_InitTick+0xac>)
 80027ea:	f001 fc8b 	bl	8004104 <HAL_TIM_Base_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80027f4:	4806      	ldr	r0, [pc, #24]	; (8002810 <HAL_InitTick+0xac>)
 80027f6:	f001 fcb0 	bl	800415a <HAL_TIM_Base_Start_IT>
 80027fa:	4603      	mov	r3, r0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3730      	adds	r7, #48	; 0x30
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	431bde83 	.word	0x431bde83
 8002810:	20005268 	.word	0x20005268
 8002814:	40000c00 	.word	0x40000c00

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <HardFault_Handler+0x4>

0800282c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <MemManage_Handler+0x4>

08002832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <BusFault_Handler+0x4>

08002838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <UsageFault_Handler+0x4>

0800283e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <DMA1_Stream2_IRQHandler+0x10>)
 8002852:	f000 fb51 	bl	8002ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20004f9c 	.word	0x20004f9c

08002860 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002864:	4803      	ldr	r0, [pc, #12]	; (8002874 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002866:	f001 fdef 	bl	8004448 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800286a:	4803      	ldr	r0, [pc, #12]	; (8002878 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800286c:	f001 fdec 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20005124 	.word	0x20005124
 8002878:	20005164 	.word	0x20005164

0800287c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
//		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
//
//		return;
//	}
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002882:	f001 fde1 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20005124 	.word	0x20005124

08002890 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
//		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
//		return;
//	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002896:	f001 fdd7 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20005124 	.word	0x20005124

080028a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <TIM1_CC_IRQHandler+0x10>)
 80028aa:	f001 fdcd 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20005124 	.word	0x20005124

080028b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <TIM2_IRQHandler+0x10>)
 80028be:	f001 fdc3 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200051e8 	.word	0x200051e8

080028cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <TIM3_IRQHandler+0x10>)
 80028d2:	f001 fdb9 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200050e0 	.word	0x200050e0

080028e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <TIM4_IRQHandler+0x10>)
 80028e6:	f001 fdaf 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20005098 	.word	0x20005098

080028f4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80028f8:	4803      	ldr	r0, [pc, #12]	; (8002908 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80028fa:	f001 fda5 	bl	8004448 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80028fe:	4803      	ldr	r0, [pc, #12]	; (800290c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002900:	f001 fda2 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20005058 	.word	0x20005058
 800290c:	20005228 	.word	0x20005228

08002910 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002916:	f001 fd97 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20005058 	.word	0x20005058

08002924 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800292a:	f001 fd8d 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20005058 	.word	0x20005058

08002938 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <TIM8_CC_IRQHandler+0x10>)
 800293e:	f001 fd83 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20005058 	.word	0x20005058

0800294c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <TIM5_IRQHandler+0x10>)
 8002952:	f001 fd79 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20005268 	.word	0x20005268

08002960 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <UART4_IRQHandler+0x10>)
 8002966:	f002 fe07 	bl	8005578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200051a8 	.word	0x200051a8

08002974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <_sbrk+0x5c>)
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <_sbrk+0x60>)
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <_sbrk+0x64>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <_sbrk+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d207      	bcs.n	80029b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a4:	f006 fa9e 	bl	8008ee4 <__errno>
 80029a8:	4602      	mov	r2, r0
 80029aa:	230c      	movs	r3, #12
 80029ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e009      	b.n	80029c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <_sbrk+0x64>)
 80029c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20020000 	.word	0x20020000
 80029d4:	00000400 	.word	0x00000400
 80029d8:	20000688 	.word	0x20000688
 80029dc:	200052f0 	.word	0x200052f0

080029e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <SystemInit+0x28>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <SystemInit+0x28>)
 80029ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SystemInit+0x28>)
 80029f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029fa:	609a      	str	r2, [r3, #8]
#endif
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a12:	e003      	b.n	8002a1c <LoopCopyDataInit>

08002a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a1a:	3104      	adds	r1, #4

08002a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a1c:	480b      	ldr	r0, [pc, #44]	; (8002a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a24:	d3f6      	bcc.n	8002a14 <CopyDataInit>
  ldr  r2, =_sbss
 8002a26:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a28:	e002      	b.n	8002a30 <LoopFillZerobss>

08002a2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a2c:	f842 3b04 	str.w	r3, [r2], #4

08002a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a34:	d3f9      	bcc.n	8002a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a36:	f7ff ffd3 	bl	80029e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f006 fa59 	bl	8008ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3e:	f7fd fd69 	bl	8000514 <main>
  bx  lr    
 8002a42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a48:	080095e0 	.word	0x080095e0
  ldr  r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a50:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8002a54:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8002a58:	200052f0 	.word	0x200052f0

08002a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC_IRQHandler>
	...

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_Init+0x40>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <HAL_Init+0x40>)
 8002a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_Init+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_Init+0x40>)
 8002a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_Init+0x40>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f000 f8d8 	bl	8002c3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff fe68 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a94:	f7ff fb20 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00

08002aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_IncTick+0x20>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x24>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_IncTick+0x24>)
 8002ab6:	6013      	str	r3, [r2, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	2000002c 	.word	0x2000002c
 8002ac8:	200052a8 	.word	0x200052a8

08002acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_GetTick+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	200052a8 	.word	0x200052a8

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	; (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff4c 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c66:	f7ff ff61 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002c6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f7ff ffb1 	bl	8002bd8 <NVIC_EncodePriority>
 8002c76:	4602      	mov	r2, r0
 8002c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff80 	bl	8002b84 <__NVIC_SetPriority>
}
 8002c84:	bf00      	nop
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff54 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff ff0a 	bl	8002acc <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e099      	b.n	8002df8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce4:	e00f      	b.n	8002d06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ce6:	f7ff fef1 	bl	8002acc <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d908      	bls.n	8002d06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e078      	b.n	8002df8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e8      	bne.n	8002ce6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <HAL_DMA_Init+0x158>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d107      	bne.n	8002d70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f023 0307 	bic.w	r3, r3, #7
 8002d86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d117      	bne.n	8002dca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00e      	beq.n	8002dca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fa91 	bl	80032d4 <DMA_CheckFifoParam>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e016      	b.n	8002df8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fa48 	bl	8003268 <DMA_CalcBaseAndBitshift>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	223f      	movs	r2, #63	; 0x3f
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	f010803f 	.word	0xf010803f

08002e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_DMA_Start_IT+0x26>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e040      	b.n	8002eac <HAL_DMA_Start_IT+0xa8>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d12f      	bne.n	8002e9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f9da 	bl	800320c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	223f      	movs	r2, #63	; 0x3f
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0216 	orr.w	r2, r2, #22
 8002e72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e005      	b.n	8002eaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00c      	b.n	8002eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2205      	movs	r2, #5
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f04:	4b92      	ldr	r3, [pc, #584]	; (8003150 <HAL_DMA_IRQHandler+0x258>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a92      	ldr	r2, [pc, #584]	; (8003154 <HAL_DMA_IRQHandler+0x25c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0a9b      	lsrs	r3, r3, #10
 8002f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	2208      	movs	r2, #8
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	2208      	movs	r2, #8
 8002f52:	409a      	lsls	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	2201      	movs	r2, #1
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	2201      	movs	r2, #1
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 0202 	orr.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f043 0204 	orr.w	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d043      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d03c      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	2210      	movs	r2, #16
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d018      	beq.n	800303a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d108      	bne.n	8003028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d024      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
 8003026:	e01f      	b.n	8003068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
 8003038:	e016      	b.n	8003068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0208 	bic.w	r2, r2, #8
 8003056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2220      	movs	r2, #32
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 808e 	beq.w	8003196 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8086 	beq.w	8003196 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	2220      	movs	r2, #32
 8003090:	409a      	lsls	r2, r3
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b05      	cmp	r3, #5
 80030a0:	d136      	bne.n	8003110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0216 	bic.w	r2, r2, #22
 80030b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x1da>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0208 	bic.w	r2, r2, #8
 80030e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	223f      	movs	r2, #63	; 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	2b00      	cmp	r3, #0
 8003104:	d07d      	beq.n	8003202 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
        }
        return;
 800310e:	e078      	b.n	8003202 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01c      	beq.n	8003158 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d108      	bne.n	800313e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	2b00      	cmp	r3, #0
 8003132:	d030      	beq.n	8003196 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e02b      	b.n	8003196 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d027      	beq.n	8003196 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
 800314e:	e022      	b.n	8003196 <HAL_DMA_IRQHandler+0x29e>
 8003150:	20000024 	.word	0x20000024
 8003154:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0210 	bic.w	r2, r2, #16
 8003174:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	2b00      	cmp	r3, #0
 800319c:	d032      	beq.n	8003204 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d022      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2205      	movs	r2, #5
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d307      	bcc.n	80031de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f2      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x2ca>
 80031dc:	e000      	b.n	80031e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
 8003200:	e000      	b.n	8003204 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003202:	bf00      	nop
    }
  }
}
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003228:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	d108      	bne.n	800324c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800324a:	e007      	b.n	800325c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3b10      	subs	r3, #16
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <DMA_CalcBaseAndBitshift+0x64>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d909      	bls.n	80032aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	659a      	str	r2, [r3, #88]	; 0x58
 80032a8:	e007      	b.n	80032ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	aaaaaaab 	.word	0xaaaaaaab
 80032d0:	08009498 	.word	0x08009498

080032d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11f      	bne.n	800332e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d855      	bhi.n	80033a0 <DMA_CheckFifoParam+0xcc>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <DMA_CheckFifoParam+0x28>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	0800331f 	.word	0x0800331f
 8003304:	0800330d 	.word	0x0800330d
 8003308:	080033a1 	.word	0x080033a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d045      	beq.n	80033a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331c:	e042      	b.n	80033a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003326:	d13f      	bne.n	80033a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332c:	e03c      	b.n	80033a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003336:	d121      	bne.n	800337c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d836      	bhi.n	80033ac <DMA_CheckFifoParam+0xd8>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <DMA_CheckFifoParam+0x70>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	08003355 	.word	0x08003355
 8003348:	0800335b 	.word	0x0800335b
 800334c:	08003355 	.word	0x08003355
 8003350:	0800336d 	.word	0x0800336d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e02f      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d024      	beq.n	80033b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336a:	e021      	b.n	80033b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003374:	d11e      	bne.n	80033b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800337a:	e01b      	b.n	80033b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <DMA_CheckFifoParam+0xb4>
 8003382:	2b03      	cmp	r3, #3
 8003384:	d003      	beq.n	800338e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003386:	e018      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      break;
 800338c:	e015      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
      break;
 800339e:	e00b      	b.n	80033b8 <DMA_CheckFifoParam+0xe4>
      break;
 80033a0:	bf00      	nop
 80033a2:	e00a      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      break;
 80033a4:	bf00      	nop
 80033a6:	e008      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      break;
 80033a8:	bf00      	nop
 80033aa:	e006      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      break;
 80033ac:	bf00      	nop
 80033ae:	e004      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      break;
 80033b0:	bf00      	nop
 80033b2:	e002      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      break;   
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      break;
 80033b8:	bf00      	nop
    }
  } 
  
  return status; 
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	e16b      	b.n	80036bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e4:	2201      	movs	r2, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f040 815a 	bne.w	80036b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d00b      	beq.n	8003422 <HAL_GPIO_Init+0x5a>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003416:	2b11      	cmp	r3, #17
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b12      	cmp	r3, #18
 8003420:	d130      	bne.n	8003484 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2203      	movs	r2, #3
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003458:	2201      	movs	r2, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 0201 	and.w	r2, r3, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2203      	movs	r2, #3
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0xfc>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b12      	cmp	r3, #18
 80034c2:	d123      	bne.n	800350c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	08da      	lsrs	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3208      	adds	r2, #8
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	2203      	movs	r2, #3
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80b4 	beq.w	80036b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	4b5f      	ldr	r3, [pc, #380]	; (80036d0 <HAL_GPIO_Init+0x308>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	4a5e      	ldr	r2, [pc, #376]	; (80036d0 <HAL_GPIO_Init+0x308>)
 8003558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355c:	6453      	str	r3, [r2, #68]	; 0x44
 800355e:	4b5c      	ldr	r3, [pc, #368]	; (80036d0 <HAL_GPIO_Init+0x308>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800356a:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_GPIO_Init+0x30c>)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3302      	adds	r3, #2
 8003572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	220f      	movs	r2, #15
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a51      	ldr	r2, [pc, #324]	; (80036d8 <HAL_GPIO_Init+0x310>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02b      	beq.n	80035ee <HAL_GPIO_Init+0x226>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a50      	ldr	r2, [pc, #320]	; (80036dc <HAL_GPIO_Init+0x314>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d025      	beq.n	80035ea <HAL_GPIO_Init+0x222>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_GPIO_Init+0x318>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01f      	beq.n	80035e6 <HAL_GPIO_Init+0x21e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4e      	ldr	r2, [pc, #312]	; (80036e4 <HAL_GPIO_Init+0x31c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d019      	beq.n	80035e2 <HAL_GPIO_Init+0x21a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4d      	ldr	r2, [pc, #308]	; (80036e8 <HAL_GPIO_Init+0x320>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_GPIO_Init+0x216>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4c      	ldr	r2, [pc, #304]	; (80036ec <HAL_GPIO_Init+0x324>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00d      	beq.n	80035da <HAL_GPIO_Init+0x212>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4b      	ldr	r2, [pc, #300]	; (80036f0 <HAL_GPIO_Init+0x328>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <HAL_GPIO_Init+0x20e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4a      	ldr	r2, [pc, #296]	; (80036f4 <HAL_GPIO_Init+0x32c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_GPIO_Init+0x20a>
 80035ce:	2307      	movs	r3, #7
 80035d0:	e00e      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035d2:	2308      	movs	r3, #8
 80035d4:	e00c      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035d6:	2306      	movs	r3, #6
 80035d8:	e00a      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035da:	2305      	movs	r3, #5
 80035dc:	e008      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035de:	2304      	movs	r3, #4
 80035e0:	e006      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035e2:	2303      	movs	r3, #3
 80035e4:	e004      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e002      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035ee:	2300      	movs	r3, #0
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f002 0203 	and.w	r2, r2, #3
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	4093      	lsls	r3, r2
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003600:	4934      	ldr	r1, [pc, #208]	; (80036d4 <HAL_GPIO_Init+0x30c>)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	3302      	adds	r3, #2
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_GPIO_Init+0x330>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003632:	4a31      	ldr	r2, [pc, #196]	; (80036f8 <HAL_GPIO_Init+0x330>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_GPIO_Init+0x330>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800365c:	4a26      	ldr	r2, [pc, #152]	; (80036f8 <HAL_GPIO_Init+0x330>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003662:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_GPIO_Init+0x330>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003686:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_GPIO_Init+0x330>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <HAL_GPIO_Init+0x330>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036b0:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_GPIO_Init+0x330>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3301      	adds	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	f67f ae90 	bls.w	80033e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	3724      	adds	r7, #36	; 0x24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40013800 	.word	0x40013800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40020400 	.word	0x40020400
 80036e0:	40020800 	.word	0x40020800
 80036e4:	40020c00 	.word	0x40020c00
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40021400 	.word	0x40021400
 80036f0:	40021800 	.word	0x40021800
 80036f4:	40021c00 	.word	0x40021c00
 80036f8:	40013c00 	.word	0x40013c00

080036fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e001      	b.n	800371e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
 8003738:	4613      	mov	r3, r2
 800373a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800373c:	787b      	ldrb	r3, [r7, #1]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003748:	e003      	b.n	8003752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	041a      	lsls	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	619a      	str	r2, [r3, #24]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e25b      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d075      	beq.n	800386a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377e:	4ba3      	ldr	r3, [pc, #652]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b04      	cmp	r3, #4
 8003788:	d00c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378a:	4ba0      	ldr	r3, [pc, #640]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003792:	2b08      	cmp	r3, #8
 8003794:	d112      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4b9d      	ldr	r3, [pc, #628]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a2:	d10b      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	4b99      	ldr	r3, [pc, #612]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d05b      	beq.n	8003868 <HAL_RCC_OscConfig+0x108>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d157      	bne.n	8003868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e236      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x74>
 80037c6:	4b91      	ldr	r3, [pc, #580]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a90      	ldr	r2, [pc, #576]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e01d      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x98>
 80037de:	4b8b      	ldr	r3, [pc, #556]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a8a      	ldr	r2, [pc, #552]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b88      	ldr	r3, [pc, #544]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a87      	ldr	r2, [pc, #540]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037f8:	4b84      	ldr	r3, [pc, #528]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a83      	ldr	r2, [pc, #524]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b81      	ldr	r3, [pc, #516]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a80      	ldr	r2, [pc, #512]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 800380a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d013      	beq.n	8003840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7ff f958 	bl	8002acc <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003820:	f7ff f954 	bl	8002acc <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1fb      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b76      	ldr	r3, [pc, #472]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0xc0>
 800383e:	e014      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7ff f944 	bl	8002acc <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7ff f940 	bl	8002acc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1e7      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	4b6c      	ldr	r3, [pc, #432]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0xe8>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d063      	beq.n	800393e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003876:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003882:	4b62      	ldr	r3, [pc, #392]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800388a:	2b08      	cmp	r3, #8
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b5f      	ldr	r3, [pc, #380]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	4b5c      	ldr	r3, [pc, #368]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x152>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1bb      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b56      	ldr	r3, [pc, #344]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4952      	ldr	r1, [pc, #328]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	e03a      	b.n	800393e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <HAL_RCC_OscConfig+0x2b0>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7ff f8f9 	bl	8002acc <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038de:	f7ff f8f5 	bl	8002acc <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e19c      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	4b46      	ldr	r3, [pc, #280]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4940      	ldr	r1, [pc, #256]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <HAL_RCC_OscConfig+0x2b0>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7ff f8d8 	bl	8002acc <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003920:	f7ff f8d4 	bl	8002acc <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e17b      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d030      	beq.n	80039ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b30      	ldr	r3, [pc, #192]	; (8003a14 <HAL_RCC_OscConfig+0x2b4>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7ff f8b8 	bl	8002acc <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003960:	f7ff f8b4 	bl	8002acc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e15b      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x200>
 800397e:	e015      	b.n	80039ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_OscConfig+0x2b4>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003986:	f7ff f8a1 	bl	8002acc <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398e:	f7ff f89d 	bl	8002acc <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e144      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80a0 	beq.w	8003afa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039be:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x2b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d121      	bne.n	8003a3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_RCC_OscConfig+0x2b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <HAL_RCC_OscConfig+0x2b8>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a02:	f7ff f863 	bl	8002acc <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a08:	e011      	b.n	8003a2e <HAL_RCC_OscConfig+0x2ce>
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	42470000 	.word	0x42470000
 8003a14:	42470e80 	.word	0x42470e80
 8003a18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7ff f856 	bl	8002acc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0fd      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b81      	ldr	r3, [pc, #516]	; (8003c34 <HAL_RCC_OscConfig+0x4d4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d106      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2f0>
 8003a42:	4b7d      	ldr	r3, [pc, #500]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a7c      	ldr	r2, [pc, #496]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCC_OscConfig+0x32a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x312>
 8003a58:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a76      	ldr	r2, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
 8003a64:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a73      	ldr	r2, [pc, #460]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x32a>
 8003a72:	4b71      	ldr	r3, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a70      	ldr	r2, [pc, #448]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	4b6e      	ldr	r3, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a6d      	ldr	r2, [pc, #436]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d015      	beq.n	8003abe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7ff f81b 	bl	8002acc <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7ff f817 	bl	8002acc <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0bc      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	4b61      	ldr	r3, [pc, #388]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ee      	beq.n	8003a9a <HAL_RCC_OscConfig+0x33a>
 8003abc:	e014      	b.n	8003ae8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7ff f805 	bl	8002acc <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7ff f801 	bl	8002acc <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e0a6      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003adc:	4b56      	ldr	r3, [pc, #344]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ee      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aee:	4b52      	ldr	r3, [pc, #328]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a51      	ldr	r2, [pc, #324]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8092 	beq.w	8003c28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b04:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d05c      	beq.n	8003bca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d141      	bne.n	8003b9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b18:	4b48      	ldr	r3, [pc, #288]	; (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fe ffd5 	bl	8002acc <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b26:	f7fe ffd1 	bl	8002acc <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e078      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b38:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	019b      	lsls	r3, r3, #6
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	4933      	ldr	r1, [pc, #204]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6e:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe ffaa 	bl	8002acc <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fe ffa6 	bl	8002acc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e04d      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x41c>
 8003b9a:	e045      	b.n	8003c28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9c:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe ff93 	bl	8002acc <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fe ff8f 	bl	8002acc <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e036      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x44a>
 8003bc8:	e02e      	b.n	8003c28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e029      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <HAL_RCC_OscConfig+0x4d8>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d11c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d115      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bfe:	4013      	ands	r3, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10d      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40007000 	.word	0x40007000
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	42470060 	.word	0x42470060

08003c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0cc      	b.n	8003dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c54:	4b68      	ldr	r3, [pc, #416]	; (8003df8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d90c      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b65      	ldr	r3, [pc, #404]	; (8003df8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b63      	ldr	r3, [pc, #396]	; (8003df8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0b8      	b.n	8003dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c94:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a58      	ldr	r2, [pc, #352]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cac:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a52      	ldr	r2, [pc, #328]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb8:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	494d      	ldr	r1, [pc, #308]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d044      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cde:	4b47      	ldr	r3, [pc, #284]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d119      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e07f      	b.n	8003dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	4b3f      	ldr	r3, [pc, #252]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e06f      	b.n	8003dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e067      	b.n	8003dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1e:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f023 0203 	bic.w	r2, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4934      	ldr	r1, [pc, #208]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d30:	f7fe fecc 	bl	8002acc <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d38:	f7fe fec8 	bl	8002acc <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e04f      	b.n	8003dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 020c 	and.w	r2, r3, #12
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d1eb      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d60:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d20c      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e032      	b.n	8003dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4916      	ldr	r1, [pc, #88]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	490e      	ldr	r1, [pc, #56]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dc6:	f000 f821 	bl	8003e0c <HAL_RCC_GetSysClockFreq>
 8003dca:	4601      	mov	r1, r0
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	5cd3      	ldrb	r3, [r2, r3]
 8003dda:	fa21 f303 	lsr.w	r3, r1, r3
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fcbc 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40023c00 	.word	0x40023c00
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	08009480 	.word	0x08009480
 8003e04:	20000024 	.word	0x20000024
 8003e08:	20000028 	.word	0x20000028

08003e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e22:	4b50      	ldr	r3, [pc, #320]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d007      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0x32>
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d008      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x38>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 808d 	bne.w	8003f52 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e3a:	60bb      	str	r3, [r7, #8]
       break;
 8003e3c:	e08c      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3e:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e40:	60bb      	str	r3, [r7, #8]
      break;
 8003e42:	e089      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e44:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4e:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d023      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5a:	4b42      	ldr	r3, [pc, #264]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	f04f 0400 	mov.w	r4, #0
 8003e64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	ea03 0501 	and.w	r5, r3, r1
 8003e70:	ea04 0602 	and.w	r6, r4, r2
 8003e74:	4a3d      	ldr	r2, [pc, #244]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e76:	fb02 f106 	mul.w	r1, r2, r6
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	fb02 f205 	mul.w	r2, r2, r5
 8003e80:	440a      	add	r2, r1
 8003e82:	493a      	ldr	r1, [pc, #232]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e84:	fba5 0101 	umull	r0, r1, r5, r1
 8003e88:	1853      	adds	r3, r2, r1
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f04f 0400 	mov.w	r4, #0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4623      	mov	r3, r4
 8003e96:	f7fc f9ad 	bl	80001f4 <__aeabi_uldivmod>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e049      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea2:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	099b      	lsrs	r3, r3, #6
 8003ea8:	f04f 0400 	mov.w	r4, #0
 8003eac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	ea03 0501 	and.w	r5, r3, r1
 8003eb8:	ea04 0602 	and.w	r6, r4, r2
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	f04f 0400 	mov.w	r4, #0
 8003ec8:	0154      	lsls	r4, r2, #5
 8003eca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ece:	014b      	lsls	r3, r1, #5
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	1b49      	subs	r1, r1, r5
 8003ed6:	eb62 0206 	sbc.w	r2, r2, r6
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	f04f 0400 	mov.w	r4, #0
 8003ee2:	0194      	lsls	r4, r2, #6
 8003ee4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ee8:	018b      	lsls	r3, r1, #6
 8003eea:	1a5b      	subs	r3, r3, r1
 8003eec:	eb64 0402 	sbc.w	r4, r4, r2
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	00e2      	lsls	r2, r4, #3
 8003efa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003efe:	00d9      	lsls	r1, r3, #3
 8003f00:	460b      	mov	r3, r1
 8003f02:	4614      	mov	r4, r2
 8003f04:	195b      	adds	r3, r3, r5
 8003f06:	eb44 0406 	adc.w	r4, r4, r6
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	02a2      	lsls	r2, r4, #10
 8003f14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f18:	0299      	lsls	r1, r3, #10
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4614      	mov	r4, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	4621      	mov	r1, r4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f04f 0400 	mov.w	r4, #0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	f7fc f962 	bl	80001f4 <__aeabi_uldivmod>
 8003f30:	4603      	mov	r3, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	0c1b      	lsrs	r3, r3, #16
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	3301      	adds	r3, #1
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	60bb      	str	r3, [r7, #8]
      break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003f54:	60bb      	str	r3, [r7, #8]
      break;
 8003f56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f58:	68bb      	ldr	r3, [r7, #8]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	017d7840 	.word	0x017d7840

08003f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000024 	.word	0x20000024

08003f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f8c:	f7ff fff0 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003f90:	4601      	mov	r1, r0
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0a9b      	lsrs	r3, r3, #10
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4a03      	ldr	r2, [pc, #12]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9e:	5cd3      	ldrb	r3, [r2, r3]
 8003fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	08009490 	.word	0x08009490

08003fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fb4:	f7ff ffdc 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4601      	mov	r1, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	0b5b      	lsrs	r3, r3, #13
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4a03      	ldr	r2, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc6:	5cd3      	ldrb	r3, [r2, r3]
 8003fc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	08009490 	.word	0x08009490

08003fd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <HAL_RCC_GetClockConfig+0x5c>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCC_GetClockConfig+0x5c>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_RCC_GetClockConfig+0x5c>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	08db      	lsrs	r3, r3, #3
 8004012:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800401a:	4b07      	ldr	r3, [pc, #28]	; (8004038 <HAL_RCC_GetClockConfig+0x60>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	40023c00 	.word	0x40023c00

0800403c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e056      	b.n	80040fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7fe f861 	bl	8002130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004084:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	ea42 0103 	orr.w	r1, r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	f003 0104 	and.w	r1, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e01d      	b.n	8004152 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe f868 	bl	8002200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f000 fc24 	bl	8004990 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d007      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e01d      	b.n	80041f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d106      	bne.n	80041ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f815 	bl	80041f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f000 fbd5 	bl	8004990 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d841      	bhi.n	80042a0 <HAL_TIM_PWM_Start_IT+0x94>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_TIM_PWM_Start_IT+0x18>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004259 	.word	0x08004259
 8004228:	080042a1 	.word	0x080042a1
 800422c:	080042a1 	.word	0x080042a1
 8004230:	080042a1 	.word	0x080042a1
 8004234:	0800426b 	.word	0x0800426b
 8004238:	080042a1 	.word	0x080042a1
 800423c:	080042a1 	.word	0x080042a1
 8004240:	080042a1 	.word	0x080042a1
 8004244:	0800427d 	.word	0x0800427d
 8004248:	080042a1 	.word	0x080042a1
 800424c:	080042a1 	.word	0x080042a1
 8004250:	080042a1 	.word	0x080042a1
 8004254:	0800428f 	.word	0x0800428f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0202 	orr.w	r2, r2, #2
 8004266:	60da      	str	r2, [r3, #12]
      break;
 8004268:	e01b      	b.n	80042a2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0204 	orr.w	r2, r2, #4
 8004278:	60da      	str	r2, [r3, #12]
      break;
 800427a:	e012      	b.n	80042a2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0208 	orr.w	r2, r2, #8
 800428a:	60da      	str	r2, [r3, #12]
      break;
 800428c:	e009      	b.n	80042a2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0210 	orr.w	r2, r2, #16
 800429c:	60da      	str	r2, [r3, #12]
      break;
 800429e:	e000      	b.n	80042a2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80042a0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2201      	movs	r2, #1
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fe5a 	bl	8004f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a15      	ldr	r2, [pc, #84]	; (800430c <HAL_TIM_PWM_Start_IT+0x100>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_TIM_PWM_Start_IT+0xb8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a14      	ldr	r2, [pc, #80]	; (8004310 <HAL_TIM_PWM_Start_IT+0x104>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_PWM_Start_IT+0xbc>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_TIM_PWM_Start_IT+0xbe>
 80042c8:	2300      	movs	r3, #0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b06      	cmp	r3, #6
 80042ee:	d007      	beq.n	8004300 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40010400 	.word	0x40010400

08004314 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b0c      	cmp	r3, #12
 8004322:	d841      	bhi.n	80043a8 <HAL_TIM_PWM_Stop_IT+0x94>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <HAL_TIM_PWM_Stop_IT+0x18>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	08004361 	.word	0x08004361
 8004330:	080043a9 	.word	0x080043a9
 8004334:	080043a9 	.word	0x080043a9
 8004338:	080043a9 	.word	0x080043a9
 800433c:	08004373 	.word	0x08004373
 8004340:	080043a9 	.word	0x080043a9
 8004344:	080043a9 	.word	0x080043a9
 8004348:	080043a9 	.word	0x080043a9
 800434c:	08004385 	.word	0x08004385
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043a9 	.word	0x080043a9
 8004358:	080043a9 	.word	0x080043a9
 800435c:	08004397 	.word	0x08004397
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0202 	bic.w	r2, r2, #2
 800436e:	60da      	str	r2, [r3, #12]
      break;
 8004370:	e01b      	b.n	80043aa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0204 	bic.w	r2, r2, #4
 8004380:	60da      	str	r2, [r3, #12]
      break;
 8004382:	e012      	b.n	80043aa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0208 	bic.w	r2, r2, #8
 8004392:	60da      	str	r2, [r3, #12]
      break;
 8004394:	e009      	b.n	80043aa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0210 	bic.w	r2, r2, #16
 80043a4:	60da      	str	r2, [r3, #12]
      break;
 80043a6:	e000      	b.n	80043aa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80043a8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2200      	movs	r2, #0
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fdd6 	bl	8004f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a20      	ldr	r2, [pc, #128]	; (8004440 <HAL_TIM_PWM_Stop_IT+0x12c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_TIM_PWM_Stop_IT+0xb8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <HAL_TIM_PWM_Stop_IT+0x130>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d101      	bne.n	80043d0 <HAL_TIM_PWM_Stop_IT+0xbc>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_TIM_PWM_Stop_IT+0xbe>
 80043d0:	2300      	movs	r3, #0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d017      	beq.n	8004406 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a1a      	ldr	r2, [r3, #32]
 80043dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <HAL_TIM_PWM_Stop_IT+0xf2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	f240 4344 	movw	r3, #1092	; 0x444
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <HAL_TIM_PWM_Stop_IT+0xf2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_TIM_PWM_Stop_IT+0x122>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6a1a      	ldr	r2, [r3, #32]
 800441c:	f240 4344 	movw	r3, #1092	; 0x444
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <HAL_TIM_PWM_Stop_IT+0x122>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40010000 	.word	0x40010000
 8004444:	40010400 	.word	0x40010400

08004448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0202 	mvn.w	r2, #2
 8004474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa6b 	bl	8004966 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa5d 	bl	8004952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc fdd3 	bl	8001044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0204 	mvn.w	r2, #4
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa41 	bl	8004966 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa33 	bl	8004952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7fc fda9 	bl	8001044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b08      	cmp	r3, #8
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b08      	cmp	r3, #8
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0208 	mvn.w	r2, #8
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2204      	movs	r2, #4
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa17 	bl	8004966 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa09 	bl	8004952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fc fd7f 	bl	8001044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d122      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b10      	cmp	r3, #16
 8004566:	d11b      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0210 	mvn.w	r2, #16
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2208      	movs	r2, #8
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f9ed 	bl	8004966 <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9df 	bl	8004952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7fc fd55 	bl	8001044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10e      	bne.n	80045cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d107      	bne.n	80045cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0201 	mvn.w	r2, #1
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd fd6c 	bl	80020a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fe2a 	bl	800524c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9ab 	bl	800497a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d10e      	bne.n	8004650 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b20      	cmp	r3, #32
 800463e:	d107      	bne.n	8004650 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0220 	mvn.w	r2, #32
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fdf4 	bl	8005238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800466e:	2302      	movs	r3, #2
 8004670:	e0b4      	b.n	80047dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	f200 809f 	bhi.w	80047c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046c5 	.word	0x080046c5
 8004694:	080047c9 	.word	0x080047c9
 8004698:	080047c9 	.word	0x080047c9
 800469c:	080047c9 	.word	0x080047c9
 80046a0:	08004705 	.word	0x08004705
 80046a4:	080047c9 	.word	0x080047c9
 80046a8:	080047c9 	.word	0x080047c9
 80046ac:	080047c9 	.word	0x080047c9
 80046b0:	08004747 	.word	0x08004747
 80046b4:	080047c9 	.word	0x080047c9
 80046b8:	080047c9 	.word	0x080047c9
 80046bc:	080047c9 	.word	0x080047c9
 80046c0:	08004787 	.word	0x08004787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fa00 	bl	8004ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0204 	bic.w	r2, r2, #4
 80046ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6999      	ldr	r1, [r3, #24]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	619a      	str	r2, [r3, #24]
      break;
 8004702:	e062      	b.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fa50 	bl	8004bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6999      	ldr	r1, [r3, #24]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	021a      	lsls	r2, r3, #8
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	619a      	str	r2, [r3, #24]
      break;
 8004744:	e041      	b.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 faa5 	bl	8004c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0208 	orr.w	r2, r2, #8
 8004760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0204 	bic.w	r2, r2, #4
 8004770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69d9      	ldr	r1, [r3, #28]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	61da      	str	r2, [r3, #28]
      break;
 8004784:	e021      	b.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 faf9 	bl	8004d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69d9      	ldr	r1, [r3, #28]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	021a      	lsls	r2, r3, #8
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	61da      	str	r2, [r3, #28]
      break;
 80047c6:	e000      	b.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80047c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_ConfigClockSource+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0a6      	b.n	800494a <HAL_TIM_ConfigClockSource+0x166>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800481a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004822:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d067      	beq.n	8004904 <HAL_TIM_ConfigClockSource+0x120>
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d80b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x6c>
 8004838:	2b10      	cmp	r3, #16
 800483a:	d073      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x140>
 800483c:	2b10      	cmp	r3, #16
 800483e:	d802      	bhi.n	8004846 <HAL_TIM_ConfigClockSource+0x62>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d06f      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004844:	e078      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004846:	2b20      	cmp	r3, #32
 8004848:	d06c      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x140>
 800484a:	2b30      	cmp	r3, #48	; 0x30
 800484c:	d06a      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800484e:	e073      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004850:	2b70      	cmp	r3, #112	; 0x70
 8004852:	d00d      	beq.n	8004870 <HAL_TIM_ConfigClockSource+0x8c>
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d804      	bhi.n	8004862 <HAL_TIM_ConfigClockSource+0x7e>
 8004858:	2b50      	cmp	r3, #80	; 0x50
 800485a:	d033      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0xe0>
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d041      	beq.n	80048e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004860:	e06a      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d066      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x152>
 8004868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800486c:	d017      	beq.n	800489e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800486e:	e063      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	6899      	ldr	r1, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f000 fb50 	bl	8004f24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004892:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
      break;
 800489c:	e04c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f000 fb39 	bl	8004f24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c0:	609a      	str	r2, [r3, #8]
      break;
 80048c2:	e039      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	461a      	mov	r2, r3
 80048d2:	f000 faad 	bl	8004e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2150      	movs	r1, #80	; 0x50
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fb06 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 80048e2:	e029      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	461a      	mov	r2, r3
 80048f2:	f000 facc 	bl	8004e8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2160      	movs	r1, #96	; 0x60
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 faf6 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004902:	e019      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6859      	ldr	r1, [r3, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	461a      	mov	r2, r3
 8004912:	f000 fa8d 	bl	8004e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2140      	movs	r1, #64	; 0x40
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fae6 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004922:	e009      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f000 fadd 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004934:	e000      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a40      	ldr	r2, [pc, #256]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d00f      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3d      	ldr	r2, [pc, #244]	; (8004aa8 <TIM_Base_SetConfig+0x118>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00b      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <TIM_Base_SetConfig+0x11c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <TIM_Base_SetConfig+0x120>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3a      	ldr	r2, [pc, #232]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d108      	bne.n	80049e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2f      	ldr	r2, [pc, #188]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02b      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d027      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2c      	ldr	r2, [pc, #176]	; (8004aa8 <TIM_Base_SetConfig+0x118>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d023      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2b      	ldr	r2, [pc, #172]	; (8004aac <TIM_Base_SetConfig+0x11c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01f      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2a      	ldr	r2, [pc, #168]	; (8004ab0 <TIM_Base_SetConfig+0x120>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01b      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d017      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <TIM_Base_SetConfig+0x128>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a27      	ldr	r2, [pc, #156]	; (8004abc <TIM_Base_SetConfig+0x12c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00f      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <TIM_Base_SetConfig+0x130>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a25      	ldr	r2, [pc, #148]	; (8004ac4 <TIM_Base_SetConfig+0x134>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d007      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <TIM_Base_SetConfig+0x138>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <TIM_Base_SetConfig+0x13c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d103      	bne.n	8004a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	615a      	str	r2, [r3, #20]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40010400 	.word	0x40010400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800
 8004ac4:	40001800 	.word	0x40001800
 8004ac8:	40001c00 	.word	0x40001c00
 8004acc:	40002000 	.word	0x40002000

08004ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0302 	bic.w	r3, r3, #2
 8004b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <TIM_OC1_SetConfig+0xd8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC1_SetConfig+0x64>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <TIM_OC1_SetConfig+0xdc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10c      	bne.n	8004b4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0308 	bic.w	r3, r3, #8
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <TIM_OC1_SetConfig+0xd8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC1_SetConfig+0x8e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a14      	ldr	r2, [pc, #80]	; (8004bac <TIM_OC1_SetConfig+0xdc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d111      	bne.n	8004b82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	621a      	str	r2, [r3, #32]
}
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40010400 	.word	0x40010400

08004bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 0210 	bic.w	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <TIM_OC2_SetConfig+0xe4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_OC2_SetConfig+0x68>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <TIM_OC2_SetConfig+0xe8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10d      	bne.n	8004c34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <TIM_OC2_SetConfig+0xe4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC2_SetConfig+0x94>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <TIM_OC2_SetConfig+0xe8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d113      	bne.n	8004c6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400

08004c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <TIM_OC3_SetConfig+0xe0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_OC3_SetConfig+0x66>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a20      	ldr	r2, [pc, #128]	; (8004d80 <TIM_OC3_SetConfig+0xe4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10d      	bne.n	8004d1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <TIM_OC3_SetConfig+0xe0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC3_SetConfig+0x92>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <TIM_OC3_SetConfig+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d113      	bne.n	8004d56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40010400 	.word	0x40010400

08004d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	031b      	lsls	r3, r3, #12
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <TIM_OC4_SetConfig+0xa4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_OC4_SetConfig+0x68>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <TIM_OC4_SetConfig+0xa8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d109      	bne.n	8004e00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40010400 	.word	0x40010400

08004e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 030a 	bic.w	r3, r3, #10
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b087      	sub	sp, #28
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0210 	bic.w	r2, r3, #16
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f043 0307 	orr.w	r3, r3, #7
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	609a      	str	r2, [r3, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2201      	movs	r2, #1
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	401a      	ands	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d00d      	beq.n	8004fda <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d014      	beq.n	8004fec <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d000      	beq.n	8004fc8 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8004fc6:	e01a      	b.n	8004ffe <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0202 	bic.w	r2, r2, #2
 8004fd6:	60da      	str	r2, [r3, #12]
      break;
 8004fd8:	e011      	b.n	8004ffe <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0204 	bic.w	r2, r2, #4
 8004fe8:	60da      	str	r2, [r3, #12]
      break;
 8004fea:	e008      	b.n	8004ffe <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0208 	bic.w	r2, r2, #8
 8004ffa:	60da      	str	r2, [r3, #12]
      break;
 8004ffc:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f92a 	bl	8005260 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	f240 4344 	movw	r3, #1092	; 0x444
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d107      	bne.n	8005030 <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800502e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6a1a      	ldr	r2, [r3, #32]
 8005036:	f241 1311 	movw	r3, #4369	; 0x1111
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10f      	bne.n	8005060 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a1a      	ldr	r2, [r3, #32]
 8005046:	f240 4344 	movw	r3, #1092	; 0x444
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800505e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1a      	ldr	r2, [r3, #32]
 8005066:	f241 1311 	movw	r3, #4369	; 0x1111
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10f      	bne.n	8005090 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a1a      	ldr	r2, [r3, #32]
 8005076:	f240 4344 	movw	r3, #1092	; 0x444
 800507a:	4013      	ands	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d107      	bne.n	8005090 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e05a      	b.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d022      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005100:	d01d      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1d      	ldr	r2, [pc, #116]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d018      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a18      	ldr	r2, [pc, #96]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d009      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a17      	ldr	r2, [pc, #92]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a15      	ldr	r2, [pc, #84]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10c      	bne.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	4313      	orrs	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40010000 	.word	0x40010000
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40010400 	.word	0x40010400
 800518c:	40014000 	.word	0x40014000
 8005190:	40001800 	.word	0x40001800

08005194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e03d      	b.n	800522c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2204      	movs	r2, #4
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	fa01 f303 	lsl.w	r3, r1, r3
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e03f      	b.n	800533c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fd f9c5 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2224      	movs	r2, #36	; 0x24
 80052da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fc6e 	bl	8005bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005302:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005312:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005322:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b20      	cmp	r3, #32
 8005362:	f040 8083 	bne.w	800546c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_UART_Transmit+0x2e>
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e07b      	b.n	800546e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_UART_Transmit+0x40>
 8005380:	2302      	movs	r3, #2
 8005382:	e074      	b.n	800546e <HAL_UART_Transmit+0x12a>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2221      	movs	r2, #33	; 0x21
 8005396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800539a:	f7fd fb97 	bl	8002acc <HAL_GetTick>
 800539e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053b4:	e042      	b.n	800543c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053cc:	d122      	bne.n	8005414 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2200      	movs	r2, #0
 80053d6:	2180      	movs	r1, #128	; 0x80
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 fa77 	bl	80058cc <UART_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e042      	b.n	800546e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053fa:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	3302      	adds	r3, #2
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	e017      	b.n	800543c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3301      	adds	r3, #1
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	e013      	b.n	800543c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2200      	movs	r2, #0
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fa54 	bl	80058cc <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e01f      	b.n	800546e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	60ba      	str	r2, [r7, #8]
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1b7      	bne.n	80053b6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2200      	movs	r2, #0
 800544e:	2140      	movs	r1, #64	; 0x40
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 fa3b 	bl	80058cc <UART_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e006      	b.n	800546e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	e000      	b.n	800546e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800546c:	2302      	movs	r3, #2
  }
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b20      	cmp	r3, #32
 8005490:	d166      	bne.n	8005560 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_UART_Receive_DMA+0x26>
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e05f      	b.n	8005562 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_UART_Receive_DMA+0x38>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e058      	b.n	8005562 <HAL_UART_Receive_DMA+0xea>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2222      	movs	r2, #34	; 0x22
 80054ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <HAL_UART_Receive_DMA+0xf4>)
 80054d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	4a24      	ldr	r2, [pc, #144]	; (8005570 <HAL_UART_Receive_DMA+0xf8>)
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e6:	4a23      	ldr	r2, [pc, #140]	; (8005574 <HAL_UART_Receive_DMA+0xfc>)
 80054e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ee:	2200      	movs	r2, #0
 80054f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3304      	adds	r3, #4
 8005502:	4619      	mov	r1, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	f7fd fc7b 	bl	8002e04 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800553a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800555a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	080057b5 	.word	0x080057b5
 8005570:	0800581d 	.word	0x0800581d
 8005574:	08005839 	.word	0x08005839

08005578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005598:	2300      	movs	r3, #0
 800559a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10d      	bne.n	80055ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_UART_IRQHandler+0x52>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa82 	bl	8005acc <UART_Receive_IT>
      return;
 80055c8:	e0d1      	b.n	800576e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80b0 	beq.w	8005732 <HAL_UART_IRQHandler+0x1ba>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_UART_IRQHandler+0x70>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 80a5 	beq.w	8005732 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_UART_IRQHandler+0x90>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	f043 0201 	orr.w	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_UART_IRQHandler+0xb0>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005620:	f043 0202 	orr.w	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_UART_IRQHandler+0xd0>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005640:	f043 0204 	orr.w	r2, r3, #4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00f      	beq.n	8005672 <HAL_UART_IRQHandler+0xfa>
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <HAL_UART_IRQHandler+0xee>
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	f043 0208 	orr.w	r2, r3, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d078      	beq.n	800576c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <HAL_UART_IRQHandler+0x11c>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa1c 	bl	8005acc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <HAL_UART_IRQHandler+0x144>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d031      	beq.n	8005720 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f965 	bl	800598c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d123      	bne.n	8005718 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ec:	4a21      	ldr	r2, [pc, #132]	; (8005774 <HAL_UART_IRQHandler+0x1fc>)
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fd fbdd 	bl	8002eb4 <HAL_DMA_Abort_IT>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d016      	beq.n	800572e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800570a:	4610      	mov	r0, r2
 800570c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570e:	e00e      	b.n	800572e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f845 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005716:	e00a      	b.n	800572e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f841 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571e:	e006      	b.n	800572e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f83d 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800572c:	e01e      	b.n	800576c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572e:	bf00      	nop
    return;
 8005730:	e01c      	b.n	800576c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_UART_IRQHandler+0x1d6>
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f952 	bl	80059f0 <UART_Transmit_IT>
    return;
 800574c:	e00f      	b.n	800576e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_UART_IRQHandler+0x1f6>
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f99a 	bl	8005a9c <UART_EndTransmit_IT>
    return;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <HAL_UART_IRQHandler+0x1f6>
    return;
 800576c:	bf00      	nop
  }
}
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	080059c9 	.word	0x080059c9

08005778 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11e      	bne.n	800580e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005804:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f7fb ff60 	bl	80016d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff ffae 	bl	800578c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b80      	cmp	r3, #128	; 0x80
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b21      	cmp	r3, #33	; 0x21
 800586a:	d108      	bne.n	800587e <UART_DMAError+0x46>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2200      	movs	r2, #0
 8005876:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005878:	68b8      	ldr	r0, [r7, #8]
 800587a:	f000 f871 	bl	8005960 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b22      	cmp	r3, #34	; 0x22
 800589e:	d108      	bne.n	80058b2 <UART_DMAError+0x7a>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2200      	movs	r2, #0
 80058aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058ac:	68b8      	ldr	r0, [r7, #8]
 80058ae:	f000 f86d 	bl	800598c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	f043 0210 	orr.w	r2, r3, #16
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058be:	68b8      	ldr	r0, [r7, #8]
 80058c0:	f7ff ff6e 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	4613      	mov	r3, r2
 80058da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058dc:	e02c      	b.n	8005938 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d028      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <UART_WaitOnFlagUntilTimeout+0x30>
 80058ec:	f7fd f8ee 	bl	8002acc <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d21d      	bcs.n	8005938 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800590a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e00f      	b.n	8005958 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	429a      	cmp	r2, r3
 8005954:	d0c3      	beq.n	80058de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005976:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fedc 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b21      	cmp	r3, #33	; 0x21
 8005a02:	d144      	bne.n	8005a8e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0c:	d11a      	bne.n	8005a44 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a22:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	1c9a      	adds	r2, r3, #2
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]
 8005a36:	e00e      	b.n	8005a56 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]
 8005a42:	e008      	b.n	8005a56 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	1c59      	adds	r1, r3, #1
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6211      	str	r1, [r2, #32]
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	4619      	mov	r1, r3
 8005a64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10f      	bne.n	8005a8a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e000      	b.n	8005a90 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff fe5b 	bl	8005778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b22      	cmp	r3, #34	; 0x22
 8005ade:	d171      	bne.n	8005bc4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae8:	d123      	bne.n	8005b32 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10e      	bne.n	8005b16 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28
 8005b14:	e029      	b.n	8005b6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b30:	e01b      	b.n	8005b6a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6858      	ldr	r0, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	1c59      	adds	r1, r3, #1
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6291      	str	r1, [r2, #40]	; 0x28
 8005b4a:	b2c2      	uxtb	r2, r0
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e00c      	b.n	8005b6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	1c58      	adds	r0, r3, #1
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	6288      	str	r0, [r1, #40]	; 0x28
 8005b62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4619      	mov	r1, r3
 8005b78:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d120      	bne.n	8005bc0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0220 	bic.w	r2, r2, #32
 8005b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695a      	ldr	r2, [r3, #20]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fb fd8c 	bl	80016d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e002      	b.n	8005bc6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e000      	b.n	8005bc6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c12:	f023 030c 	bic.w	r3, r3, #12
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3e:	f040 818b 	bne.w	8005f58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4ac1      	ldr	r2, [pc, #772]	; (8005f4c <UART_SetConfig+0x37c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d005      	beq.n	8005c58 <UART_SetConfig+0x88>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4abf      	ldr	r2, [pc, #764]	; (8005f50 <UART_SetConfig+0x380>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	f040 80bd 	bne.w	8005dd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c58:	f7fe f9aa 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 8005c5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	461d      	mov	r5, r3
 8005c62:	f04f 0600 	mov.w	r6, #0
 8005c66:	46a8      	mov	r8, r5
 8005c68:	46b1      	mov	r9, r6
 8005c6a:	eb18 0308 	adds.w	r3, r8, r8
 8005c6e:	eb49 0409 	adc.w	r4, r9, r9
 8005c72:	4698      	mov	r8, r3
 8005c74:	46a1      	mov	r9, r4
 8005c76:	eb18 0805 	adds.w	r8, r8, r5
 8005c7a:	eb49 0906 	adc.w	r9, r9, r6
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c92:	4688      	mov	r8, r1
 8005c94:	4691      	mov	r9, r2
 8005c96:	eb18 0005 	adds.w	r0, r8, r5
 8005c9a:	eb49 0106 	adc.w	r1, r9, r6
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	461d      	mov	r5, r3
 8005ca4:	f04f 0600 	mov.w	r6, #0
 8005ca8:	196b      	adds	r3, r5, r5
 8005caa:	eb46 0406 	adc.w	r4, r6, r6
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4623      	mov	r3, r4
 8005cb2:	f7fa fa9f 	bl	80001f4 <__aeabi_uldivmod>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4ba5      	ldr	r3, [pc, #660]	; (8005f54 <UART_SetConfig+0x384>)
 8005cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	461d      	mov	r5, r3
 8005ccc:	f04f 0600 	mov.w	r6, #0
 8005cd0:	46a9      	mov	r9, r5
 8005cd2:	46b2      	mov	sl, r6
 8005cd4:	eb19 0309 	adds.w	r3, r9, r9
 8005cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8005cdc:	4699      	mov	r9, r3
 8005cde:	46a2      	mov	sl, r4
 8005ce0:	eb19 0905 	adds.w	r9, r9, r5
 8005ce4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ce8:	f04f 0100 	mov.w	r1, #0
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cfc:	4689      	mov	r9, r1
 8005cfe:	4692      	mov	sl, r2
 8005d00:	eb19 0005 	adds.w	r0, r9, r5
 8005d04:	eb4a 0106 	adc.w	r1, sl, r6
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	461d      	mov	r5, r3
 8005d0e:	f04f 0600 	mov.w	r6, #0
 8005d12:	196b      	adds	r3, r5, r5
 8005d14:	eb46 0406 	adc.w	r4, r6, r6
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	f7fa fa6a 	bl	80001f4 <__aeabi_uldivmod>
 8005d20:	4603      	mov	r3, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	461a      	mov	r2, r3
 8005d26:	4b8b      	ldr	r3, [pc, #556]	; (8005f54 <UART_SetConfig+0x384>)
 8005d28:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2164      	movs	r1, #100	; 0x64
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	3332      	adds	r3, #50	; 0x32
 8005d3a:	4a86      	ldr	r2, [pc, #536]	; (8005f54 <UART_SetConfig+0x384>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d48:	4498      	add	r8, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	461d      	mov	r5, r3
 8005d4e:	f04f 0600 	mov.w	r6, #0
 8005d52:	46a9      	mov	r9, r5
 8005d54:	46b2      	mov	sl, r6
 8005d56:	eb19 0309 	adds.w	r3, r9, r9
 8005d5a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d5e:	4699      	mov	r9, r3
 8005d60:	46a2      	mov	sl, r4
 8005d62:	eb19 0905 	adds.w	r9, r9, r5
 8005d66:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d6a:	f04f 0100 	mov.w	r1, #0
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d7e:	4689      	mov	r9, r1
 8005d80:	4692      	mov	sl, r2
 8005d82:	eb19 0005 	adds.w	r0, r9, r5
 8005d86:	eb4a 0106 	adc.w	r1, sl, r6
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	461d      	mov	r5, r3
 8005d90:	f04f 0600 	mov.w	r6, #0
 8005d94:	196b      	adds	r3, r5, r5
 8005d96:	eb46 0406 	adc.w	r4, r6, r6
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	f7fa fa29 	bl	80001f4 <__aeabi_uldivmod>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	461a      	mov	r2, r3
 8005da8:	4b6a      	ldr	r3, [pc, #424]	; (8005f54 <UART_SetConfig+0x384>)
 8005daa:	fba3 1302 	umull	r1, r3, r3, r2
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	2164      	movs	r1, #100	; 0x64
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	3332      	adds	r3, #50	; 0x32
 8005dbc:	4a65      	ldr	r2, [pc, #404]	; (8005f54 <UART_SetConfig+0x384>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	f003 0207 	and.w	r2, r3, #7
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4442      	add	r2, r8
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	e26f      	b.n	80062b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dd2:	f7fe f8d9 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 8005dd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	461d      	mov	r5, r3
 8005ddc:	f04f 0600 	mov.w	r6, #0
 8005de0:	46a8      	mov	r8, r5
 8005de2:	46b1      	mov	r9, r6
 8005de4:	eb18 0308 	adds.w	r3, r8, r8
 8005de8:	eb49 0409 	adc.w	r4, r9, r9
 8005dec:	4698      	mov	r8, r3
 8005dee:	46a1      	mov	r9, r4
 8005df0:	eb18 0805 	adds.w	r8, r8, r5
 8005df4:	eb49 0906 	adc.w	r9, r9, r6
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e0c:	4688      	mov	r8, r1
 8005e0e:	4691      	mov	r9, r2
 8005e10:	eb18 0005 	adds.w	r0, r8, r5
 8005e14:	eb49 0106 	adc.w	r1, r9, r6
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	f04f 0600 	mov.w	r6, #0
 8005e22:	196b      	adds	r3, r5, r5
 8005e24:	eb46 0406 	adc.w	r4, r6, r6
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	f7fa f9e2 	bl	80001f4 <__aeabi_uldivmod>
 8005e30:	4603      	mov	r3, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	461a      	mov	r2, r3
 8005e36:	4b47      	ldr	r3, [pc, #284]	; (8005f54 <UART_SetConfig+0x384>)
 8005e38:	fba3 2302 	umull	r2, r3, r3, r2
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	461d      	mov	r5, r3
 8005e46:	f04f 0600 	mov.w	r6, #0
 8005e4a:	46a9      	mov	r9, r5
 8005e4c:	46b2      	mov	sl, r6
 8005e4e:	eb19 0309 	adds.w	r3, r9, r9
 8005e52:	eb4a 040a 	adc.w	r4, sl, sl
 8005e56:	4699      	mov	r9, r3
 8005e58:	46a2      	mov	sl, r4
 8005e5a:	eb19 0905 	adds.w	r9, r9, r5
 8005e5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e76:	4689      	mov	r9, r1
 8005e78:	4692      	mov	sl, r2
 8005e7a:	eb19 0005 	adds.w	r0, r9, r5
 8005e7e:	eb4a 0106 	adc.w	r1, sl, r6
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	461d      	mov	r5, r3
 8005e88:	f04f 0600 	mov.w	r6, #0
 8005e8c:	196b      	adds	r3, r5, r5
 8005e8e:	eb46 0406 	adc.w	r4, r6, r6
 8005e92:	461a      	mov	r2, r3
 8005e94:	4623      	mov	r3, r4
 8005e96:	f7fa f9ad 	bl	80001f4 <__aeabi_uldivmod>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <UART_SetConfig+0x384>)
 8005ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	2164      	movs	r1, #100	; 0x64
 8005eaa:	fb01 f303 	mul.w	r3, r1, r3
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	3332      	adds	r3, #50	; 0x32
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <UART_SetConfig+0x384>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ec2:	4498      	add	r8, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	461d      	mov	r5, r3
 8005ec8:	f04f 0600 	mov.w	r6, #0
 8005ecc:	46a9      	mov	r9, r5
 8005ece:	46b2      	mov	sl, r6
 8005ed0:	eb19 0309 	adds.w	r3, r9, r9
 8005ed4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ed8:	4699      	mov	r9, r3
 8005eda:	46a2      	mov	sl, r4
 8005edc:	eb19 0905 	adds.w	r9, r9, r5
 8005ee0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ee4:	f04f 0100 	mov.w	r1, #0
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ef8:	4689      	mov	r9, r1
 8005efa:	4692      	mov	sl, r2
 8005efc:	eb19 0005 	adds.w	r0, r9, r5
 8005f00:	eb4a 0106 	adc.w	r1, sl, r6
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	461d      	mov	r5, r3
 8005f0a:	f04f 0600 	mov.w	r6, #0
 8005f0e:	196b      	adds	r3, r5, r5
 8005f10:	eb46 0406 	adc.w	r4, r6, r6
 8005f14:	461a      	mov	r2, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	f7fa f96c 	bl	80001f4 <__aeabi_uldivmod>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	461a      	mov	r2, r3
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <UART_SetConfig+0x384>)
 8005f24:	fba3 1302 	umull	r1, r3, r3, r2
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	2164      	movs	r1, #100	; 0x64
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	3332      	adds	r3, #50	; 0x32
 8005f36:	4a07      	ldr	r2, [pc, #28]	; (8005f54 <UART_SetConfig+0x384>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	f003 0207 	and.w	r2, r3, #7
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4442      	add	r2, r8
 8005f48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005f4a:	e1b2      	b.n	80062b2 <UART_SetConfig+0x6e2>
 8005f4c:	40011000 	.word	0x40011000
 8005f50:	40011400 	.word	0x40011400
 8005f54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4ad7      	ldr	r2, [pc, #860]	; (80062bc <UART_SetConfig+0x6ec>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d005      	beq.n	8005f6e <UART_SetConfig+0x39e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4ad6      	ldr	r2, [pc, #856]	; (80062c0 <UART_SetConfig+0x6f0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	f040 80d1 	bne.w	8006110 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f6e:	f7fe f81f 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 8005f72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	469a      	mov	sl, r3
 8005f78:	f04f 0b00 	mov.w	fp, #0
 8005f7c:	46d0      	mov	r8, sl
 8005f7e:	46d9      	mov	r9, fp
 8005f80:	eb18 0308 	adds.w	r3, r8, r8
 8005f84:	eb49 0409 	adc.w	r4, r9, r9
 8005f88:	4698      	mov	r8, r3
 8005f8a:	46a1      	mov	r9, r4
 8005f8c:	eb18 080a 	adds.w	r8, r8, sl
 8005f90:	eb49 090b 	adc.w	r9, r9, fp
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fa0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fa4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fa8:	4688      	mov	r8, r1
 8005faa:	4691      	mov	r9, r2
 8005fac:	eb1a 0508 	adds.w	r5, sl, r8
 8005fb0:	eb4b 0609 	adc.w	r6, fp, r9
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	f04f 0400 	mov.w	r4, #0
 8005fc6:	0094      	lsls	r4, r2, #2
 8005fc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fcc:	008b      	lsls	r3, r1, #2
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	f7fa f90d 	bl	80001f4 <__aeabi_uldivmod>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	460c      	mov	r4, r1
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4bb8      	ldr	r3, [pc, #736]	; (80062c4 <UART_SetConfig+0x6f4>)
 8005fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	469b      	mov	fp, r3
 8005ff0:	f04f 0c00 	mov.w	ip, #0
 8005ff4:	46d9      	mov	r9, fp
 8005ff6:	46e2      	mov	sl, ip
 8005ff8:	eb19 0309 	adds.w	r3, r9, r9
 8005ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8006000:	4699      	mov	r9, r3
 8006002:	46a2      	mov	sl, r4
 8006004:	eb19 090b 	adds.w	r9, r9, fp
 8006008:	eb4a 0a0c 	adc.w	sl, sl, ip
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800601c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006020:	4689      	mov	r9, r1
 8006022:	4692      	mov	sl, r2
 8006024:	eb1b 0509 	adds.w	r5, fp, r9
 8006028:	eb4c 060a 	adc.w	r6, ip, sl
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4619      	mov	r1, r3
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	f04f 0400 	mov.w	r4, #0
 800603e:	0094      	lsls	r4, r2, #2
 8006040:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006044:	008b      	lsls	r3, r1, #2
 8006046:	461a      	mov	r2, r3
 8006048:	4623      	mov	r3, r4
 800604a:	4628      	mov	r0, r5
 800604c:	4631      	mov	r1, r6
 800604e:	f7fa f8d1 	bl	80001f4 <__aeabi_uldivmod>
 8006052:	4603      	mov	r3, r0
 8006054:	460c      	mov	r4, r1
 8006056:	461a      	mov	r2, r3
 8006058:	4b9a      	ldr	r3, [pc, #616]	; (80062c4 <UART_SetConfig+0x6f4>)
 800605a:	fba3 1302 	umull	r1, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2164      	movs	r1, #100	; 0x64
 8006062:	fb01 f303 	mul.w	r3, r1, r3
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	3332      	adds	r3, #50	; 0x32
 800606c:	4a95      	ldr	r2, [pc, #596]	; (80062c4 <UART_SetConfig+0x6f4>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006078:	4498      	add	r8, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	469b      	mov	fp, r3
 800607e:	f04f 0c00 	mov.w	ip, #0
 8006082:	46d9      	mov	r9, fp
 8006084:	46e2      	mov	sl, ip
 8006086:	eb19 0309 	adds.w	r3, r9, r9
 800608a:	eb4a 040a 	adc.w	r4, sl, sl
 800608e:	4699      	mov	r9, r3
 8006090:	46a2      	mov	sl, r4
 8006092:	eb19 090b 	adds.w	r9, r9, fp
 8006096:	eb4a 0a0c 	adc.w	sl, sl, ip
 800609a:	f04f 0100 	mov.w	r1, #0
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060ae:	4689      	mov	r9, r1
 80060b0:	4692      	mov	sl, r2
 80060b2:	eb1b 0509 	adds.w	r5, fp, r9
 80060b6:	eb4c 060a 	adc.w	r6, ip, sl
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	4619      	mov	r1, r3
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	f04f 0400 	mov.w	r4, #0
 80060cc:	0094      	lsls	r4, r2, #2
 80060ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060d2:	008b      	lsls	r3, r1, #2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4623      	mov	r3, r4
 80060d8:	4628      	mov	r0, r5
 80060da:	4631      	mov	r1, r6
 80060dc:	f7fa f88a 	bl	80001f4 <__aeabi_uldivmod>
 80060e0:	4603      	mov	r3, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	461a      	mov	r2, r3
 80060e6:	4b77      	ldr	r3, [pc, #476]	; (80062c4 <UART_SetConfig+0x6f4>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	3332      	adds	r3, #50	; 0x32
 80060fa:	4a72      	ldr	r2, [pc, #456]	; (80062c4 <UART_SetConfig+0x6f4>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	f003 020f 	and.w	r2, r3, #15
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4442      	add	r2, r8
 800610c:	609a      	str	r2, [r3, #8]
 800610e:	e0d0      	b.n	80062b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fd ff3a 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 8006114:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	469a      	mov	sl, r3
 800611a:	f04f 0b00 	mov.w	fp, #0
 800611e:	46d0      	mov	r8, sl
 8006120:	46d9      	mov	r9, fp
 8006122:	eb18 0308 	adds.w	r3, r8, r8
 8006126:	eb49 0409 	adc.w	r4, r9, r9
 800612a:	4698      	mov	r8, r3
 800612c:	46a1      	mov	r9, r4
 800612e:	eb18 080a 	adds.w	r8, r8, sl
 8006132:	eb49 090b 	adc.w	r9, r9, fp
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006142:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006146:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800614a:	4688      	mov	r8, r1
 800614c:	4691      	mov	r9, r2
 800614e:	eb1a 0508 	adds.w	r5, sl, r8
 8006152:	eb4b 0609 	adc.w	r6, fp, r9
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4619      	mov	r1, r3
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	f04f 0400 	mov.w	r4, #0
 8006168:	0094      	lsls	r4, r2, #2
 800616a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800616e:	008b      	lsls	r3, r1, #2
 8006170:	461a      	mov	r2, r3
 8006172:	4623      	mov	r3, r4
 8006174:	4628      	mov	r0, r5
 8006176:	4631      	mov	r1, r6
 8006178:	f7fa f83c 	bl	80001f4 <__aeabi_uldivmod>
 800617c:	4603      	mov	r3, r0
 800617e:	460c      	mov	r4, r1
 8006180:	461a      	mov	r2, r3
 8006182:	4b50      	ldr	r3, [pc, #320]	; (80062c4 <UART_SetConfig+0x6f4>)
 8006184:	fba3 2302 	umull	r2, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	469b      	mov	fp, r3
 8006192:	f04f 0c00 	mov.w	ip, #0
 8006196:	46d9      	mov	r9, fp
 8006198:	46e2      	mov	sl, ip
 800619a:	eb19 0309 	adds.w	r3, r9, r9
 800619e:	eb4a 040a 	adc.w	r4, sl, sl
 80061a2:	4699      	mov	r9, r3
 80061a4:	46a2      	mov	sl, r4
 80061a6:	eb19 090b 	adds.w	r9, r9, fp
 80061aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061ae:	f04f 0100 	mov.w	r1, #0
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061c2:	4689      	mov	r9, r1
 80061c4:	4692      	mov	sl, r2
 80061c6:	eb1b 0509 	adds.w	r5, fp, r9
 80061ca:	eb4c 060a 	adc.w	r6, ip, sl
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4619      	mov	r1, r3
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	f04f 0400 	mov.w	r4, #0
 80061e0:	0094      	lsls	r4, r2, #2
 80061e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061e6:	008b      	lsls	r3, r1, #2
 80061e8:	461a      	mov	r2, r3
 80061ea:	4623      	mov	r3, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	4631      	mov	r1, r6
 80061f0:	f7fa f800 	bl	80001f4 <__aeabi_uldivmod>
 80061f4:	4603      	mov	r3, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	461a      	mov	r2, r3
 80061fa:	4b32      	ldr	r3, [pc, #200]	; (80062c4 <UART_SetConfig+0x6f4>)
 80061fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	2164      	movs	r1, #100	; 0x64
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	3332      	adds	r3, #50	; 0x32
 800620e:	4a2d      	ldr	r2, [pc, #180]	; (80062c4 <UART_SetConfig+0x6f4>)
 8006210:	fba2 2303 	umull	r2, r3, r2, r3
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800621a:	4498      	add	r8, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	469b      	mov	fp, r3
 8006220:	f04f 0c00 	mov.w	ip, #0
 8006224:	46d9      	mov	r9, fp
 8006226:	46e2      	mov	sl, ip
 8006228:	eb19 0309 	adds.w	r3, r9, r9
 800622c:	eb4a 040a 	adc.w	r4, sl, sl
 8006230:	4699      	mov	r9, r3
 8006232:	46a2      	mov	sl, r4
 8006234:	eb19 090b 	adds.w	r9, r9, fp
 8006238:	eb4a 0a0c 	adc.w	sl, sl, ip
 800623c:	f04f 0100 	mov.w	r1, #0
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006248:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800624c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006250:	4689      	mov	r9, r1
 8006252:	4692      	mov	sl, r2
 8006254:	eb1b 0509 	adds.w	r5, fp, r9
 8006258:	eb4c 060a 	adc.w	r6, ip, sl
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4619      	mov	r1, r3
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	f04f 0400 	mov.w	r4, #0
 800626e:	0094      	lsls	r4, r2, #2
 8006270:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006274:	008b      	lsls	r3, r1, #2
 8006276:	461a      	mov	r2, r3
 8006278:	4623      	mov	r3, r4
 800627a:	4628      	mov	r0, r5
 800627c:	4631      	mov	r1, r6
 800627e:	f7f9 ffb9 	bl	80001f4 <__aeabi_uldivmod>
 8006282:	4603      	mov	r3, r0
 8006284:	460c      	mov	r4, r1
 8006286:	461a      	mov	r2, r3
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <UART_SetConfig+0x6f4>)
 800628a:	fba3 1302 	umull	r1, r3, r3, r2
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	2164      	movs	r1, #100	; 0x64
 8006292:	fb01 f303 	mul.w	r3, r1, r3
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	3332      	adds	r3, #50	; 0x32
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <UART_SetConfig+0x6f4>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	f003 020f 	and.w	r2, r3, #15
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4442      	add	r2, r8
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	e7ff      	b.n	80062b2 <UART_SetConfig+0x6e2>
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062bc:	40011000 	.word	0x40011000
 80062c0:	40011400 	.word	0x40011400
 80062c4:	51eb851f 	.word	0x51eb851f

080062c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80062cc:	bf00      	nop
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062de:	f3ef 8305 	mrs	r3, IPSR
 80062e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80062e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10f      	bne.n	800630a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ea:	f3ef 8310 	mrs	r3, PRIMASK
 80062ee:	607b      	str	r3, [r7, #4]
  return(result);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d105      	bne.n	8006302 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062f6:	f3ef 8311 	mrs	r3, BASEPRI
 80062fa:	603b      	str	r3, [r7, #0]
  return(result);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d007      	beq.n	8006312 <osKernelInitialize+0x3a>
 8006302:	4b0e      	ldr	r3, [pc, #56]	; (800633c <osKernelInitialize+0x64>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d103      	bne.n	8006312 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800630a:	f06f 0305 	mvn.w	r3, #5
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e00c      	b.n	800632c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006312:	4b0a      	ldr	r3, [pc, #40]	; (800633c <osKernelInitialize+0x64>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d105      	bne.n	8006326 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800631a:	4b08      	ldr	r3, [pc, #32]	; (800633c <osKernelInitialize+0x64>)
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e002      	b.n	800632c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006326:	f04f 33ff 	mov.w	r3, #4294967295
 800632a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800632c:	68fb      	ldr	r3, [r7, #12]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	2000068c 	.word	0x2000068c

08006340 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006346:	f3ef 8305 	mrs	r3, IPSR
 800634a:	60bb      	str	r3, [r7, #8]
  return(result);
 800634c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10f      	bne.n	8006372 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006352:	f3ef 8310 	mrs	r3, PRIMASK
 8006356:	607b      	str	r3, [r7, #4]
  return(result);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d105      	bne.n	800636a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800635e:	f3ef 8311 	mrs	r3, BASEPRI
 8006362:	603b      	str	r3, [r7, #0]
  return(result);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <osKernelStart+0x3a>
 800636a:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <osKernelStart+0x68>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d103      	bne.n	800637a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006372:	f06f 0305 	mvn.w	r3, #5
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	e010      	b.n	800639c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <osKernelStart+0x68>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d109      	bne.n	8006396 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006382:	f7ff ffa1 	bl	80062c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <osKernelStart+0x68>)
 8006388:	2202      	movs	r2, #2
 800638a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800638c:	f001 f936 	bl	80075fc <vTaskStartScheduler>
      stat = osOK;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e002      	b.n	800639c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006396:	f04f 33ff 	mov.w	r3, #4294967295
 800639a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	2000068c 	.word	0x2000068c

080063ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b090      	sub	sp, #64	; 0x40
 80063b0:	af04      	add	r7, sp, #16
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063bc:	f3ef 8305 	mrs	r3, IPSR
 80063c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80063c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 808f 	bne.w	80064e8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ca:	f3ef 8310 	mrs	r3, PRIMASK
 80063ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d105      	bne.n	80063e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063d6:	f3ef 8311 	mrs	r3, BASEPRI
 80063da:	617b      	str	r3, [r7, #20]
  return(result);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <osThreadNew+0x3e>
 80063e2:	4b44      	ldr	r3, [pc, #272]	; (80064f4 <osThreadNew+0x148>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d07e      	beq.n	80064e8 <osThreadNew+0x13c>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d07b      	beq.n	80064e8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80063f4:	2318      	movs	r3, #24
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006400:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d045      	beq.n	8006494 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <osThreadNew+0x6a>
        name = attr->name;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <osThreadNew+0x90>
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	2b38      	cmp	r3, #56	; 0x38
 800642e:	d805      	bhi.n	800643c <osThreadNew+0x90>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <osThreadNew+0x94>
        return (NULL);
 800643c:	2300      	movs	r3, #0
 800643e:	e054      	b.n	80064ea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	089b      	lsrs	r3, r3, #2
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00e      	beq.n	8006476 <osThreadNew+0xca>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b5b      	cmp	r3, #91	; 0x5b
 800645e:	d90a      	bls.n	8006476 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <osThreadNew+0xca>
        mem = 1;
 8006470:	2301      	movs	r3, #1
 8006472:	623b      	str	r3, [r7, #32]
 8006474:	e010      	b.n	8006498 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10c      	bne.n	8006498 <osThreadNew+0xec>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d108      	bne.n	8006498 <osThreadNew+0xec>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <osThreadNew+0xec>
          mem = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	e001      	b.n	8006498 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d110      	bne.n	80064c0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064a6:	9202      	str	r2, [sp, #8]
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fecf 	bl	8007258 <xTaskCreateStatic>
 80064ba:	4603      	mov	r3, r0
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	e013      	b.n	80064e8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d110      	bne.n	80064e8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	f107 0310 	add.w	r3, r7, #16
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 ff17 	bl	800730c <xTaskCreate>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d001      	beq.n	80064e8 <osThreadNew+0x13c>
          hTask = NULL;
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064e8:	693b      	ldr	r3, [r7, #16]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3730      	adds	r7, #48	; 0x30
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	2000068c 	.word	0x2000068c

080064f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006500:	f3ef 8305 	mrs	r3, IPSR
 8006504:	613b      	str	r3, [r7, #16]
  return(result);
 8006506:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10f      	bne.n	800652c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800650c:	f3ef 8310 	mrs	r3, PRIMASK
 8006510:	60fb      	str	r3, [r7, #12]
  return(result);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d105      	bne.n	8006524 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006518:	f3ef 8311 	mrs	r3, BASEPRI
 800651c:	60bb      	str	r3, [r7, #8]
  return(result);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <osDelay+0x3c>
 8006524:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <osDelay+0x58>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d103      	bne.n	8006534 <osDelay+0x3c>
    stat = osErrorISR;
 800652c:	f06f 0305 	mvn.w	r3, #5
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	e007      	b.n	8006544 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <osDelay+0x4c>
      vTaskDelay(ticks);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 f828 	bl	8007594 <vTaskDelay>
    }
  }

  return (stat);
 8006544:	697b      	ldr	r3, [r7, #20]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	2000068c 	.word	0x2000068c

08006554 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b08c      	sub	sp, #48	; 0x30
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006560:	2300      	movs	r3, #0
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006564:	f3ef 8305 	mrs	r3, IPSR
 8006568:	61bb      	str	r3, [r7, #24]
  return(result);
 800656a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800656c:	2b00      	cmp	r3, #0
 800656e:	d170      	bne.n	8006652 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006570:	f3ef 8310 	mrs	r3, PRIMASK
 8006574:	617b      	str	r3, [r7, #20]
  return(result);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800657c:	f3ef 8311 	mrs	r3, BASEPRI
 8006580:	613b      	str	r3, [r7, #16]
  return(result);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <osMessageQueueNew+0x3c>
 8006588:	4b34      	ldr	r3, [pc, #208]	; (800665c <osMessageQueueNew+0x108>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d060      	beq.n	8006652 <osMessageQueueNew+0xfe>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d05d      	beq.n	8006652 <osMessageQueueNew+0xfe>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d05a      	beq.n	8006652 <osMessageQueueNew+0xfe>
    mem = -1;
 800659c:	f04f 33ff 	mov.w	r3, #4294967295
 80065a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d029      	beq.n	80065fc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d012      	beq.n	80065d6 <osMessageQueueNew+0x82>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b4f      	cmp	r3, #79	; 0x4f
 80065b6:	d90e      	bls.n	80065d6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	fb01 f303 	mul.w	r3, r1, r3
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d302      	bcc.n	80065d6 <osMessageQueueNew+0x82>
        mem = 1;
 80065d0:	2301      	movs	r3, #1
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	e014      	b.n	8006600 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d110      	bne.n	8006600 <osMessageQueueNew+0xac>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10c      	bne.n	8006600 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d108      	bne.n	8006600 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <osMessageQueueNew+0xac>
          mem = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	e001      	b.n	8006600 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10c      	bne.n	8006620 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6899      	ldr	r1, [r3, #8]
 800660e:	2300      	movs	r3, #0
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	460b      	mov	r3, r1
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f972 	bl	8006900 <xQueueGenericCreateStatic>
 800661c:	6278      	str	r0, [r7, #36]	; 0x24
 800661e:	e008      	b.n	8006632 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d105      	bne.n	8006632 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006626:	2200      	movs	r2, #0
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f9db 	bl	80069e6 <xQueueGenericCreate>
 8006630:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <osMessageQueueNew+0xf2>
        name = attr->name;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e001      	b.n	800664a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800664a:	69f9      	ldr	r1, [r7, #28]
 800664c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800664e:	f000 fda7 	bl	80071a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006654:	4618      	mov	r0, r3
 8006656:	3728      	adds	r7, #40	; 0x28
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	2000068c 	.word	0x2000068c

08006660 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a07      	ldr	r2, [pc, #28]	; (800668c <vApplicationGetIdleTaskMemory+0x2c>)
 8006670:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4a06      	ldr	r2, [pc, #24]	; (8006690 <vApplicationGetIdleTaskMemory+0x30>)
 8006676:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2280      	movs	r2, #128	; 0x80
 800667c:	601a      	str	r2, [r3, #0]
}
 800667e:	bf00      	nop
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000690 	.word	0x20000690
 8006690:	200006ec 	.word	0x200006ec

08006694 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a07      	ldr	r2, [pc, #28]	; (80066c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80066a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4a06      	ldr	r2, [pc, #24]	; (80066c4 <vApplicationGetTimerTaskMemory+0x30>)
 80066aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066b2:	601a      	str	r2, [r3, #0]
}
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	200008ec 	.word	0x200008ec
 80066c4:	20000948 	.word	0x20000948

080066c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f103 0208 	add.w	r2, r3, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f103 0208 	add.w	r2, r3, #8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f103 0208 	add.w	r2, r3, #8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d103      	bne.n	800678a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e00c      	b.n	80067a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3308      	adds	r3, #8
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e002      	b.n	8006798 <vListInsert+0x2e>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d2f6      	bcs.n	8006792 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	601a      	str	r2, [r3, #0]
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6892      	ldr	r2, [r2, #8]
 80067f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6852      	ldr	r2, [r2, #4]
 80067fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	429a      	cmp	r2, r3
 8006806:	d103      	bne.n	8006810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	1e5a      	subs	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	e7fe      	b.n	8006856 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006858:	f002 f850 	bl	80088fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	441a      	add	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006888:	3b01      	subs	r3, #1
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	441a      	add	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	22ff      	movs	r2, #255	; 0xff
 800689c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	22ff      	movs	r2, #255	; 0xff
 80068a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d114      	bne.n	80068d8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01a      	beq.n	80068ec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3310      	adds	r3, #16
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 f91e 	bl	8007afc <xTaskRemoveFromEventList>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d012      	beq.n	80068ec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068c6:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <xQueueGenericReset+0xcc>)
 80068c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	e009      	b.n	80068ec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3310      	adds	r3, #16
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff fef3 	bl	80066c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3324      	adds	r3, #36	; 0x24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff feee 	bl	80066c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068ec:	f002 f834 	bl	8008958 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068f0:	2301      	movs	r3, #1
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08e      	sub	sp, #56	; 0x38
 8006904:	af02      	add	r7, sp, #8
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <xQueueGenericCreateStatic+0x28>
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
 8006926:	e7fe      	b.n	8006926 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <xQueueGenericCreateStatic+0x42>
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
 8006940:	e7fe      	b.n	8006940 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <xQueueGenericCreateStatic+0x4e>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <xQueueGenericCreateStatic+0x52>
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <xQueueGenericCreateStatic+0x54>
 8006952:	2300      	movs	r3, #0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d109      	bne.n	800696c <xQueueGenericCreateStatic+0x6c>
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	e7fe      	b.n	800696a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <xQueueGenericCreateStatic+0x78>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <xQueueGenericCreateStatic+0x7c>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <xQueueGenericCreateStatic+0x7e>
 800697c:	2300      	movs	r3, #0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <xQueueGenericCreateStatic+0x96>
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	e7fe      	b.n	8006994 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006996:	2350      	movs	r3, #80	; 0x50
 8006998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d009      	beq.n	80069b4 <xQueueGenericCreateStatic+0xb4>
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	e7fe      	b.n	80069b2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00d      	beq.n	80069dc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	4613      	mov	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f844 	bl	8006a64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069de:	4618      	mov	r0, r3
 80069e0:	3730      	adds	r7, #48	; 0x30
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b08a      	sub	sp, #40	; 0x28
 80069ea:	af02      	add	r7, sp, #8
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	4613      	mov	r3, r2
 80069f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <xQueueGenericCreate+0x28>
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	e004      	b.n	8006a24 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	fb02 f303 	mul.w	r3, r2, r3
 8006a22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	3350      	adds	r3, #80	; 0x50
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f002 f881 	bl	8008b30 <pvPortMalloc>
 8006a2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d011      	beq.n	8006a5a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	3350      	adds	r3, #80	; 0x50
 8006a3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a48:	79fa      	ldrb	r2, [r7, #7]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f805 	bl	8006a64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3720      	adds	r7, #32
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e002      	b.n	8006a86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a92:	2101      	movs	r1, #1
 8006a94:	69b8      	ldr	r0, [r7, #24]
 8006a96:	f7ff fecb 	bl	8006830 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	78fa      	ldrb	r2, [r7, #3]
 8006a9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08e      	sub	sp, #56	; 0x38
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aba:	2300      	movs	r3, #0
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <xQueueGenericSend+0x30>
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ada:	e7fe      	b.n	8006ada <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <xQueueGenericSend+0x3e>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <xQueueGenericSend+0x42>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <xQueueGenericSend+0x44>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d109      	bne.n	8006b08 <xQueueGenericSend+0x5c>
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
 8006b06:	e7fe      	b.n	8006b06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d103      	bne.n	8006b16 <xQueueGenericSend+0x6a>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <xQueueGenericSend+0x6e>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <xQueueGenericSend+0x70>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d109      	bne.n	8006b34 <xQueueGenericSend+0x88>
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	623b      	str	r3, [r7, #32]
 8006b32:	e7fe      	b.n	8006b32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b34:	f001 f998 	bl	8007e68 <xTaskGetSchedulerState>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <xQueueGenericSend+0x98>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <xQueueGenericSend+0x9c>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <xQueueGenericSend+0x9e>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <xQueueGenericSend+0xb6>
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b62:	f001 fecb 	bl	80088fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <xQueueGenericSend+0xcc>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d129      	bne.n	8006bcc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b7e:	f000 f9ff 	bl	8006f80 <prvCopyDataToQueue>
 8006b82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	3324      	adds	r3, #36	; 0x24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 ffb3 	bl	8007afc <xTaskRemoveFromEventList>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d013      	beq.n	8006bc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b9c:	4b3f      	ldr	r3, [pc, #252]	; (8006c9c <xQueueGenericSend+0x1f0>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	e00a      	b.n	8006bc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bb4:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <xQueueGenericSend+0x1f0>)
 8006bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bc4:	f001 fec8 	bl	8008958 <vPortExitCritical>
				return pdPASS;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e063      	b.n	8006c94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bd2:	f001 fec1 	bl	8008958 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e05c      	b.n	8006c94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d106      	bne.n	8006bee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006be0:	f107 0314 	add.w	r3, r7, #20
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 ffeb 	bl	8007bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bee:	f001 feb3 	bl	8008958 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bf2:	f000 fd67 	bl	80076c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bf6:	f001 fe81 	bl	80088fc <vPortEnterCritical>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c00:	b25b      	sxtb	r3, r3
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d103      	bne.n	8006c10 <xQueueGenericSend+0x164>
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c16:	b25b      	sxtb	r3, r3
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d103      	bne.n	8006c26 <xQueueGenericSend+0x17a>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c26:	f001 fe97 	bl	8008958 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c2a:	1d3a      	adds	r2, r7, #4
 8006c2c:	f107 0314 	add.w	r3, r7, #20
 8006c30:	4611      	mov	r1, r2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 ffda 	bl	8007bec <xTaskCheckForTimeOut>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d124      	bne.n	8006c88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c40:	f000 fa96 	bl	8007170 <prvIsQueueFull>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d018      	beq.n	8006c7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	3310      	adds	r3, #16
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4611      	mov	r1, r2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 ff04 	bl	8007a60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c5a:	f000 fa21 	bl	80070a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c5e:	f000 fd3f 	bl	80076e0 <xTaskResumeAll>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47f af7c 	bne.w	8006b62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006c6a:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <xQueueGenericSend+0x1f0>)
 8006c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	e772      	b.n	8006b62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c7e:	f000 fa0f 	bl	80070a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c82:	f000 fd2d 	bl	80076e0 <xTaskResumeAll>
 8006c86:	e76c      	b.n	8006b62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c8a:	f000 fa09 	bl	80070a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c8e:	f000 fd27 	bl	80076e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3738      	adds	r7, #56	; 0x38
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08e      	sub	sp, #56	; 0x38
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d109      	bne.n	8006ccc <xQueueGenericSendFromISR+0x2c>
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cca:	e7fe      	b.n	8006cca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d103      	bne.n	8006cda <xQueueGenericSendFromISR+0x3a>
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <xQueueGenericSendFromISR+0x3e>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <xQueueGenericSendFromISR+0x40>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <xQueueGenericSendFromISR+0x58>
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	623b      	str	r3, [r7, #32]
 8006cf6:	e7fe      	b.n	8006cf6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d103      	bne.n	8006d06 <xQueueGenericSendFromISR+0x66>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <xQueueGenericSendFromISR+0x6a>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueGenericSendFromISR+0x6c>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <xQueueGenericSendFromISR+0x84>
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	e7fe      	b.n	8006d22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d24:	f001 fec6 	bl	8008ab4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d28:	f3ef 8211 	mrs	r2, BASEPRI
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	61ba      	str	r2, [r7, #24]
 8006d3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d302      	bcc.n	8006d56 <xQueueGenericSendFromISR+0xb6>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d12c      	bne.n	8006db0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d66:	f000 f90b 	bl	8006f80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	d112      	bne.n	8006d9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d016      	beq.n	8006daa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	3324      	adds	r3, #36	; 0x24
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 febb 	bl	8007afc <xTaskRemoveFromEventList>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00e      	beq.n	8006daa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e007      	b.n	8006daa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d9e:	3301      	adds	r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	b25a      	sxtb	r2, r3
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006daa:	2301      	movs	r3, #1
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006dae:	e001      	b.n	8006db4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3738      	adds	r7, #56	; 0x38
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08c      	sub	sp, #48	; 0x30
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <xQueueReceive+0x2e>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	e7fe      	b.n	8006df4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <xQueueReceive+0x3c>
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <xQueueReceive+0x40>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <xQueueReceive+0x42>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <xQueueReceive+0x5a>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	e7fe      	b.n	8006e20 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e22:	f001 f821 	bl	8007e68 <xTaskGetSchedulerState>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <xQueueReceive+0x6a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <xQueueReceive+0x6e>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <xQueueReceive+0x70>
 8006e36:	2300      	movs	r3, #0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <xQueueReceive+0x88>
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e7fe      	b.n	8006e4e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e50:	f001 fd54 	bl	80088fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01f      	beq.n	8006ea0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e64:	f000 f8f6 	bl	8007054 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	1e5a      	subs	r2, r3, #1
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00f      	beq.n	8006e98 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	3310      	adds	r3, #16
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fe3d 	bl	8007afc <xTaskRemoveFromEventList>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d007      	beq.n	8006e98 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e88:	4b3c      	ldr	r3, [pc, #240]	; (8006f7c <xQueueReceive+0x1b4>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e98:	f001 fd5e 	bl	8008958 <vPortExitCritical>
				return pdPASS;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e069      	b.n	8006f74 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ea6:	f001 fd57 	bl	8008958 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e062      	b.n	8006f74 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb4:	f107 0310 	add.w	r3, r7, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fe81 	bl	8007bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec2:	f001 fd49 	bl	8008958 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec6:	f000 fbfd 	bl	80076c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eca:	f001 fd17 	bl	80088fc <vPortEnterCritical>
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d103      	bne.n	8006ee4 <xQueueReceive+0x11c>
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eea:	b25b      	sxtb	r3, r3
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d103      	bne.n	8006efa <xQueueReceive+0x132>
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006efa:	f001 fd2d 	bl	8008958 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006efe:	1d3a      	adds	r2, r7, #4
 8006f00:	f107 0310 	add.w	r3, r7, #16
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fe70 	bl	8007bec <xTaskCheckForTimeOut>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d123      	bne.n	8006f5a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f14:	f000 f916 	bl	8007144 <prvIsQueueEmpty>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d017      	beq.n	8006f4e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	3324      	adds	r3, #36	; 0x24
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fd9a 	bl	8007a60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2e:	f000 f8b7 	bl	80070a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f32:	f000 fbd5 	bl	80076e0 <xTaskResumeAll>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d189      	bne.n	8006e50 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <xQueueReceive+0x1b4>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	e780      	b.n	8006e50 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f50:	f000 f8a6 	bl	80070a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f54:	f000 fbc4 	bl	80076e0 <xTaskResumeAll>
 8006f58:	e77a      	b.n	8006e50 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f5c:	f000 f8a0 	bl	80070a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f60:	f000 fbbe 	bl	80076e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f66:	f000 f8ed 	bl	8007144 <prvIsQueueEmpty>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f43f af6f 	beq.w	8006e50 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3730      	adds	r7, #48	; 0x30
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	e000ed04 	.word	0xe000ed04

08006f80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10d      	bne.n	8006fba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d14d      	bne.n	8007042 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 ff7a 	bl	8007ea4 <xTaskPriorityDisinherit>
 8006fb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	609a      	str	r2, [r3, #8]
 8006fb8:	e043      	b.n	8007042 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d119      	bne.n	8006ff4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6858      	ldr	r0, [r3, #4]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	461a      	mov	r2, r3
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	f001 ffd6 	bl	8008f7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	441a      	add	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d32b      	bcc.n	8007042 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	e026      	b.n	8007042 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68d8      	ldr	r0, [r3, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	f001 ffbc 	bl	8008f7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	425b      	negs	r3, r3
 800700e:	441a      	add	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d207      	bcs.n	8007030 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	425b      	negs	r3, r3
 800702a:	441a      	add	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d105      	bne.n	8007042 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	3b01      	subs	r3, #1
 8007040:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800704a:	697b      	ldr	r3, [r7, #20]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d018      	beq.n	8007098 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	441a      	add	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	429a      	cmp	r2, r3
 800707e:	d303      	bcc.n	8007088 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68d9      	ldr	r1, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	461a      	mov	r2, r3
 8007092:	6838      	ldr	r0, [r7, #0]
 8007094:	f001 ff72 	bl	8008f7c <memcpy>
	}
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070a8:	f001 fc28 	bl	80088fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070b4:	e011      	b.n	80070da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d012      	beq.n	80070e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3324      	adds	r3, #36	; 0x24
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fd1a 	bl	8007afc <xTaskRemoveFromEventList>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070ce:	f000 fded 	bl	8007cac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	dce9      	bgt.n	80070b6 <prvUnlockQueue+0x16>
 80070e2:	e000      	b.n	80070e6 <prvUnlockQueue+0x46>
					break;
 80070e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	22ff      	movs	r2, #255	; 0xff
 80070ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070ee:	f001 fc33 	bl	8008958 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070f2:	f001 fc03 	bl	80088fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070fe:	e011      	b.n	8007124 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d012      	beq.n	800712e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3310      	adds	r3, #16
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fcf5 	bl	8007afc <xTaskRemoveFromEventList>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007118:	f000 fdc8 	bl	8007cac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	3b01      	subs	r3, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007128:	2b00      	cmp	r3, #0
 800712a:	dce9      	bgt.n	8007100 <prvUnlockQueue+0x60>
 800712c:	e000      	b.n	8007130 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800712e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	22ff      	movs	r2, #255	; 0xff
 8007134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007138:	f001 fc0e 	bl	8008958 <vPortExitCritical>
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800714c:	f001 fbd6 	bl	80088fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007158:	2301      	movs	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e001      	b.n	8007162 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007162:	f001 fbf9 	bl	8008958 <vPortExitCritical>

	return xReturn;
 8007166:	68fb      	ldr	r3, [r7, #12]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007178:	f001 fbc0 	bl	80088fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007184:	429a      	cmp	r2, r3
 8007186:	d102      	bne.n	800718e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007188:	2301      	movs	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	e001      	b.n	8007192 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007192:	f001 fbe1 	bl	8008958 <vPortExitCritical>

	return xReturn;
 8007196:	68fb      	ldr	r3, [r7, #12]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	e014      	b.n	80071da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071b0:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <vQueueAddToRegistry+0x4c>)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10b      	bne.n	80071d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071bc:	490b      	ldr	r1, [pc, #44]	; (80071ec <vQueueAddToRegistry+0x4c>)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071c6:	4a09      	ldr	r2, [pc, #36]	; (80071ec <vQueueAddToRegistry+0x4c>)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	4413      	add	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071d2:	e005      	b.n	80071e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b07      	cmp	r3, #7
 80071de:	d9e7      	bls.n	80071b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071e0:	bf00      	nop
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	200052ac 	.word	0x200052ac

080071f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007200:	f001 fb7c 	bl	80088fc <vPortEnterCritical>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800720a:	b25b      	sxtb	r3, r3
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d103      	bne.n	800721a <vQueueWaitForMessageRestricted+0x2a>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007220:	b25b      	sxtb	r3, r3
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d103      	bne.n	8007230 <vQueueWaitForMessageRestricted+0x40>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007230:	f001 fb92 	bl	8008958 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fc2f 	bl	8007aa8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800724a:	6978      	ldr	r0, [r7, #20]
 800724c:	f7ff ff28 	bl	80070a0 <prvUnlockQueue>
	}
 8007250:	bf00      	nop
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08e      	sub	sp, #56	; 0x38
 800725c:	af04      	add	r7, sp, #16
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <xTaskCreateStatic+0x28>
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	623b      	str	r3, [r7, #32]
 800727e:	e7fe      	b.n	800727e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <xTaskCreateStatic+0x42>
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e7fe      	b.n	8007298 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800729a:	235c      	movs	r3, #92	; 0x5c
 800729c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b5c      	cmp	r3, #92	; 0x5c
 80072a2:	d009      	beq.n	80072b8 <xTaskCreateStatic+0x60>
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e7fe      	b.n	80072b6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01e      	beq.n	80072fe <xTaskCreateStatic+0xa6>
 80072c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01b      	beq.n	80072fe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072d8:	2300      	movs	r3, #0
 80072da:	9303      	str	r3, [sp, #12]
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	9302      	str	r3, [sp, #8]
 80072e0:	f107 0314 	add.w	r3, r7, #20
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f850 	bl	8007396 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f8:	f000 f8dc 	bl	80074b4 <prvAddNewTaskToReadyList>
 80072fc:	e001      	b.n	8007302 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007302:	697b      	ldr	r3, [r7, #20]
	}
 8007304:	4618      	mov	r0, r3
 8007306:	3728      	adds	r7, #40	; 0x28
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08c      	sub	sp, #48	; 0x30
 8007310:	af04      	add	r7, sp, #16
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4613      	mov	r3, r2
 800731a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4618      	mov	r0, r3
 8007322:	f001 fc05 	bl	8008b30 <pvPortMalloc>
 8007326:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00e      	beq.n	800734c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800732e:	205c      	movs	r0, #92	; 0x5c
 8007330:	f001 fbfe 	bl	8008b30 <pvPortMalloc>
 8007334:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	631a      	str	r2, [r3, #48]	; 0x30
 8007342:	e005      	b.n	8007350 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007344:	6978      	ldr	r0, [r7, #20]
 8007346:	f001 fcb5 	bl	8008cb4 <vPortFree>
 800734a:	e001      	b.n	8007350 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800734c:	2300      	movs	r3, #0
 800734e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d017      	beq.n	8007386 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	2300      	movs	r3, #0
 8007362:	9303      	str	r3, [sp, #12]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	9302      	str	r3, [sp, #8]
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f80e 	bl	8007396 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800737a:	69f8      	ldr	r0, [r7, #28]
 800737c:	f000 f89a 	bl	80074b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007380:	2301      	movs	r3, #1
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	e002      	b.n	800738c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007386:	f04f 33ff 	mov.w	r3, #4294967295
 800738a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800738c:	69bb      	ldr	r3, [r7, #24]
	}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b088      	sub	sp, #32
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	461a      	mov	r2, r3
 80073ae:	21a5      	movs	r1, #165	; 0xa5
 80073b0:	f001 fdef 	bl	8008f92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073be:	3b01      	subs	r3, #1
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	f023 0307 	bic.w	r3, r3, #7
 80073cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <prvInitialiseNewTask+0x56>
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e7fe      	b.n	80073ea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01f      	beq.n	8007432 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	e012      	b.n	800741e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	7819      	ldrb	r1, [r3, #0]
 8007400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	4413      	add	r3, r2
 8007406:	3334      	adds	r3, #52	; 0x34
 8007408:	460a      	mov	r2, r1
 800740a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	2b0f      	cmp	r3, #15
 8007422:	d9e9      	bls.n	80073f8 <prvInitialiseNewTask+0x62>
 8007424:	e000      	b.n	8007428 <prvInitialiseNewTask+0x92>
			{
				break;
 8007426:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007430:	e003      	b.n	800743a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	2b37      	cmp	r3, #55	; 0x37
 800743e:	d901      	bls.n	8007444 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007440:	2337      	movs	r3, #55	; 0x37
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007448:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800744e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	2200      	movs	r2, #0
 8007454:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	3304      	adds	r3, #4
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff f954 	bl	8006708 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	3318      	adds	r3, #24
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff f94f 	bl	8006708 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800747e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2200      	movs	r2, #0
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	69b8      	ldr	r0, [r7, #24]
 8007494:	f001 f90c 	bl	80086b0 <pxPortInitialiseStack>
 8007498:	4602      	mov	r2, r0
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074aa:	bf00      	nop
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074bc:	f001 fa1e 	bl	80088fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074c0:	4b2d      	ldr	r3, [pc, #180]	; (8007578 <prvAddNewTaskToReadyList+0xc4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	4a2c      	ldr	r2, [pc, #176]	; (8007578 <prvAddNewTaskToReadyList+0xc4>)
 80074c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074ca:	4b2c      	ldr	r3, [pc, #176]	; (800757c <prvAddNewTaskToReadyList+0xc8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074d2:	4a2a      	ldr	r2, [pc, #168]	; (800757c <prvAddNewTaskToReadyList+0xc8>)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074d8:	4b27      	ldr	r3, [pc, #156]	; (8007578 <prvAddNewTaskToReadyList+0xc4>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d110      	bne.n	8007502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074e0:	f000 fc08 	bl	8007cf4 <prvInitialiseTaskLists>
 80074e4:	e00d      	b.n	8007502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074e6:	4b26      	ldr	r3, [pc, #152]	; (8007580 <prvAddNewTaskToReadyList+0xcc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074ee:	4b23      	ldr	r3, [pc, #140]	; (800757c <prvAddNewTaskToReadyList+0xc8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d802      	bhi.n	8007502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074fc:	4a1f      	ldr	r2, [pc, #124]	; (800757c <prvAddNewTaskToReadyList+0xc8>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007502:	4b20      	ldr	r3, [pc, #128]	; (8007584 <prvAddNewTaskToReadyList+0xd0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <prvAddNewTaskToReadyList+0xd0>)
 800750a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800750c:	4b1d      	ldr	r3, [pc, #116]	; (8007584 <prvAddNewTaskToReadyList+0xd0>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007518:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <prvAddNewTaskToReadyList+0xd4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d903      	bls.n	8007528 <prvAddNewTaskToReadyList+0x74>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	4a18      	ldr	r2, [pc, #96]	; (8007588 <prvAddNewTaskToReadyList+0xd4>)
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4a15      	ldr	r2, [pc, #84]	; (800758c <prvAddNewTaskToReadyList+0xd8>)
 8007536:	441a      	add	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3304      	adds	r3, #4
 800753c:	4619      	mov	r1, r3
 800753e:	4610      	mov	r0, r2
 8007540:	f7ff f8ef 	bl	8006722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007544:	f001 fa08 	bl	8008958 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007548:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <prvAddNewTaskToReadyList+0xcc>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00e      	beq.n	800756e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007550:	4b0a      	ldr	r3, [pc, #40]	; (800757c <prvAddNewTaskToReadyList+0xc8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	429a      	cmp	r2, r3
 800755c:	d207      	bcs.n	800756e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <prvAddNewTaskToReadyList+0xdc>)
 8007560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800756e:	bf00      	nop
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	2000121c 	.word	0x2000121c
 800757c:	20000d48 	.word	0x20000d48
 8007580:	20001228 	.word	0x20001228
 8007584:	20001238 	.word	0x20001238
 8007588:	20001224 	.word	0x20001224
 800758c:	20000d4c 	.word	0x20000d4c
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d016      	beq.n	80075d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075a6:	4b13      	ldr	r3, [pc, #76]	; (80075f4 <vTaskDelay+0x60>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <vTaskDelay+0x2e>
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	60bb      	str	r3, [r7, #8]
 80075c0:	e7fe      	b.n	80075c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80075c2:	f000 f87f 	bl	80076c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075c6:	2100      	movs	r1, #0
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fcd7 	bl	8007f7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075ce:	f000 f887 	bl	80076e0 <xTaskResumeAll>
 80075d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d107      	bne.n	80075ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <vTaskDelay+0x64>)
 80075dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20001244 	.word	0x20001244
 80075f8:	e000ed04 	.word	0xe000ed04

080075fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	; 0x28
 8007600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800760a:	463a      	mov	r2, r7
 800760c:	1d39      	adds	r1, r7, #4
 800760e:	f107 0308 	add.w	r3, r7, #8
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff f824 	bl	8006660 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	9202      	str	r2, [sp, #8]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	2300      	movs	r3, #0
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	460a      	mov	r2, r1
 800762a:	4920      	ldr	r1, [pc, #128]	; (80076ac <vTaskStartScheduler+0xb0>)
 800762c:	4820      	ldr	r0, [pc, #128]	; (80076b0 <vTaskStartScheduler+0xb4>)
 800762e:	f7ff fe13 	bl	8007258 <xTaskCreateStatic>
 8007632:	4602      	mov	r2, r0
 8007634:	4b1f      	ldr	r3, [pc, #124]	; (80076b4 <vTaskStartScheduler+0xb8>)
 8007636:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007638:	4b1e      	ldr	r3, [pc, #120]	; (80076b4 <vTaskStartScheduler+0xb8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007640:	2301      	movs	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e001      	b.n	800764a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007646:	2300      	movs	r3, #0
 8007648:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d102      	bne.n	8007656 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007650:	f000 fce8 	bl	8008024 <xTimerCreateTimerTask>
 8007654:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d115      	bne.n	8007688 <vTaskStartScheduler+0x8c>
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <vTaskStartScheduler+0xbc>)
 8007670:	f04f 32ff 	mov.w	r2, #4294967295
 8007674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007676:	4b11      	ldr	r3, [pc, #68]	; (80076bc <vTaskStartScheduler+0xc0>)
 8007678:	2201      	movs	r2, #1
 800767a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800767c:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <vTaskStartScheduler+0xc4>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007682:	f001 f89d 	bl	80087c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007686:	e00d      	b.n	80076a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768e:	d109      	bne.n	80076a4 <vTaskStartScheduler+0xa8>
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	e7fe      	b.n	80076a2 <vTaskStartScheduler+0xa6>
}
 80076a4:	bf00      	nop
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	080093c0 	.word	0x080093c0
 80076b0:	08007cc5 	.word	0x08007cc5
 80076b4:	20001240 	.word	0x20001240
 80076b8:	2000123c 	.word	0x2000123c
 80076bc:	20001228 	.word	0x20001228
 80076c0:	20001220 	.word	0x20001220

080076c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076c8:	4b04      	ldr	r3, [pc, #16]	; (80076dc <vTaskSuspendAll+0x18>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3301      	adds	r3, #1
 80076ce:	4a03      	ldr	r2, [pc, #12]	; (80076dc <vTaskSuspendAll+0x18>)
 80076d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80076d2:	bf00      	nop
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	20001244 	.word	0x20001244

080076e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076ee:	4b41      	ldr	r3, [pc, #260]	; (80077f4 <xTaskResumeAll+0x114>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <xTaskResumeAll+0x2a>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	e7fe      	b.n	8007708 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800770a:	f001 f8f7 	bl	80088fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800770e:	4b39      	ldr	r3, [pc, #228]	; (80077f4 <xTaskResumeAll+0x114>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3b01      	subs	r3, #1
 8007714:	4a37      	ldr	r2, [pc, #220]	; (80077f4 <xTaskResumeAll+0x114>)
 8007716:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007718:	4b36      	ldr	r3, [pc, #216]	; (80077f4 <xTaskResumeAll+0x114>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d162      	bne.n	80077e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007720:	4b35      	ldr	r3, [pc, #212]	; (80077f8 <xTaskResumeAll+0x118>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d05e      	beq.n	80077e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007728:	e02f      	b.n	800778a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800772a:	4b34      	ldr	r3, [pc, #208]	; (80077fc <xTaskResumeAll+0x11c>)
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3318      	adds	r3, #24
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff f850 	bl	80067dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3304      	adds	r3, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff f84b 	bl	80067dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774a:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <xTaskResumeAll+0x120>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d903      	bls.n	800775a <xTaskResumeAll+0x7a>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <xTaskResumeAll+0x120>)
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4a27      	ldr	r2, [pc, #156]	; (8007804 <xTaskResumeAll+0x124>)
 8007768:	441a      	add	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f7fe ffd6 	bl	8006722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	4b23      	ldr	r3, [pc, #140]	; (8007808 <xTaskResumeAll+0x128>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	429a      	cmp	r2, r3
 8007782:	d302      	bcc.n	800778a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007784:	4b21      	ldr	r3, [pc, #132]	; (800780c <xTaskResumeAll+0x12c>)
 8007786:	2201      	movs	r2, #1
 8007788:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800778a:	4b1c      	ldr	r3, [pc, #112]	; (80077fc <xTaskResumeAll+0x11c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1cb      	bne.n	800772a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007798:	f000 fb46 	bl	8007e28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800779c:	4b1c      	ldr	r3, [pc, #112]	; (8007810 <xTaskResumeAll+0x130>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d010      	beq.n	80077ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077a8:	f000 f846 	bl	8007838 <xTaskIncrementTick>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80077b2:	4b16      	ldr	r3, [pc, #88]	; (800780c <xTaskResumeAll+0x12c>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f1      	bne.n	80077a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80077c4:	4b12      	ldr	r3, [pc, #72]	; (8007810 <xTaskResumeAll+0x130>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <xTaskResumeAll+0x12c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077d6:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <xTaskResumeAll+0x134>)
 80077d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077e6:	f001 f8b7 	bl	8008958 <vPortExitCritical>

	return xAlreadyYielded;
 80077ea:	68bb      	ldr	r3, [r7, #8]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20001244 	.word	0x20001244
 80077f8:	2000121c 	.word	0x2000121c
 80077fc:	200011dc 	.word	0x200011dc
 8007800:	20001224 	.word	0x20001224
 8007804:	20000d4c 	.word	0x20000d4c
 8007808:	20000d48 	.word	0x20000d48
 800780c:	20001230 	.word	0x20001230
 8007810:	2000122c 	.word	0x2000122c
 8007814:	e000ed04 	.word	0xe000ed04

08007818 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <xTaskGetTickCount+0x1c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007824:	687b      	ldr	r3, [r7, #4]
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20001220 	.word	0x20001220

08007838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007842:	4b4e      	ldr	r3, [pc, #312]	; (800797c <xTaskIncrementTick+0x144>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 8088 	bne.w	800795c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800784c:	4b4c      	ldr	r3, [pc, #304]	; (8007980 <xTaskIncrementTick+0x148>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007854:	4a4a      	ldr	r2, [pc, #296]	; (8007980 <xTaskIncrementTick+0x148>)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d11f      	bne.n	80078a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007860:	4b48      	ldr	r3, [pc, #288]	; (8007984 <xTaskIncrementTick+0x14c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <xTaskIncrementTick+0x46>
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	e7fe      	b.n	800787c <xTaskIncrementTick+0x44>
 800787e:	4b41      	ldr	r3, [pc, #260]	; (8007984 <xTaskIncrementTick+0x14c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	4b40      	ldr	r3, [pc, #256]	; (8007988 <xTaskIncrementTick+0x150>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a3e      	ldr	r2, [pc, #248]	; (8007984 <xTaskIncrementTick+0x14c>)
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	4a3e      	ldr	r2, [pc, #248]	; (8007988 <xTaskIncrementTick+0x150>)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	4b3e      	ldr	r3, [pc, #248]	; (800798c <xTaskIncrementTick+0x154>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3301      	adds	r3, #1
 8007898:	4a3c      	ldr	r2, [pc, #240]	; (800798c <xTaskIncrementTick+0x154>)
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	f000 fac4 	bl	8007e28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078a0:	4b3b      	ldr	r3, [pc, #236]	; (8007990 <xTaskIncrementTick+0x158>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d349      	bcc.n	800793e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078aa:	4b36      	ldr	r3, [pc, #216]	; (8007984 <xTaskIncrementTick+0x14c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d104      	bne.n	80078be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b4:	4b36      	ldr	r3, [pc, #216]	; (8007990 <xTaskIncrementTick+0x158>)
 80078b6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ba:	601a      	str	r2, [r3, #0]
					break;
 80078bc:	e03f      	b.n	800793e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078be:	4b31      	ldr	r3, [pc, #196]	; (8007984 <xTaskIncrementTick+0x14c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d203      	bcs.n	80078de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078d6:	4a2e      	ldr	r2, [pc, #184]	; (8007990 <xTaskIncrementTick+0x158>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078dc:	e02f      	b.n	800793e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe ff7a 	bl	80067dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	3318      	adds	r3, #24
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe ff71 	bl	80067dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	4b25      	ldr	r3, [pc, #148]	; (8007994 <xTaskIncrementTick+0x15c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d903      	bls.n	800790e <xTaskIncrementTick+0xd6>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	4a22      	ldr	r2, [pc, #136]	; (8007994 <xTaskIncrementTick+0x15c>)
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <xTaskIncrementTick+0x160>)
 800791c:	441a      	add	r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7fe fefc 	bl	8006722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792e:	4b1b      	ldr	r3, [pc, #108]	; (800799c <xTaskIncrementTick+0x164>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	429a      	cmp	r2, r3
 8007936:	d3b8      	bcc.n	80078aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007938:	2301      	movs	r3, #1
 800793a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793c:	e7b5      	b.n	80078aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800793e:	4b17      	ldr	r3, [pc, #92]	; (800799c <xTaskIncrementTick+0x164>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007944:	4914      	ldr	r1, [pc, #80]	; (8007998 <xTaskIncrementTick+0x160>)
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d907      	bls.n	8007966 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007956:	2301      	movs	r3, #1
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	e004      	b.n	8007966 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800795c:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <xTaskIncrementTick+0x168>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <xTaskIncrementTick+0x168>)
 8007964:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007966:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <xTaskIncrementTick+0x16c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800796e:	2301      	movs	r3, #1
 8007970:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007972:	697b      	ldr	r3, [r7, #20]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20001244 	.word	0x20001244
 8007980:	20001220 	.word	0x20001220
 8007984:	200011d4 	.word	0x200011d4
 8007988:	200011d8 	.word	0x200011d8
 800798c:	20001234 	.word	0x20001234
 8007990:	2000123c 	.word	0x2000123c
 8007994:	20001224 	.word	0x20001224
 8007998:	20000d4c 	.word	0x20000d4c
 800799c:	20000d48 	.word	0x20000d48
 80079a0:	2000122c 	.word	0x2000122c
 80079a4:	20001230 	.word	0x20001230

080079a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079ae:	4b27      	ldr	r3, [pc, #156]	; (8007a4c <vTaskSwitchContext+0xa4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079b6:	4b26      	ldr	r3, [pc, #152]	; (8007a50 <vTaskSwitchContext+0xa8>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079bc:	e040      	b.n	8007a40 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80079be:	4b24      	ldr	r3, [pc, #144]	; (8007a50 <vTaskSwitchContext+0xa8>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c4:	4b23      	ldr	r3, [pc, #140]	; (8007a54 <vTaskSwitchContext+0xac>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e00f      	b.n	80079ec <vTaskSwitchContext+0x44>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <vTaskSwitchContext+0x3e>
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	607b      	str	r3, [r7, #4]
 80079e4:	e7fe      	b.n	80079e4 <vTaskSwitchContext+0x3c>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	491a      	ldr	r1, [pc, #104]	; (8007a58 <vTaskSwitchContext+0xb0>)
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	440b      	add	r3, r1
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0e5      	beq.n	80079cc <vTaskSwitchContext+0x24>
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <vTaskSwitchContext+0xb0>)
 8007a0c:	4413      	add	r3, r2
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	605a      	str	r2, [r3, #4]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	3308      	adds	r3, #8
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d104      	bne.n	8007a30 <vTaskSwitchContext+0x88>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	605a      	str	r2, [r3, #4]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <vTaskSwitchContext+0xb4>)
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	4a06      	ldr	r2, [pc, #24]	; (8007a54 <vTaskSwitchContext+0xac>)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6013      	str	r3, [r2, #0]
}
 8007a40:	bf00      	nop
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	20001244 	.word	0x20001244
 8007a50:	20001230 	.word	0x20001230
 8007a54:	20001224 	.word	0x20001224
 8007a58:	20000d4c 	.word	0x20000d4c
 8007a5c:	20000d48 	.word	0x20000d48

08007a60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d109      	bne.n	8007a84 <vTaskPlaceOnEventList+0x24>
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	e7fe      	b.n	8007a82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a84:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <vTaskPlaceOnEventList+0x44>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3318      	adds	r3, #24
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fe fe6c 	bl	800676a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a92:	2101      	movs	r1, #1
 8007a94:	6838      	ldr	r0, [r7, #0]
 8007a96:	f000 fa71 	bl	8007f7c <prvAddCurrentTaskToDelayedList>
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000d48 	.word	0x20000d48

08007aa8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <vTaskPlaceOnEventListRestricted+0x26>
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e7fe      	b.n	8007acc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ace:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <vTaskPlaceOnEventListRestricted+0x50>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3318      	adds	r3, #24
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7fe fe23 	bl	8006722 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	68b8      	ldr	r0, [r7, #8]
 8007aec:	f000 fa46 	bl	8007f7c <prvAddCurrentTaskToDelayedList>
	}
 8007af0:	bf00      	nop
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20000d48 	.word	0x20000d48

08007afc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <xTaskRemoveFromEventList+0x2a>
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e7fe      	b.n	8007b24 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	3318      	adds	r3, #24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fe56 	bl	80067dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b30:	4b1d      	ldr	r3, [pc, #116]	; (8007ba8 <xTaskRemoveFromEventList+0xac>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11d      	bne.n	8007b74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fe4d 	bl	80067dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b46:	4b19      	ldr	r3, [pc, #100]	; (8007bac <xTaskRemoveFromEventList+0xb0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d903      	bls.n	8007b56 <xTaskRemoveFromEventList+0x5a>
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	4a16      	ldr	r2, [pc, #88]	; (8007bac <xTaskRemoveFromEventList+0xb0>)
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4a13      	ldr	r2, [pc, #76]	; (8007bb0 <xTaskRemoveFromEventList+0xb4>)
 8007b64:	441a      	add	r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f7fe fdd8 	bl	8006722 <vListInsertEnd>
 8007b72:	e005      	b.n	8007b80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	3318      	adds	r3, #24
 8007b78:	4619      	mov	r1, r3
 8007b7a:	480e      	ldr	r0, [pc, #56]	; (8007bb4 <xTaskRemoveFromEventList+0xb8>)
 8007b7c:	f7fe fdd1 	bl	8006722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <xTaskRemoveFromEventList+0xbc>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d905      	bls.n	8007b9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <xTaskRemoveFromEventList+0xc0>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	e001      	b.n	8007b9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b9e:	697b      	ldr	r3, [r7, #20]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20001244 	.word	0x20001244
 8007bac:	20001224 	.word	0x20001224
 8007bb0:	20000d4c 	.word	0x20000d4c
 8007bb4:	200011dc 	.word	0x200011dc
 8007bb8:	20000d48 	.word	0x20000d48
 8007bbc:	20001230 	.word	0x20001230

08007bc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <vTaskInternalSetTimeOutState+0x24>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <vTaskInternalSetTimeOutState+0x28>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	605a      	str	r2, [r3, #4]
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	20001234 	.word	0x20001234
 8007be8:	20001220 	.word	0x20001220

08007bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <xTaskCheckForTimeOut+0x24>
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	e7fe      	b.n	8007c0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <xTaskCheckForTimeOut+0x3e>
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	e7fe      	b.n	8007c28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007c2a:	f000 fe67 	bl	80088fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ca4 <xTaskCheckForTimeOut+0xb8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c46:	d102      	bne.n	8007c4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	e023      	b.n	8007c96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <xTaskCheckForTimeOut+0xbc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d007      	beq.n	8007c6a <xTaskCheckForTimeOut+0x7e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d302      	bcc.n	8007c6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	e015      	b.n	8007c96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d20b      	bcs.n	8007c8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	1ad2      	subs	r2, r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff ff9d 	bl	8007bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
 8007c8a:	e004      	b.n	8007c96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c92:	2301      	movs	r3, #1
 8007c94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c96:	f000 fe5f 	bl	8008958 <vPortExitCritical>

	return xReturn;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20001220 	.word	0x20001220
 8007ca8:	20001234 	.word	0x20001234

08007cac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cb0:	4b03      	ldr	r3, [pc, #12]	; (8007cc0 <vTaskMissedYield+0x14>)
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
}
 8007cb6:	bf00      	nop
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	20001230 	.word	0x20001230

08007cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ccc:	f000 f852 	bl	8007d74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cd0:	4b06      	ldr	r3, [pc, #24]	; (8007cec <prvIdleTask+0x28>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d9f9      	bls.n	8007ccc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cd8:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <prvIdleTask+0x2c>)
 8007cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ce8:	e7f0      	b.n	8007ccc <prvIdleTask+0x8>
 8007cea:	bf00      	nop
 8007cec:	20000d4c 	.word	0x20000d4c
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	607b      	str	r3, [r7, #4]
 8007cfe:	e00c      	b.n	8007d1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4a12      	ldr	r2, [pc, #72]	; (8007d54 <prvInitialiseTaskLists+0x60>)
 8007d0c:	4413      	add	r3, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fcda 	bl	80066c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3301      	adds	r3, #1
 8007d18:	607b      	str	r3, [r7, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b37      	cmp	r3, #55	; 0x37
 8007d1e:	d9ef      	bls.n	8007d00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d20:	480d      	ldr	r0, [pc, #52]	; (8007d58 <prvInitialiseTaskLists+0x64>)
 8007d22:	f7fe fcd1 	bl	80066c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d26:	480d      	ldr	r0, [pc, #52]	; (8007d5c <prvInitialiseTaskLists+0x68>)
 8007d28:	f7fe fcce 	bl	80066c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d2c:	480c      	ldr	r0, [pc, #48]	; (8007d60 <prvInitialiseTaskLists+0x6c>)
 8007d2e:	f7fe fccb 	bl	80066c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d32:	480c      	ldr	r0, [pc, #48]	; (8007d64 <prvInitialiseTaskLists+0x70>)
 8007d34:	f7fe fcc8 	bl	80066c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d38:	480b      	ldr	r0, [pc, #44]	; (8007d68 <prvInitialiseTaskLists+0x74>)
 8007d3a:	f7fe fcc5 	bl	80066c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <prvInitialiseTaskLists+0x78>)
 8007d40:	4a05      	ldr	r2, [pc, #20]	; (8007d58 <prvInitialiseTaskLists+0x64>)
 8007d42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <prvInitialiseTaskLists+0x7c>)
 8007d46:	4a05      	ldr	r2, [pc, #20]	; (8007d5c <prvInitialiseTaskLists+0x68>)
 8007d48:	601a      	str	r2, [r3, #0]
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20000d4c 	.word	0x20000d4c
 8007d58:	200011ac 	.word	0x200011ac
 8007d5c:	200011c0 	.word	0x200011c0
 8007d60:	200011dc 	.word	0x200011dc
 8007d64:	200011f0 	.word	0x200011f0
 8007d68:	20001208 	.word	0x20001208
 8007d6c:	200011d4 	.word	0x200011d4
 8007d70:	200011d8 	.word	0x200011d8

08007d74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d7a:	e019      	b.n	8007db0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d7c:	f000 fdbe 	bl	80088fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d80:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <prvCheckTasksWaitingTermination+0x4c>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe fd25 	bl	80067dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <prvCheckTasksWaitingTermination+0x50>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	4a0a      	ldr	r2, [pc, #40]	; (8007dc4 <prvCheckTasksWaitingTermination+0x50>)
 8007d9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <prvCheckTasksWaitingTermination+0x54>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	4a09      	ldr	r2, [pc, #36]	; (8007dc8 <prvCheckTasksWaitingTermination+0x54>)
 8007da4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007da6:	f000 fdd7 	bl	8008958 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f80e 	bl	8007dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007db0:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <prvCheckTasksWaitingTermination+0x54>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e1      	bne.n	8007d7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	200011f0 	.word	0x200011f0
 8007dc4:	2000121c 	.word	0x2000121c
 8007dc8:	20001204 	.word	0x20001204

08007dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d108      	bne.n	8007df0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 ff66 	bl	8008cb4 <vPortFree>
				vPortFree( pxTCB );
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 ff63 	bl	8008cb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dee:	e017      	b.n	8007e20 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d103      	bne.n	8007e02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 ff5a 	bl	8008cb4 <vPortFree>
	}
 8007e00:	e00e      	b.n	8007e20 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d009      	beq.n	8007e20 <prvDeleteTCB+0x54>
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	e7fe      	b.n	8007e1e <prvDeleteTCB+0x52>
	}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <prvResetNextTaskUnblockTime+0x38>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d104      	bne.n	8007e42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <prvResetNextTaskUnblockTime+0x3c>)
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e40:	e008      	b.n	8007e54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e42:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <prvResetNextTaskUnblockTime+0x38>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	4a04      	ldr	r2, [pc, #16]	; (8007e64 <prvResetNextTaskUnblockTime+0x3c>)
 8007e52:	6013      	str	r3, [r2, #0]
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	200011d4 	.word	0x200011d4
 8007e64:	2000123c 	.word	0x2000123c

08007e68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <xTaskGetSchedulerState+0x34>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d102      	bne.n	8007e7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e76:	2301      	movs	r3, #1
 8007e78:	607b      	str	r3, [r7, #4]
 8007e7a:	e008      	b.n	8007e8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e7c:	4b08      	ldr	r3, [pc, #32]	; (8007ea0 <xTaskGetSchedulerState+0x38>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e84:	2302      	movs	r3, #2
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	e001      	b.n	8007e8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e8e:	687b      	ldr	r3, [r7, #4]
	}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20001228 	.word	0x20001228
 8007ea0:	20001244 	.word	0x20001244

08007ea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d054      	beq.n	8007f64 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007eba:	4b2d      	ldr	r3, [pc, #180]	; (8007f70 <xTaskPriorityDisinherit+0xcc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d009      	beq.n	8007ed8 <xTaskPriorityDisinherit+0x34>
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	e7fe      	b.n	8007ed6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d109      	bne.n	8007ef4 <xTaskPriorityDisinherit+0x50>
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60bb      	str	r3, [r7, #8]
 8007ef2:	e7fe      	b.n	8007ef2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d02c      	beq.n	8007f64 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d128      	bne.n	8007f64 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fc60 	bl	80067dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <xTaskPriorityDisinherit+0xd0>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d903      	bls.n	8007f44 <xTaskPriorityDisinherit+0xa0>
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <xTaskPriorityDisinherit+0xd0>)
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <xTaskPriorityDisinherit+0xd4>)
 8007f52:	441a      	add	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7fe fbe1 	bl	8006722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f64:	697b      	ldr	r3, [r7, #20]
	}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000d48 	.word	0x20000d48
 8007f74:	20001224 	.word	0x20001224
 8007f78:	20000d4c 	.word	0x20000d4c

08007f7c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f86:	4b21      	ldr	r3, [pc, #132]	; (800800c <prvAddCurrentTaskToDelayedList+0x90>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f8c:	4b20      	ldr	r3, [pc, #128]	; (8008010 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3304      	adds	r3, #4
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fc22 	bl	80067dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9e:	d10a      	bne.n	8007fb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d007      	beq.n	8007fb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3304      	adds	r3, #4
 8007fac:	4619      	mov	r1, r3
 8007fae:	4819      	ldr	r0, [pc, #100]	; (8008014 <prvAddCurrentTaskToDelayedList+0x98>)
 8007fb0:	f7fe fbb7 	bl	8006722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fb4:	e026      	b.n	8008004 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4413      	add	r3, r2
 8007fbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fbe:	4b14      	ldr	r3, [pc, #80]	; (8008010 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d209      	bcs.n	8007fe2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fce:	4b12      	ldr	r3, [pc, #72]	; (8008018 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7fe fbc5 	bl	800676a <vListInsert>
}
 8007fe0:	e010      	b.n	8008004 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	f7fe fbbb 	bl	800676a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d202      	bcs.n	8008004 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ffe:	4a08      	ldr	r2, [pc, #32]	; (8008020 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	6013      	str	r3, [r2, #0]
}
 8008004:	bf00      	nop
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20001220 	.word	0x20001220
 8008010:	20000d48 	.word	0x20000d48
 8008014:	20001208 	.word	0x20001208
 8008018:	200011d8 	.word	0x200011d8
 800801c:	200011d4 	.word	0x200011d4
 8008020:	2000123c 	.word	0x2000123c

08008024 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08a      	sub	sp, #40	; 0x28
 8008028:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800802e:	f000 faff 	bl	8008630 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008032:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <xTimerCreateTimerTask+0x80>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d021      	beq.n	800807e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008042:	1d3a      	adds	r2, r7, #4
 8008044:	f107 0108 	add.w	r1, r7, #8
 8008048:	f107 030c 	add.w	r3, r7, #12
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fb21 	bl	8006694 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	9202      	str	r2, [sp, #8]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	2302      	movs	r3, #2
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	2300      	movs	r3, #0
 8008062:	460a      	mov	r2, r1
 8008064:	4910      	ldr	r1, [pc, #64]	; (80080a8 <xTimerCreateTimerTask+0x84>)
 8008066:	4811      	ldr	r0, [pc, #68]	; (80080ac <xTimerCreateTimerTask+0x88>)
 8008068:	f7ff f8f6 	bl	8007258 <xTaskCreateStatic>
 800806c:	4602      	mov	r2, r0
 800806e:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <xTimerCreateTimerTask+0x8c>)
 8008070:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <xTimerCreateTimerTask+0x8c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800807a:	2301      	movs	r3, #1
 800807c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <xTimerCreateTimerTask+0x74>
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	e7fe      	b.n	8008096 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008098:	697b      	ldr	r3, [r7, #20]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20001278 	.word	0x20001278
 80080a8:	080093c8 	.word	0x080093c8
 80080ac:	080081e5 	.word	0x080081e5
 80080b0:	2000127c 	.word	0x2000127c

080080b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08a      	sub	sp, #40	; 0x28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <xTimerGenericCommand+0x2c>
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	623b      	str	r3, [r7, #32]
 80080de:	e7fe      	b.n	80080de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080e0:	4b19      	ldr	r3, [pc, #100]	; (8008148 <xTimerGenericCommand+0x94>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02a      	beq.n	800813e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	dc18      	bgt.n	800812c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080fa:	f7ff feb5 	bl	8007e68 <xTaskGetSchedulerState>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b02      	cmp	r3, #2
 8008102:	d109      	bne.n	8008118 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008104:	4b10      	ldr	r3, [pc, #64]	; (8008148 <xTimerGenericCommand+0x94>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	f107 0110 	add.w	r1, r7, #16
 800810c:	2300      	movs	r3, #0
 800810e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008110:	f7fe fccc 	bl	8006aac <xQueueGenericSend>
 8008114:	6278      	str	r0, [r7, #36]	; 0x24
 8008116:	e012      	b.n	800813e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008118:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <xTimerGenericCommand+0x94>)
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	f107 0110 	add.w	r1, r7, #16
 8008120:	2300      	movs	r3, #0
 8008122:	2200      	movs	r2, #0
 8008124:	f7fe fcc2 	bl	8006aac <xQueueGenericSend>
 8008128:	6278      	str	r0, [r7, #36]	; 0x24
 800812a:	e008      	b.n	800813e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <xTimerGenericCommand+0x94>)
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	f107 0110 	add.w	r1, r7, #16
 8008134:	2300      	movs	r3, #0
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	f7fe fdb2 	bl	8006ca0 <xQueueGenericSendFromISR>
 800813c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008140:	4618      	mov	r0, r3
 8008142:	3728      	adds	r7, #40	; 0x28
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20001278 	.word	0x20001278

0800814c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af02      	add	r7, sp, #8
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008156:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <prvProcessExpiredTimer+0x94>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3304      	adds	r3, #4
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe fb39 	bl	80067dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d021      	beq.n	80081bc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	699a      	ldr	r2, [r3, #24]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	18d1      	adds	r1, r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	6978      	ldr	r0, [r7, #20]
 8008186:	f000 f8d1 	bl	800832c <prvInsertTimerInActiveList>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01e      	beq.n	80081ce <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008190:	2300      	movs	r3, #0
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	2300      	movs	r3, #0
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	2100      	movs	r1, #0
 800819a:	6978      	ldr	r0, [r7, #20]
 800819c:	f7ff ff8a 	bl	80080b4 <xTimerGenericCommand>
 80081a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d112      	bne.n	80081ce <prvProcessExpiredTimer+0x82>
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	e7fe      	b.n	80081ba <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c2:	f023 0301 	bic.w	r3, r3, #1
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	6978      	ldr	r0, [r7, #20]
 80081d4:	4798      	blx	r3
}
 80081d6:	bf00      	nop
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20001270 	.word	0x20001270

080081e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081ec:	f107 0308 	add.w	r3, r7, #8
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f857 	bl	80082a4 <prvGetNextExpireTime>
 80081f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4619      	mov	r1, r3
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f803 	bl	8008208 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008202:	f000 f8d5 	bl	80083b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008206:	e7f1      	b.n	80081ec <prvTimerTask+0x8>

08008208 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008212:	f7ff fa57 	bl	80076c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008216:	f107 0308 	add.w	r3, r7, #8
 800821a:	4618      	mov	r0, r3
 800821c:	f000 f866 	bl	80082ec <prvSampleTimeNow>
 8008220:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d130      	bne.n	800828a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <prvProcessTimerOrBlockTask+0x3c>
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	429a      	cmp	r2, r3
 8008234:	d806      	bhi.n	8008244 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008236:	f7ff fa53 	bl	80076e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800823a:	68f9      	ldr	r1, [r7, #12]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff ff85 	bl	800814c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008242:	e024      	b.n	800828e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d008      	beq.n	800825c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <prvProcessTimerOrBlockTask+0x90>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <prvProcessTimerOrBlockTask+0x50>
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <prvProcessTimerOrBlockTask+0x52>
 8008258:	2300      	movs	r3, #0
 800825a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <prvProcessTimerOrBlockTask+0x94>)
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	f7fe ffc1 	bl	80071f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800826e:	f7ff fa37 	bl	80076e0 <xTaskResumeAll>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <prvProcessTimerOrBlockTask+0x98>)
 800827a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	f3bf 8f6f 	isb	sy
}
 8008288:	e001      	b.n	800828e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800828a:	f7ff fa29 	bl	80076e0 <xTaskResumeAll>
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20001274 	.word	0x20001274
 800829c:	20001278 	.word	0x20001278
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <prvGetNextExpireTime+0x44>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <prvGetNextExpireTime+0x16>
 80082b6:	2201      	movs	r2, #1
 80082b8:	e000      	b.n	80082bc <prvGetNextExpireTime+0x18>
 80082ba:	2200      	movs	r2, #0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <prvGetNextExpireTime+0x44>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	e001      	b.n	80082d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082d8:	68fb      	ldr	r3, [r7, #12]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20001270 	.word	0x20001270

080082ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082f4:	f7ff fa90 	bl	8007818 <xTaskGetTickCount>
 80082f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082fa:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <prvSampleTimeNow+0x3c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	429a      	cmp	r2, r3
 8008302:	d205      	bcs.n	8008310 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008304:	f000 f930 	bl	8008568 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e002      	b.n	8008316 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008316:	4a04      	ldr	r2, [pc, #16]	; (8008328 <prvSampleTimeNow+0x3c>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800831c:	68fb      	ldr	r3, [r7, #12]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20001280 	.word	0x20001280

0800832c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	429a      	cmp	r2, r3
 8008350:	d812      	bhi.n	8008378 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	429a      	cmp	r2, r3
 800835e:	d302      	bcc.n	8008366 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	e01b      	b.n	800839e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008366:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <prvInsertTimerInActiveList+0x7c>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3304      	adds	r3, #4
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f7fe f9fa 	bl	800676a <vListInsert>
 8008376:	e012      	b.n	800839e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d206      	bcs.n	800838e <prvInsertTimerInActiveList+0x62>
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	429a      	cmp	r2, r3
 8008386:	d302      	bcc.n	800838e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008388:	2301      	movs	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	e007      	b.n	800839e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <prvInsertTimerInActiveList+0x80>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3304      	adds	r3, #4
 8008396:	4619      	mov	r1, r3
 8008398:	4610      	mov	r0, r2
 800839a:	f7fe f9e6 	bl	800676a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800839e:	697b      	ldr	r3, [r7, #20]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20001274 	.word	0x20001274
 80083ac:	20001270 	.word	0x20001270

080083b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08e      	sub	sp, #56	; 0x38
 80083b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083b6:	e0c6      	b.n	8008546 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da17      	bge.n	80083ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	3304      	adds	r3, #4
 80083c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d109      	bne.n	80083de <prvProcessReceivedCommands+0x2e>
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	61fb      	str	r3, [r7, #28]
 80083dc:	e7fe      	b.n	80083dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e4:	6850      	ldr	r0, [r2, #4]
 80083e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e8:	6892      	ldr	r2, [r2, #8]
 80083ea:	4611      	mov	r1, r2
 80083ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f2c0 80a7 	blt.w	8008544 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe f9e8 	bl	80067dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800840c:	463b      	mov	r3, r7
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff ff6c 	bl	80082ec <prvSampleTimeNow>
 8008414:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b09      	cmp	r3, #9
 800841a:	f200 8094 	bhi.w	8008546 <prvProcessReceivedCommands+0x196>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <prvProcessReceivedCommands+0x74>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	0800844d 	.word	0x0800844d
 8008428:	0800844d 	.word	0x0800844d
 800842c:	0800844d 	.word	0x0800844d
 8008430:	080084bf 	.word	0x080084bf
 8008434:	080084d3 	.word	0x080084d3
 8008438:	0800851b 	.word	0x0800851b
 800843c:	0800844d 	.word	0x0800844d
 8008440:	0800844d 	.word	0x0800844d
 8008444:	080084bf 	.word	0x080084bf
 8008448:	080084d3 	.word	0x080084d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008452:	f043 0301 	orr.w	r3, r3, #1
 8008456:	b2da      	uxtb	r2, r3
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	18d1      	adds	r1, r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800846c:	f7ff ff5e 	bl	800832c <prvInsertTimerInActiveList>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d067      	beq.n	8008546 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b00      	cmp	r3, #0
 800848a:	d05c      	beq.n	8008546 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	441a      	add	r2, r3
 8008494:	2300      	movs	r3, #0
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	2300      	movs	r3, #0
 800849a:	2100      	movs	r1, #0
 800849c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800849e:	f7ff fe09 	bl	80080b4 <xTimerGenericCommand>
 80084a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d14d      	bne.n	8008546 <prvProcessReceivedCommands+0x196>
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	61bb      	str	r3, [r7, #24]
 80084bc:	e7fe      	b.n	80084bc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80084d0:	e039      	b.n	8008546 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084d8:	f043 0301 	orr.w	r3, r3, #1
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <prvProcessReceivedCommands+0x156>
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e7fe      	b.n	8008504 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	699a      	ldr	r2, [r3, #24]
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	18d1      	adds	r1, r2, r3
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008514:	f7ff ff0a 	bl	800832c <prvInsertTimerInActiveList>
					break;
 8008518:	e015      	b.n	8008546 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d103      	bne.n	8008530 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800852a:	f000 fbc3 	bl	8008cb4 <vPortFree>
 800852e:	e00a      	b.n	8008546 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	b2da      	uxtb	r2, r3
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008542:	e000      	b.n	8008546 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008544:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008546:	4b07      	ldr	r3, [pc, #28]	; (8008564 <prvProcessReceivedCommands+0x1b4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	1d39      	adds	r1, r7, #4
 800854c:	2200      	movs	r2, #0
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fc3a 	bl	8006dc8 <xQueueReceive>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	f47f af2e 	bne.w	80083b8 <prvProcessReceivedCommands+0x8>
	}
}
 800855c:	bf00      	nop
 800855e:	3730      	adds	r7, #48	; 0x30
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20001278 	.word	0x20001278

08008568 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800856e:	e047      	b.n	8008600 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008570:	4b2d      	ldr	r3, [pc, #180]	; (8008628 <prvSwitchTimerLists+0xc0>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800857a:	4b2b      	ldr	r3, [pc, #172]	; (8008628 <prvSwitchTimerLists+0xc0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3304      	adds	r3, #4
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe f927 	bl	80067dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d02d      	beq.n	8008600 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4413      	add	r3, r2
 80085ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d90e      	bls.n	80085d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085c2:	4b19      	ldr	r3, [pc, #100]	; (8008628 <prvSwitchTimerLists+0xc0>)
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f7fe f8cc 	bl	800676a <vListInsert>
 80085d2:	e015      	b.n	8008600 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085d4:	2300      	movs	r3, #0
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2300      	movs	r3, #0
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	2100      	movs	r1, #0
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff fd68 	bl	80080b4 <xTimerGenericCommand>
 80085e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d109      	bne.n	8008600 <prvSwitchTimerLists+0x98>
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	e7fe      	b.n	80085fe <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008600:	4b09      	ldr	r3, [pc, #36]	; (8008628 <prvSwitchTimerLists+0xc0>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1b2      	bne.n	8008570 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800860a:	4b07      	ldr	r3, [pc, #28]	; (8008628 <prvSwitchTimerLists+0xc0>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008610:	4b06      	ldr	r3, [pc, #24]	; (800862c <prvSwitchTimerLists+0xc4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a04      	ldr	r2, [pc, #16]	; (8008628 <prvSwitchTimerLists+0xc0>)
 8008616:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008618:	4a04      	ldr	r2, [pc, #16]	; (800862c <prvSwitchTimerLists+0xc4>)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6013      	str	r3, [r2, #0]
}
 800861e:	bf00      	nop
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20001270 	.word	0x20001270
 800862c:	20001274 	.word	0x20001274

08008630 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008636:	f000 f961 	bl	80088fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800863a:	4b15      	ldr	r3, [pc, #84]	; (8008690 <prvCheckForValidListAndQueue+0x60>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d120      	bne.n	8008684 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008642:	4814      	ldr	r0, [pc, #80]	; (8008694 <prvCheckForValidListAndQueue+0x64>)
 8008644:	f7fe f840 	bl	80066c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008648:	4813      	ldr	r0, [pc, #76]	; (8008698 <prvCheckForValidListAndQueue+0x68>)
 800864a:	f7fe f83d 	bl	80066c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800864e:	4b13      	ldr	r3, [pc, #76]	; (800869c <prvCheckForValidListAndQueue+0x6c>)
 8008650:	4a10      	ldr	r2, [pc, #64]	; (8008694 <prvCheckForValidListAndQueue+0x64>)
 8008652:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008654:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <prvCheckForValidListAndQueue+0x70>)
 8008656:	4a10      	ldr	r2, [pc, #64]	; (8008698 <prvCheckForValidListAndQueue+0x68>)
 8008658:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800865a:	2300      	movs	r3, #0
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <prvCheckForValidListAndQueue+0x74>)
 8008660:	4a11      	ldr	r2, [pc, #68]	; (80086a8 <prvCheckForValidListAndQueue+0x78>)
 8008662:	2110      	movs	r1, #16
 8008664:	200a      	movs	r0, #10
 8008666:	f7fe f94b 	bl	8006900 <xQueueGenericCreateStatic>
 800866a:	4602      	mov	r2, r0
 800866c:	4b08      	ldr	r3, [pc, #32]	; (8008690 <prvCheckForValidListAndQueue+0x60>)
 800866e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008670:	4b07      	ldr	r3, [pc, #28]	; (8008690 <prvCheckForValidListAndQueue+0x60>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <prvCheckForValidListAndQueue+0x60>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	490b      	ldr	r1, [pc, #44]	; (80086ac <prvCheckForValidListAndQueue+0x7c>)
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fd8e 	bl	80071a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008684:	f000 f968 	bl	8008958 <vPortExitCritical>
}
 8008688:	bf00      	nop
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20001278 	.word	0x20001278
 8008694:	20001248 	.word	0x20001248
 8008698:	2000125c 	.word	0x2000125c
 800869c:	20001270 	.word	0x20001270
 80086a0:	20001274 	.word	0x20001274
 80086a4:	20001324 	.word	0x20001324
 80086a8:	20001284 	.word	0x20001284
 80086ac:	080093d0 	.word	0x080093d0

080086b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3b04      	subs	r3, #4
 80086c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3b04      	subs	r3, #4
 80086ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f023 0201 	bic.w	r2, r3, #1
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b04      	subs	r3, #4
 80086de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086e0:	4a0c      	ldr	r2, [pc, #48]	; (8008714 <pxPortInitialiseStack+0x64>)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b14      	subs	r3, #20
 80086ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3b04      	subs	r3, #4
 80086f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f06f 0202 	mvn.w	r2, #2
 80086fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3b20      	subs	r3, #32
 8008704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008706:	68fb      	ldr	r3, [r7, #12]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	08008719 	.word	0x08008719

08008718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008722:	4b11      	ldr	r3, [pc, #68]	; (8008768 <prvTaskExitError+0x50>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d009      	beq.n	8008740 <prvTaskExitError+0x28>
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	e7fe      	b.n	800873e <prvTaskExitError+0x26>
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008752:	bf00      	nop
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0fc      	beq.n	8008754 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000030 	.word	0x20000030
 800876c:	00000000 	.word	0x00000000

08008770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <pxCurrentTCBConst2>)
 8008772:	6819      	ldr	r1, [r3, #0]
 8008774:	6808      	ldr	r0, [r1, #0]
 8008776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877a:	f380 8809 	msr	PSP, r0
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	f380 8811 	msr	BASEPRI, r0
 800878a:	4770      	bx	lr
 800878c:	f3af 8000 	nop.w

08008790 <pxCurrentTCBConst2>:
 8008790:	20000d48 	.word	0x20000d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008798:	4808      	ldr	r0, [pc, #32]	; (80087bc <prvPortStartFirstTask+0x24>)
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	6800      	ldr	r0, [r0, #0]
 800879e:	f380 8808 	msr	MSP, r0
 80087a2:	f04f 0000 	mov.w	r0, #0
 80087a6:	f380 8814 	msr	CONTROL, r0
 80087aa:	b662      	cpsie	i
 80087ac:	b661      	cpsie	f
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	df00      	svc	0
 80087b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087ba:	bf00      	nop
 80087bc:	e000ed08 	.word	0xe000ed08

080087c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087c6:	4b44      	ldr	r3, [pc, #272]	; (80088d8 <xPortStartScheduler+0x118>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a44      	ldr	r2, [pc, #272]	; (80088dc <xPortStartScheduler+0x11c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d109      	bne.n	80087e4 <xPortStartScheduler+0x24>
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	613b      	str	r3, [r7, #16]
 80087e2:	e7fe      	b.n	80087e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087e4:	4b3c      	ldr	r3, [pc, #240]	; (80088d8 <xPortStartScheduler+0x118>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a3d      	ldr	r2, [pc, #244]	; (80088e0 <xPortStartScheduler+0x120>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d109      	bne.n	8008802 <xPortStartScheduler+0x42>
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e7fe      	b.n	8008800 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008802:	4b38      	ldr	r3, [pc, #224]	; (80088e4 <xPortStartScheduler+0x124>)
 8008804:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	22ff      	movs	r2, #255	; 0xff
 8008812:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008824:	b2da      	uxtb	r2, r3
 8008826:	4b30      	ldr	r3, [pc, #192]	; (80088e8 <xPortStartScheduler+0x128>)
 8008828:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800882a:	4b30      	ldr	r3, [pc, #192]	; (80088ec <xPortStartScheduler+0x12c>)
 800882c:	2207      	movs	r2, #7
 800882e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008830:	e009      	b.n	8008846 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008832:	4b2e      	ldr	r3, [pc, #184]	; (80088ec <xPortStartScheduler+0x12c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3b01      	subs	r3, #1
 8008838:	4a2c      	ldr	r2, [pc, #176]	; (80088ec <xPortStartScheduler+0x12c>)
 800883a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	b2db      	uxtb	r3, r3
 8008844:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	b2db      	uxtb	r3, r3
 800884a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884e:	2b80      	cmp	r3, #128	; 0x80
 8008850:	d0ef      	beq.n	8008832 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008852:	4b26      	ldr	r3, [pc, #152]	; (80088ec <xPortStartScheduler+0x12c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f1c3 0307 	rsb	r3, r3, #7
 800885a:	2b04      	cmp	r3, #4
 800885c:	d009      	beq.n	8008872 <xPortStartScheduler+0xb2>
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	60bb      	str	r3, [r7, #8]
 8008870:	e7fe      	b.n	8008870 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008872:	4b1e      	ldr	r3, [pc, #120]	; (80088ec <xPortStartScheduler+0x12c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	4a1c      	ldr	r2, [pc, #112]	; (80088ec <xPortStartScheduler+0x12c>)
 800887a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800887c:	4b1b      	ldr	r3, [pc, #108]	; (80088ec <xPortStartScheduler+0x12c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008884:	4a19      	ldr	r2, [pc, #100]	; (80088ec <xPortStartScheduler+0x12c>)
 8008886:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	b2da      	uxtb	r2, r3
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008890:	4b17      	ldr	r3, [pc, #92]	; (80088f0 <xPortStartScheduler+0x130>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a16      	ldr	r2, [pc, #88]	; (80088f0 <xPortStartScheduler+0x130>)
 8008896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800889a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800889c:	4b14      	ldr	r3, [pc, #80]	; (80088f0 <xPortStartScheduler+0x130>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a13      	ldr	r2, [pc, #76]	; (80088f0 <xPortStartScheduler+0x130>)
 80088a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088a8:	f000 f8d6 	bl	8008a58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088ac:	4b11      	ldr	r3, [pc, #68]	; (80088f4 <xPortStartScheduler+0x134>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088b2:	f000 f8f5 	bl	8008aa0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088b6:	4b10      	ldr	r3, [pc, #64]	; (80088f8 <xPortStartScheduler+0x138>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a0f      	ldr	r2, [pc, #60]	; (80088f8 <xPortStartScheduler+0x138>)
 80088bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80088c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088c2:	f7ff ff69 	bl	8008798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088c6:	f7ff f86f 	bl	80079a8 <vTaskSwitchContext>
	prvTaskExitError();
 80088ca:	f7ff ff25 	bl	8008718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	e000ed00 	.word	0xe000ed00
 80088dc:	410fc271 	.word	0x410fc271
 80088e0:	410fc270 	.word	0x410fc270
 80088e4:	e000e400 	.word	0xe000e400
 80088e8:	20001374 	.word	0x20001374
 80088ec:	20001378 	.word	0x20001378
 80088f0:	e000ed20 	.word	0xe000ed20
 80088f4:	20000030 	.word	0x20000030
 80088f8:	e000ef34 	.word	0xe000ef34

080088fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008914:	4b0e      	ldr	r3, [pc, #56]	; (8008950 <vPortEnterCritical+0x54>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	4a0d      	ldr	r2, [pc, #52]	; (8008950 <vPortEnterCritical+0x54>)
 800891c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800891e:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <vPortEnterCritical+0x54>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d10e      	bne.n	8008944 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008926:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <vPortEnterCritical+0x58>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <vPortEnterCritical+0x48>
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	e7fe      	b.n	8008942 <vPortEnterCritical+0x46>
	}
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20000030 	.word	0x20000030
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800895e:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <vPortExitCritical+0x4c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <vPortExitCritical+0x22>
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	607b      	str	r3, [r7, #4]
 8008978:	e7fe      	b.n	8008978 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <vPortExitCritical+0x4c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3b01      	subs	r3, #1
 8008980:	4a08      	ldr	r2, [pc, #32]	; (80089a4 <vPortExitCritical+0x4c>)
 8008982:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008984:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <vPortExitCritical+0x4c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d104      	bne.n	8008996 <vPortExitCritical+0x3e>
 800898c:	2300      	movs	r3, #0
 800898e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000030 	.word	0x20000030
	...

080089b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089b0:	f3ef 8009 	mrs	r0, PSP
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <pxCurrentTCBConst>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	f01e 0f10 	tst.w	lr, #16
 80089c0:	bf08      	it	eq
 80089c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ca:	6010      	str	r0, [r2, #0]
 80089cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089d4:	f380 8811 	msr	BASEPRI, r0
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f7fe ffe2 	bl	80079a8 <vTaskSwitchContext>
 80089e4:	f04f 0000 	mov.w	r0, #0
 80089e8:	f380 8811 	msr	BASEPRI, r0
 80089ec:	bc09      	pop	{r0, r3}
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	6808      	ldr	r0, [r1, #0]
 80089f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f6:	f01e 0f10 	tst.w	lr, #16
 80089fa:	bf08      	it	eq
 80089fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a00:	f380 8809 	msr	PSP, r0
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst>:
 8008a10:	20000d48 	.word	0x20000d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a30:	f7fe ff02 	bl	8007838 <xTaskIncrementTick>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a3a:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <SysTick_Handler+0x3c>)
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	2300      	movs	r3, #0
 8008a44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <vPortSetupTimerInterrupt+0x34>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a62:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <vPortSetupTimerInterrupt+0x38>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <vPortSetupTimerInterrupt+0x3c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a0a      	ldr	r2, [pc, #40]	; (8008a98 <vPortSetupTimerInterrupt+0x40>)
 8008a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a72:	099b      	lsrs	r3, r3, #6
 8008a74:	4a09      	ldr	r2, [pc, #36]	; (8008a9c <vPortSetupTimerInterrupt+0x44>)
 8008a76:	3b01      	subs	r3, #1
 8008a78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a7a:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <vPortSetupTimerInterrupt+0x34>)
 8008a7c:	2207      	movs	r2, #7
 8008a7e:	601a      	str	r2, [r3, #0]
}
 8008a80:	bf00      	nop
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	e000e010 	.word	0xe000e010
 8008a90:	e000e018 	.word	0xe000e018
 8008a94:	20000024 	.word	0x20000024
 8008a98:	10624dd3 	.word	0x10624dd3
 8008a9c:	e000e014 	.word	0xe000e014

08008aa0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008aa0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ab0 <vPortEnableVFP+0x10>
 8008aa4:	6801      	ldr	r1, [r0, #0]
 8008aa6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008aaa:	6001      	str	r1, [r0, #0]
 8008aac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aae:	bf00      	nop
 8008ab0:	e000ed88 	.word	0xe000ed88

08008ab4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008aba:	f3ef 8305 	mrs	r3, IPSR
 8008abe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b0f      	cmp	r3, #15
 8008ac4:	d913      	bls.n	8008aee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ac6:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <vPortValidateInterruptPriority+0x6c>)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ad0:	4b14      	ldr	r3, [pc, #80]	; (8008b24 <vPortValidateInterruptPriority+0x70>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	7afa      	ldrb	r2, [r7, #11]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d209      	bcs.n	8008aee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	607b      	str	r3, [r7, #4]
 8008aec:	e7fe      	b.n	8008aec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aee:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <vPortValidateInterruptPriority+0x74>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008af6:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <vPortValidateInterruptPriority+0x78>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d909      	bls.n	8008b12 <vPortValidateInterruptPriority+0x5e>
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	e7fe      	b.n	8008b10 <vPortValidateInterruptPriority+0x5c>
	}
 8008b12:	bf00      	nop
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	e000e3f0 	.word	0xe000e3f0
 8008b24:	20001374 	.word	0x20001374
 8008b28:	e000ed0c 	.word	0xe000ed0c
 8008b2c:	20001378 	.word	0x20001378

08008b30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b3c:	f7fe fdc2 	bl	80076c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b40:	4b57      	ldr	r3, [pc, #348]	; (8008ca0 <pvPortMalloc+0x170>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b48:	f000 f90c 	bl	8008d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b4c:	4b55      	ldr	r3, [pc, #340]	; (8008ca4 <pvPortMalloc+0x174>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4013      	ands	r3, r2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f040 808c 	bne.w	8008c72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d01c      	beq.n	8008b9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008b60:	2208      	movs	r2, #8
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d013      	beq.n	8008b9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f023 0307 	bic.w	r3, r3, #7
 8008b78:	3308      	adds	r3, #8
 8008b7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d009      	beq.n	8008b9a <pvPortMalloc+0x6a>
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	e7fe      	b.n	8008b98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d068      	beq.n	8008c72 <pvPortMalloc+0x142>
 8008ba0:	4b41      	ldr	r3, [pc, #260]	; (8008ca8 <pvPortMalloc+0x178>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d863      	bhi.n	8008c72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008baa:	4b40      	ldr	r3, [pc, #256]	; (8008cac <pvPortMalloc+0x17c>)
 8008bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bae:	4b3f      	ldr	r3, [pc, #252]	; (8008cac <pvPortMalloc+0x17c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bb4:	e004      	b.n	8008bc0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d903      	bls.n	8008bd2 <pvPortMalloc+0xa2>
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f1      	bne.n	8008bb6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bd2:	4b33      	ldr	r3, [pc, #204]	; (8008ca0 <pvPortMalloc+0x170>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d04a      	beq.n	8008c72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2208      	movs	r2, #8
 8008be2:	4413      	add	r3, r2
 8008be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	1ad2      	subs	r2, r2, r3
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d91e      	bls.n	8008c3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4413      	add	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d009      	beq.n	8008c24 <pvPortMalloc+0xf4>
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	613b      	str	r3, [r7, #16]
 8008c22:	e7fe      	b.n	8008c22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c36:	69b8      	ldr	r0, [r7, #24]
 8008c38:	f000 f8f6 	bl	8008e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ca8 <pvPortMalloc+0x178>)
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	4a18      	ldr	r2, [pc, #96]	; (8008ca8 <pvPortMalloc+0x178>)
 8008c48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c4a:	4b17      	ldr	r3, [pc, #92]	; (8008ca8 <pvPortMalloc+0x178>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4b18      	ldr	r3, [pc, #96]	; (8008cb0 <pvPortMalloc+0x180>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d203      	bcs.n	8008c5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c56:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <pvPortMalloc+0x178>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a15      	ldr	r2, [pc, #84]	; (8008cb0 <pvPortMalloc+0x180>)
 8008c5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	4b10      	ldr	r3, [pc, #64]	; (8008ca4 <pvPortMalloc+0x174>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c72:	f7fe fd35 	bl	80076e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d009      	beq.n	8008c94 <pvPortMalloc+0x164>
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e7fe      	b.n	8008c92 <pvPortMalloc+0x162>
	return pvReturn;
 8008c94:	69fb      	ldr	r3, [r7, #28]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3728      	adds	r7, #40	; 0x28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20004f84 	.word	0x20004f84
 8008ca4:	20004f90 	.word	0x20004f90
 8008ca8:	20004f88 	.word	0x20004f88
 8008cac:	20004f7c 	.word	0x20004f7c
 8008cb0:	20004f8c 	.word	0x20004f8c

08008cb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d046      	beq.n	8008d54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	425b      	negs	r3, r3
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4413      	add	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <vPortFree+0xa8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <vPortFree+0x42>
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	e7fe      	b.n	8008cf4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d009      	beq.n	8008d12 <vPortFree+0x5e>
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	60bb      	str	r3, [r7, #8]
 8008d10:	e7fe      	b.n	8008d10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <vPortFree+0xa8>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d019      	beq.n	8008d54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d115      	bne.n	8008d54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <vPortFree+0xa8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	43db      	mvns	r3, r3
 8008d32:	401a      	ands	r2, r3
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d38:	f7fe fcc4 	bl	80076c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <vPortFree+0xac>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4413      	add	r3, r2
 8008d46:	4a06      	ldr	r2, [pc, #24]	; (8008d60 <vPortFree+0xac>)
 8008d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d4a:	6938      	ldr	r0, [r7, #16]
 8008d4c:	f000 f86c 	bl	8008e28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d50:	f7fe fcc6 	bl	80076e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d54:	bf00      	nop
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20004f90 	.word	0x20004f90
 8008d60:	20004f88 	.word	0x20004f88

08008d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d70:	4b27      	ldr	r3, [pc, #156]	; (8008e10 <prvHeapInit+0xac>)
 8008d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00c      	beq.n	8008d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3307      	adds	r3, #7
 8008d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0307 	bic.w	r3, r3, #7
 8008d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	4a1f      	ldr	r2, [pc, #124]	; (8008e10 <prvHeapInit+0xac>)
 8008d94:	4413      	add	r3, r2
 8008d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d9c:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <prvHeapInit+0xb0>)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008da2:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <prvHeapInit+0xb0>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	4413      	add	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008db0:	2208      	movs	r2, #8
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <prvHeapInit+0xb4>)
 8008dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <prvHeapInit+0xb4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dce:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <prvHeapInit+0xb4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008de4:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <prvHeapInit+0xb4>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <prvHeapInit+0xb8>)
 8008df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <prvHeapInit+0xbc>)
 8008dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <prvHeapInit+0xc0>)
 8008dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	2000137c 	.word	0x2000137c
 8008e14:	20004f7c 	.word	0x20004f7c
 8008e18:	20004f84 	.word	0x20004f84
 8008e1c:	20004f8c 	.word	0x20004f8c
 8008e20:	20004f88 	.word	0x20004f88
 8008e24:	20004f90 	.word	0x20004f90

08008e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e30:	4b28      	ldr	r3, [pc, #160]	; (8008ed4 <prvInsertBlockIntoFreeList+0xac>)
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e002      	b.n	8008e3c <prvInsertBlockIntoFreeList+0x14>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d8f7      	bhi.n	8008e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	4413      	add	r3, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d108      	bne.n	8008e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	441a      	add	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d118      	bne.n	8008eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d00d      	beq.n	8008ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	441a      	add	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e008      	b.n	8008eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e003      	b.n	8008eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d002      	beq.n	8008ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20004f7c 	.word	0x20004f7c
 8008ed8:	20004f84 	.word	0x20004f84

08008edc <atoi>:
 8008edc:	220a      	movs	r2, #10
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f000 b99a 	b.w	8009218 <strtol>

08008ee4 <__errno>:
 8008ee4:	4b01      	ldr	r3, [pc, #4]	; (8008eec <__errno+0x8>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000034 	.word	0x20000034

08008ef0 <__libc_init_array>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	4e0d      	ldr	r6, [pc, #52]	; (8008f28 <__libc_init_array+0x38>)
 8008ef4:	4c0d      	ldr	r4, [pc, #52]	; (8008f2c <__libc_init_array+0x3c>)
 8008ef6:	1ba4      	subs	r4, r4, r6
 8008ef8:	10a4      	asrs	r4, r4, #2
 8008efa:	2500      	movs	r5, #0
 8008efc:	42a5      	cmp	r5, r4
 8008efe:	d109      	bne.n	8008f14 <__libc_init_array+0x24>
 8008f00:	4e0b      	ldr	r6, [pc, #44]	; (8008f30 <__libc_init_array+0x40>)
 8008f02:	4c0c      	ldr	r4, [pc, #48]	; (8008f34 <__libc_init_array+0x44>)
 8008f04:	f000 fa00 	bl	8009308 <_init>
 8008f08:	1ba4      	subs	r4, r4, r6
 8008f0a:	10a4      	asrs	r4, r4, #2
 8008f0c:	2500      	movs	r5, #0
 8008f0e:	42a5      	cmp	r5, r4
 8008f10:	d105      	bne.n	8008f1e <__libc_init_array+0x2e>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f18:	4798      	blx	r3
 8008f1a:	3501      	adds	r5, #1
 8008f1c:	e7ee      	b.n	8008efc <__libc_init_array+0xc>
 8008f1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f22:	4798      	blx	r3
 8008f24:	3501      	adds	r5, #1
 8008f26:	e7f2      	b.n	8008f0e <__libc_init_array+0x1e>
 8008f28:	080095d8 	.word	0x080095d8
 8008f2c:	080095d8 	.word	0x080095d8
 8008f30:	080095d8 	.word	0x080095d8
 8008f34:	080095dc 	.word	0x080095dc

08008f38 <__itoa>:
 8008f38:	1e93      	subs	r3, r2, #2
 8008f3a:	2b22      	cmp	r3, #34	; 0x22
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	460c      	mov	r4, r1
 8008f40:	d904      	bls.n	8008f4c <__itoa+0x14>
 8008f42:	2300      	movs	r3, #0
 8008f44:	700b      	strb	r3, [r1, #0]
 8008f46:	461c      	mov	r4, r3
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bd10      	pop	{r4, pc}
 8008f4c:	2a0a      	cmp	r2, #10
 8008f4e:	d109      	bne.n	8008f64 <__itoa+0x2c>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	da07      	bge.n	8008f64 <__itoa+0x2c>
 8008f54:	232d      	movs	r3, #45	; 0x2d
 8008f56:	700b      	strb	r3, [r1, #0]
 8008f58:	4240      	negs	r0, r0
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	4421      	add	r1, r4
 8008f5e:	f000 f971 	bl	8009244 <__utoa>
 8008f62:	e7f1      	b.n	8008f48 <__itoa+0x10>
 8008f64:	2100      	movs	r1, #0
 8008f66:	e7f9      	b.n	8008f5c <__itoa+0x24>

08008f68 <itoa>:
 8008f68:	f7ff bfe6 	b.w	8008f38 <__itoa>

08008f6c <malloc>:
 8008f6c:	4b02      	ldr	r3, [pc, #8]	; (8008f78 <malloc+0xc>)
 8008f6e:	4601      	mov	r1, r0
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	f000 b817 	b.w	8008fa4 <_malloc_r>
 8008f76:	bf00      	nop
 8008f78:	20000034 	.word	0x20000034

08008f7c <memcpy>:
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	1e43      	subs	r3, r0, #1
 8008f80:	440a      	add	r2, r1
 8008f82:	4291      	cmp	r1, r2
 8008f84:	d100      	bne.n	8008f88 <memcpy+0xc>
 8008f86:	bd10      	pop	{r4, pc}
 8008f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f90:	e7f7      	b.n	8008f82 <memcpy+0x6>

08008f92 <memset>:
 8008f92:	4402      	add	r2, r0
 8008f94:	4603      	mov	r3, r0
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d100      	bne.n	8008f9c <memset+0xa>
 8008f9a:	4770      	bx	lr
 8008f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8008fa0:	e7f9      	b.n	8008f96 <memset+0x4>
	...

08008fa4 <_malloc_r>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	1ccd      	adds	r5, r1, #3
 8008fa8:	f025 0503 	bic.w	r5, r5, #3
 8008fac:	3508      	adds	r5, #8
 8008fae:	2d0c      	cmp	r5, #12
 8008fb0:	bf38      	it	cc
 8008fb2:	250c      	movcc	r5, #12
 8008fb4:	2d00      	cmp	r5, #0
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	db01      	blt.n	8008fbe <_malloc_r+0x1a>
 8008fba:	42a9      	cmp	r1, r5
 8008fbc:	d903      	bls.n	8008fc6 <_malloc_r+0x22>
 8008fbe:	230c      	movs	r3, #12
 8008fc0:	6033      	str	r3, [r6, #0]
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	bd70      	pop	{r4, r5, r6, pc}
 8008fc6:	f000 f990 	bl	80092ea <__malloc_lock>
 8008fca:	4a21      	ldr	r2, [pc, #132]	; (8009050 <_malloc_r+0xac>)
 8008fcc:	6814      	ldr	r4, [r2, #0]
 8008fce:	4621      	mov	r1, r4
 8008fd0:	b991      	cbnz	r1, 8008ff8 <_malloc_r+0x54>
 8008fd2:	4c20      	ldr	r4, [pc, #128]	; (8009054 <_malloc_r+0xb0>)
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	b91b      	cbnz	r3, 8008fe0 <_malloc_r+0x3c>
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f000 f83d 	bl	8009058 <_sbrk_r>
 8008fde:	6020      	str	r0, [r4, #0]
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f000 f838 	bl	8009058 <_sbrk_r>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d124      	bne.n	8009036 <_malloc_r+0x92>
 8008fec:	230c      	movs	r3, #12
 8008fee:	6033      	str	r3, [r6, #0]
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f000 f97b 	bl	80092ec <__malloc_unlock>
 8008ff6:	e7e4      	b.n	8008fc2 <_malloc_r+0x1e>
 8008ff8:	680b      	ldr	r3, [r1, #0]
 8008ffa:	1b5b      	subs	r3, r3, r5
 8008ffc:	d418      	bmi.n	8009030 <_malloc_r+0x8c>
 8008ffe:	2b0b      	cmp	r3, #11
 8009000:	d90f      	bls.n	8009022 <_malloc_r+0x7e>
 8009002:	600b      	str	r3, [r1, #0]
 8009004:	50cd      	str	r5, [r1, r3]
 8009006:	18cc      	adds	r4, r1, r3
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f96f 	bl	80092ec <__malloc_unlock>
 800900e:	f104 000b 	add.w	r0, r4, #11
 8009012:	1d23      	adds	r3, r4, #4
 8009014:	f020 0007 	bic.w	r0, r0, #7
 8009018:	1ac3      	subs	r3, r0, r3
 800901a:	d0d3      	beq.n	8008fc4 <_malloc_r+0x20>
 800901c:	425a      	negs	r2, r3
 800901e:	50e2      	str	r2, [r4, r3]
 8009020:	e7d0      	b.n	8008fc4 <_malloc_r+0x20>
 8009022:	428c      	cmp	r4, r1
 8009024:	684b      	ldr	r3, [r1, #4]
 8009026:	bf16      	itet	ne
 8009028:	6063      	strne	r3, [r4, #4]
 800902a:	6013      	streq	r3, [r2, #0]
 800902c:	460c      	movne	r4, r1
 800902e:	e7eb      	b.n	8009008 <_malloc_r+0x64>
 8009030:	460c      	mov	r4, r1
 8009032:	6849      	ldr	r1, [r1, #4]
 8009034:	e7cc      	b.n	8008fd0 <_malloc_r+0x2c>
 8009036:	1cc4      	adds	r4, r0, #3
 8009038:	f024 0403 	bic.w	r4, r4, #3
 800903c:	42a0      	cmp	r0, r4
 800903e:	d005      	beq.n	800904c <_malloc_r+0xa8>
 8009040:	1a21      	subs	r1, r4, r0
 8009042:	4630      	mov	r0, r6
 8009044:	f000 f808 	bl	8009058 <_sbrk_r>
 8009048:	3001      	adds	r0, #1
 800904a:	d0cf      	beq.n	8008fec <_malloc_r+0x48>
 800904c:	6025      	str	r5, [r4, #0]
 800904e:	e7db      	b.n	8009008 <_malloc_r+0x64>
 8009050:	20004f94 	.word	0x20004f94
 8009054:	20004f98 	.word	0x20004f98

08009058 <_sbrk_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4c06      	ldr	r4, [pc, #24]	; (8009074 <_sbrk_r+0x1c>)
 800905c:	2300      	movs	r3, #0
 800905e:	4605      	mov	r5, r0
 8009060:	4608      	mov	r0, r1
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	f7f9 fc86 	bl	8002974 <_sbrk>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_sbrk_r+0x1a>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	b103      	cbz	r3, 8009072 <_sbrk_r+0x1a>
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	200052ec 	.word	0x200052ec

08009078 <strtok>:
 8009078:	4b13      	ldr	r3, [pc, #76]	; (80090c8 <strtok+0x50>)
 800907a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907e:	681d      	ldr	r5, [r3, #0]
 8009080:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009082:	4606      	mov	r6, r0
 8009084:	460f      	mov	r7, r1
 8009086:	b9b4      	cbnz	r4, 80090b6 <strtok+0x3e>
 8009088:	2050      	movs	r0, #80	; 0x50
 800908a:	f7ff ff6f 	bl	8008f6c <malloc>
 800908e:	65a8      	str	r0, [r5, #88]	; 0x58
 8009090:	e9c0 4400 	strd	r4, r4, [r0]
 8009094:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009098:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800909c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80090a0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80090a4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80090a8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80090ac:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80090b0:	6184      	str	r4, [r0, #24]
 80090b2:	7704      	strb	r4, [r0, #28]
 80090b4:	6244      	str	r4, [r0, #36]	; 0x24
 80090b6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80090b8:	4639      	mov	r1, r7
 80090ba:	4630      	mov	r0, r6
 80090bc:	2301      	movs	r3, #1
 80090be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c2:	f000 b803 	b.w	80090cc <__strtok_r>
 80090c6:	bf00      	nop
 80090c8:	20000034 	.word	0x20000034

080090cc <__strtok_r>:
 80090cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ce:	b918      	cbnz	r0, 80090d8 <__strtok_r+0xc>
 80090d0:	6810      	ldr	r0, [r2, #0]
 80090d2:	b908      	cbnz	r0, 80090d8 <__strtok_r+0xc>
 80090d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d6:	4620      	mov	r0, r4
 80090d8:	4604      	mov	r4, r0
 80090da:	460f      	mov	r7, r1
 80090dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80090e0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80090e4:	b91e      	cbnz	r6, 80090ee <__strtok_r+0x22>
 80090e6:	b96d      	cbnz	r5, 8009104 <__strtok_r+0x38>
 80090e8:	6015      	str	r5, [r2, #0]
 80090ea:	4628      	mov	r0, r5
 80090ec:	e7f2      	b.n	80090d4 <__strtok_r+0x8>
 80090ee:	42b5      	cmp	r5, r6
 80090f0:	d1f6      	bne.n	80090e0 <__strtok_r+0x14>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1ef      	bne.n	80090d6 <__strtok_r+0xa>
 80090f6:	6014      	str	r4, [r2, #0]
 80090f8:	7003      	strb	r3, [r0, #0]
 80090fa:	e7eb      	b.n	80090d4 <__strtok_r+0x8>
 80090fc:	462b      	mov	r3, r5
 80090fe:	e00d      	b.n	800911c <__strtok_r+0x50>
 8009100:	b926      	cbnz	r6, 800910c <__strtok_r+0x40>
 8009102:	461c      	mov	r4, r3
 8009104:	4623      	mov	r3, r4
 8009106:	460f      	mov	r7, r1
 8009108:	f813 5b01 	ldrb.w	r5, [r3], #1
 800910c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009110:	42b5      	cmp	r5, r6
 8009112:	d1f5      	bne.n	8009100 <__strtok_r+0x34>
 8009114:	2d00      	cmp	r5, #0
 8009116:	d0f1      	beq.n	80090fc <__strtok_r+0x30>
 8009118:	2100      	movs	r1, #0
 800911a:	7021      	strb	r1, [r4, #0]
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	e7d9      	b.n	80090d4 <__strtok_r+0x8>

08009120 <_strtol_l.isra.0>:
 8009120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	4692      	mov	sl, r2
 800912a:	461e      	mov	r6, r3
 800912c:	460f      	mov	r7, r1
 800912e:	463d      	mov	r5, r7
 8009130:	9808      	ldr	r0, [sp, #32]
 8009132:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009136:	f000 f8c3 	bl	80092c0 <__locale_ctype_ptr_l>
 800913a:	4420      	add	r0, r4
 800913c:	7843      	ldrb	r3, [r0, #1]
 800913e:	f013 0308 	ands.w	r3, r3, #8
 8009142:	d132      	bne.n	80091aa <_strtol_l.isra.0+0x8a>
 8009144:	2c2d      	cmp	r4, #45	; 0x2d
 8009146:	d132      	bne.n	80091ae <_strtol_l.isra.0+0x8e>
 8009148:	787c      	ldrb	r4, [r7, #1]
 800914a:	1cbd      	adds	r5, r7, #2
 800914c:	2201      	movs	r2, #1
 800914e:	2e00      	cmp	r6, #0
 8009150:	d05d      	beq.n	800920e <_strtol_l.isra.0+0xee>
 8009152:	2e10      	cmp	r6, #16
 8009154:	d109      	bne.n	800916a <_strtol_l.isra.0+0x4a>
 8009156:	2c30      	cmp	r4, #48	; 0x30
 8009158:	d107      	bne.n	800916a <_strtol_l.isra.0+0x4a>
 800915a:	782b      	ldrb	r3, [r5, #0]
 800915c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009160:	2b58      	cmp	r3, #88	; 0x58
 8009162:	d14f      	bne.n	8009204 <_strtol_l.isra.0+0xe4>
 8009164:	786c      	ldrb	r4, [r5, #1]
 8009166:	2610      	movs	r6, #16
 8009168:	3502      	adds	r5, #2
 800916a:	2a00      	cmp	r2, #0
 800916c:	bf14      	ite	ne
 800916e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009172:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009176:	2700      	movs	r7, #0
 8009178:	fbb1 fcf6 	udiv	ip, r1, r6
 800917c:	4638      	mov	r0, r7
 800917e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009182:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009186:	2b09      	cmp	r3, #9
 8009188:	d817      	bhi.n	80091ba <_strtol_l.isra.0+0x9a>
 800918a:	461c      	mov	r4, r3
 800918c:	42a6      	cmp	r6, r4
 800918e:	dd23      	ble.n	80091d8 <_strtol_l.isra.0+0xb8>
 8009190:	1c7b      	adds	r3, r7, #1
 8009192:	d007      	beq.n	80091a4 <_strtol_l.isra.0+0x84>
 8009194:	4584      	cmp	ip, r0
 8009196:	d31c      	bcc.n	80091d2 <_strtol_l.isra.0+0xb2>
 8009198:	d101      	bne.n	800919e <_strtol_l.isra.0+0x7e>
 800919a:	45a6      	cmp	lr, r4
 800919c:	db19      	blt.n	80091d2 <_strtol_l.isra.0+0xb2>
 800919e:	fb00 4006 	mla	r0, r0, r6, r4
 80091a2:	2701      	movs	r7, #1
 80091a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091a8:	e7eb      	b.n	8009182 <_strtol_l.isra.0+0x62>
 80091aa:	462f      	mov	r7, r5
 80091ac:	e7bf      	b.n	800912e <_strtol_l.isra.0+0xe>
 80091ae:	2c2b      	cmp	r4, #43	; 0x2b
 80091b0:	bf04      	itt	eq
 80091b2:	1cbd      	addeq	r5, r7, #2
 80091b4:	787c      	ldrbeq	r4, [r7, #1]
 80091b6:	461a      	mov	r2, r3
 80091b8:	e7c9      	b.n	800914e <_strtol_l.isra.0+0x2e>
 80091ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80091be:	2b19      	cmp	r3, #25
 80091c0:	d801      	bhi.n	80091c6 <_strtol_l.isra.0+0xa6>
 80091c2:	3c37      	subs	r4, #55	; 0x37
 80091c4:	e7e2      	b.n	800918c <_strtol_l.isra.0+0x6c>
 80091c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80091ca:	2b19      	cmp	r3, #25
 80091cc:	d804      	bhi.n	80091d8 <_strtol_l.isra.0+0xb8>
 80091ce:	3c57      	subs	r4, #87	; 0x57
 80091d0:	e7dc      	b.n	800918c <_strtol_l.isra.0+0x6c>
 80091d2:	f04f 37ff 	mov.w	r7, #4294967295
 80091d6:	e7e5      	b.n	80091a4 <_strtol_l.isra.0+0x84>
 80091d8:	1c7b      	adds	r3, r7, #1
 80091da:	d108      	bne.n	80091ee <_strtol_l.isra.0+0xce>
 80091dc:	2322      	movs	r3, #34	; 0x22
 80091de:	f8c8 3000 	str.w	r3, [r8]
 80091e2:	4608      	mov	r0, r1
 80091e4:	f1ba 0f00 	cmp.w	sl, #0
 80091e8:	d107      	bne.n	80091fa <_strtol_l.isra.0+0xda>
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	b102      	cbz	r2, 80091f2 <_strtol_l.isra.0+0xd2>
 80091f0:	4240      	negs	r0, r0
 80091f2:	f1ba 0f00 	cmp.w	sl, #0
 80091f6:	d0f8      	beq.n	80091ea <_strtol_l.isra.0+0xca>
 80091f8:	b10f      	cbz	r7, 80091fe <_strtol_l.isra.0+0xde>
 80091fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80091fe:	f8ca 9000 	str.w	r9, [sl]
 8009202:	e7f2      	b.n	80091ea <_strtol_l.isra.0+0xca>
 8009204:	2430      	movs	r4, #48	; 0x30
 8009206:	2e00      	cmp	r6, #0
 8009208:	d1af      	bne.n	800916a <_strtol_l.isra.0+0x4a>
 800920a:	2608      	movs	r6, #8
 800920c:	e7ad      	b.n	800916a <_strtol_l.isra.0+0x4a>
 800920e:	2c30      	cmp	r4, #48	; 0x30
 8009210:	d0a3      	beq.n	800915a <_strtol_l.isra.0+0x3a>
 8009212:	260a      	movs	r6, #10
 8009214:	e7a9      	b.n	800916a <_strtol_l.isra.0+0x4a>
	...

08009218 <strtol>:
 8009218:	4b08      	ldr	r3, [pc, #32]	; (800923c <strtol+0x24>)
 800921a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800921c:	681c      	ldr	r4, [r3, #0]
 800921e:	4d08      	ldr	r5, [pc, #32]	; (8009240 <strtol+0x28>)
 8009220:	6a23      	ldr	r3, [r4, #32]
 8009222:	2b00      	cmp	r3, #0
 8009224:	bf08      	it	eq
 8009226:	462b      	moveq	r3, r5
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	4613      	mov	r3, r2
 800922c:	460a      	mov	r2, r1
 800922e:	4601      	mov	r1, r0
 8009230:	4620      	mov	r0, r4
 8009232:	f7ff ff75 	bl	8009120 <_strtol_l.isra.0>
 8009236:	b003      	add	sp, #12
 8009238:	bd30      	pop	{r4, r5, pc}
 800923a:	bf00      	nop
 800923c:	20000034 	.word	0x20000034
 8009240:	20000098 	.word	0x20000098

08009244 <__utoa>:
 8009244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009246:	4b1d      	ldr	r3, [pc, #116]	; (80092bc <__utoa+0x78>)
 8009248:	b08b      	sub	sp, #44	; 0x2c
 800924a:	4605      	mov	r5, r0
 800924c:	460c      	mov	r4, r1
 800924e:	466e      	mov	r6, sp
 8009250:	f103 0c20 	add.w	ip, r3, #32
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	6859      	ldr	r1, [r3, #4]
 8009258:	4637      	mov	r7, r6
 800925a:	c703      	stmia	r7!, {r0, r1}
 800925c:	3308      	adds	r3, #8
 800925e:	4563      	cmp	r3, ip
 8009260:	463e      	mov	r6, r7
 8009262:	d1f7      	bne.n	8009254 <__utoa+0x10>
 8009264:	6818      	ldr	r0, [r3, #0]
 8009266:	791b      	ldrb	r3, [r3, #4]
 8009268:	713b      	strb	r3, [r7, #4]
 800926a:	1e93      	subs	r3, r2, #2
 800926c:	2b22      	cmp	r3, #34	; 0x22
 800926e:	6038      	str	r0, [r7, #0]
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	d904      	bls.n	8009280 <__utoa+0x3c>
 8009276:	7023      	strb	r3, [r4, #0]
 8009278:	461c      	mov	r4, r3
 800927a:	4620      	mov	r0, r4
 800927c:	b00b      	add	sp, #44	; 0x2c
 800927e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009280:	1e66      	subs	r6, r4, #1
 8009282:	fbb5 f0f2 	udiv	r0, r5, r2
 8009286:	af0a      	add	r7, sp, #40	; 0x28
 8009288:	fb02 5510 	mls	r5, r2, r0, r5
 800928c:	443d      	add	r5, r7
 800928e:	1c59      	adds	r1, r3, #1
 8009290:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8009294:	f806 5f01 	strb.w	r5, [r6, #1]!
 8009298:	4605      	mov	r5, r0
 800929a:	b968      	cbnz	r0, 80092b8 <__utoa+0x74>
 800929c:	5460      	strb	r0, [r4, r1]
 800929e:	4423      	add	r3, r4
 80092a0:	4622      	mov	r2, r4
 80092a2:	1b19      	subs	r1, r3, r4
 80092a4:	1b10      	subs	r0, r2, r4
 80092a6:	4281      	cmp	r1, r0
 80092a8:	dde7      	ble.n	800927a <__utoa+0x36>
 80092aa:	7811      	ldrb	r1, [r2, #0]
 80092ac:	7818      	ldrb	r0, [r3, #0]
 80092ae:	f802 0b01 	strb.w	r0, [r2], #1
 80092b2:	f803 1901 	strb.w	r1, [r3], #-1
 80092b6:	e7f4      	b.n	80092a2 <__utoa+0x5e>
 80092b8:	460b      	mov	r3, r1
 80092ba:	e7e2      	b.n	8009282 <__utoa+0x3e>
 80092bc:	080094a0 	.word	0x080094a0

080092c0 <__locale_ctype_ptr_l>:
 80092c0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80092c4:	4770      	bx	lr

080092c6 <__ascii_mbtowc>:
 80092c6:	b082      	sub	sp, #8
 80092c8:	b901      	cbnz	r1, 80092cc <__ascii_mbtowc+0x6>
 80092ca:	a901      	add	r1, sp, #4
 80092cc:	b142      	cbz	r2, 80092e0 <__ascii_mbtowc+0x1a>
 80092ce:	b14b      	cbz	r3, 80092e4 <__ascii_mbtowc+0x1e>
 80092d0:	7813      	ldrb	r3, [r2, #0]
 80092d2:	600b      	str	r3, [r1, #0]
 80092d4:	7812      	ldrb	r2, [r2, #0]
 80092d6:	1c10      	adds	r0, r2, #0
 80092d8:	bf18      	it	ne
 80092da:	2001      	movne	r0, #1
 80092dc:	b002      	add	sp, #8
 80092de:	4770      	bx	lr
 80092e0:	4610      	mov	r0, r2
 80092e2:	e7fb      	b.n	80092dc <__ascii_mbtowc+0x16>
 80092e4:	f06f 0001 	mvn.w	r0, #1
 80092e8:	e7f8      	b.n	80092dc <__ascii_mbtowc+0x16>

080092ea <__malloc_lock>:
 80092ea:	4770      	bx	lr

080092ec <__malloc_unlock>:
 80092ec:	4770      	bx	lr

080092ee <__ascii_wctomb>:
 80092ee:	b149      	cbz	r1, 8009304 <__ascii_wctomb+0x16>
 80092f0:	2aff      	cmp	r2, #255	; 0xff
 80092f2:	bf85      	ittet	hi
 80092f4:	238a      	movhi	r3, #138	; 0x8a
 80092f6:	6003      	strhi	r3, [r0, #0]
 80092f8:	700a      	strbls	r2, [r1, #0]
 80092fa:	f04f 30ff 	movhi.w	r0, #4294967295
 80092fe:	bf98      	it	ls
 8009300:	2001      	movls	r0, #1
 8009302:	4770      	bx	lr
 8009304:	4608      	mov	r0, r1
 8009306:	4770      	bx	lr

08009308 <_init>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	bf00      	nop
 800930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930e:	bc08      	pop	{r3}
 8009310:	469e      	mov	lr, r3
 8009312:	4770      	bx	lr

08009314 <_fini>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr
